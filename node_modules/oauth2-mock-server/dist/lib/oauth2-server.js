"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OAuth2Server = void 0;
const node_fs_1 = require("node:fs");
const http_server_1 = require("./http-server");
const oauth2_issuer_1 = require("./oauth2-issuer");
const oauth2_service_1 = require("./oauth2-service");
const helpers_1 = require("./helpers");
class OAuth2Server extends http_server_1.HttpServer {
    _service;
    _issuer;
    constructor(key, cert, oauth2Options) {
        if ((key && !cert) || (!key && cert)) {
            throw new Error('Both key and cert need to be supplied to start the server with https');
        }
        const iss = new oauth2_issuer_1.OAuth2Issuer();
        const serv = new oauth2_service_1.OAuth2Service(iss, oauth2Options?.endpoints);
        let options = undefined;
        if (key && cert) {
            options = {
                key: (0, node_fs_1.readFileSync)(key),
                cert: (0, node_fs_1.readFileSync)(cert),
            };
        }
        super(serv.requestHandler, options);
        this._issuer = iss;
        this._service = serv;
    }
    get issuer() {
        return this._issuer;
    }
    get service() {
        return this._service;
    }
    get listening() {
        return super.listening;
    }
    address() {
        const address = super.address();
        (0, helpers_1.assertIsAddressInfo)(address);
        return address;
    }
    async start(port, host) {
        const server = await super.start(port, host);
        if (!this.issuer.url) {
            this.issuer.url = super.buildIssuerUrl(host, this.address().port);
        }
        return server;
    }
    async stop() {
        await super.stop();
        this._issuer.url = undefined;
    }
}
exports.OAuth2Server = OAuth2Server;

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OAuth2Issuer = void 0;
const node_events_1 = require("node:events");
const jose_1 = require("jose");
const jwk_store_1 = require("./jwk-store");
const helpers_1 = require("./helpers");
const types_internals_1 = require("./types-internals");
class OAuth2Issuer extends node_events_1.EventEmitter {
    url;
    #keys;
    constructor() {
        super();
        this.url = undefined;
        this.#keys = new jwk_store_1.JWKStore();
    }
    get keys() {
        return this.#keys;
    }
    async buildToken(opts) {
        const key = this.keys.get(opts?.kid);
        if (key === undefined) {
            throw new Error('Cannot build token: Unknown key.');
        }
        const timestamp = Math.floor(Date.now() / 1000);
        const header = {
            kid: key.kid,
        };
        (0, helpers_1.assertIsString)(this.url, 'Unknown issuer url');
        const payload = {
            iss: this.url,
            iat: timestamp,
            exp: timestamp + (opts?.expiresIn ?? helpers_1.defaultTokenTtl),
            nbf: timestamp - 10,
        };
        if (opts?.scopesOrTransform !== undefined) {
            const scopesOrTransform = opts.scopesOrTransform;
            if (typeof scopesOrTransform === 'string') {
                payload['scope'] = scopesOrTransform;
            }
            else if (Array.isArray(scopesOrTransform)) {
                payload['scope'] = scopesOrTransform.join(' ');
            }
            else if (typeof scopesOrTransform === 'function') {
                scopesOrTransform(header, payload);
            }
        }
        const token = {
            header,
            payload,
        };
        this.emit(types_internals_1.InternalEvents.BeforeSigning, token);
        const privateKey = await (0, jose_1.importJWK)(key);
        const jwt = await new jose_1.SignJWT(token.payload)
            .setProtectedHeader({ ...token.header, typ: 'JWT', alg: key.alg })
            .sign(privateKey);
        return jwt;
    }
}
exports.OAuth2Issuer = OAuth2Issuer;

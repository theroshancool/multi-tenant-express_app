import * as nanostores from 'nanostores';
import * as _better_fetch_fetch from '@better-fetch/fetch';
import { SuccessContext } from '@better-fetch/fetch';
import { C as ClientOptions, B as BetterAuthClientPlugin, I as IsSignal, d as InferRoute, c as InferErrorCodes } from '../shared/better-auth.DIY9076y.js';
import { B as BetterAuthOptions, U as User, t as InferAPI, a as Adapter, u as AdditionalSessionFieldsOutput, n as Auth, v as AdditionalUserFieldsOutput, w as InferFieldsFromPlugins, x as InferFieldsFromOptions, y as AdditionalUserFieldsInput, h as BetterAuthPlugin, p as AuthContext, z as InferPluginTypes, i as InferPluginErrorCodes, F as FilterActions, S as Session, D as setCookieToHeader } from '../shared/better-auth.jwa4Tx7v.js';
import * as better_call from 'better-call';
import { U as UnionToIntersection, S as StripEmptyObjects, a as Prettify } from '../shared/better-auth.BDR52Rf2.js';
import * as zod_v4_core from 'zod/v4/core';
import { O as OAuth2Tokens } from '../shared/better-auth.DnUZno9_.js';
import * as zod from 'zod';
import { Kysely } from 'kysely';
import 'zod/v4';
import 'better-sqlite3';
import 'bun:sqlite';
import 'jose';

declare function getTestInstanceMemory<O extends Partial<BetterAuthOptions>, C extends ClientOptions>(options?: O, config?: {
    clientOptions?: C;
    port?: number;
    disableTestUser?: boolean;
    testUser?: Partial<User>;
    testWith?: "sqlite" | "postgres" | "mongodb" | "mysql" | "memory";
}): Promise<{
    auth: {
        handler: (request: Request) => Promise<Response>;
        api: InferAPI<{
            ok: {
                <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0?: ({
                    body?: undefined;
                } & {
                    method?: "GET" | undefined;
                } & {
                    query?: Record<string, any> | undefined;
                } & {
                    params?: Record<string, any>;
                } & {
                    request?: Request;
                } & {
                    headers?: HeadersInit;
                } & {
                    asResponse?: boolean;
                    returnHeaders?: boolean;
                    use?: better_call.Middleware[];
                    path?: string;
                } & {
                    asResponse?: AsResponse | undefined;
                    returnHeaders?: ReturnHeaders | undefined;
                }) | undefined): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                    headers: Headers;
                    response: {
                        ok: boolean;
                    };
                } : {
                    ok: boolean;
                }>;
                options: {
                    method: "GET";
                    metadata: {
                        openapi: {
                            description: string;
                            responses: {
                                "200": {
                                    description: string;
                                    content: {
                                        "application/json": {
                                            schema: {
                                                type: "object";
                                                properties: {
                                                    ok: {
                                                        type: string;
                                                        description: string;
                                                    };
                                                };
                                                required: string[];
                                            };
                                        };
                                    };
                                };
                            };
                        };
                        isAction: false;
                    };
                } & {
                    use: any[];
                };
                path: "/ok";
            };
            error: {
                <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0?: ({
                    body?: undefined;
                } & {
                    method?: "GET" | undefined;
                } & {
                    query?: Record<string, any> | undefined;
                } & {
                    params?: Record<string, any>;
                } & {
                    request?: Request;
                } & {
                    headers?: HeadersInit;
                } & {
                    asResponse?: boolean;
                    returnHeaders?: boolean;
                    use?: better_call.Middleware[];
                    path?: string;
                } & {
                    asResponse?: AsResponse | undefined;
                    returnHeaders?: ReturnHeaders | undefined;
                }) | undefined): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                    headers: Headers;
                    response: Response;
                } : Response>;
                options: {
                    method: "GET";
                    metadata: {
                        openapi: {
                            description: string;
                            responses: {
                                "200": {
                                    description: string;
                                    content: {
                                        "text/html": {
                                            schema: {
                                                type: "string";
                                                description: string;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                        isAction: false;
                    };
                } & {
                    use: any[];
                };
                path: "/error";
            };
            signInSocial: {
                <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                    body: {
                        provider: unknown;
                        callbackURL?: string | undefined;
                        newUserCallbackURL?: string | undefined;
                        errorCallbackURL?: string | undefined;
                        disableRedirect?: boolean | undefined;
                        idToken?: {
                            token: string;
                            nonce?: string | undefined;
                            accessToken?: string | undefined;
                            refreshToken?: string | undefined;
                            expiresAt?: number | undefined;
                        } | undefined;
                        scopes?: string[] | undefined;
                        requestSignUp?: boolean | undefined;
                        loginHint?: string | undefined;
                    };
                } & {
                    method?: "POST" | undefined;
                } & {
                    query?: Record<string, any> | undefined;
                } & {
                    params?: Record<string, any>;
                } & {
                    request?: Request;
                } & {
                    headers?: HeadersInit;
                } & {
                    asResponse?: boolean;
                    returnHeaders?: boolean;
                    use?: better_call.Middleware[];
                    path?: string;
                } & {
                    asResponse?: AsResponse | undefined;
                    returnHeaders?: ReturnHeaders | undefined;
                }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                    headers: Headers;
                    response: {
                        redirect: boolean;
                        token: string;
                        url: undefined;
                        user: {
                            id: string;
                            email: string;
                            name: string;
                            image: string | null | undefined;
                            emailVerified: boolean;
                            createdAt: Date;
                            updatedAt: Date;
                        };
                    } | {
                        url: string;
                        redirect: boolean;
                    };
                } : {
                    redirect: boolean;
                    token: string;
                    url: undefined;
                    user: {
                        id: string;
                        email: string;
                        name: string;
                        image: string | null | undefined;
                        emailVerified: boolean;
                        createdAt: Date;
                        updatedAt: Date;
                    };
                } | {
                    url: string;
                    redirect: boolean;
                }>;
                options: {
                    method: "POST";
                    body: zod.ZodObject<{
                        callbackURL: zod.ZodOptional<zod.ZodString>;
                        newUserCallbackURL: zod.ZodOptional<zod.ZodString>;
                        errorCallbackURL: zod.ZodOptional<zod.ZodString>;
                        provider: zod.ZodType<"github" | "apple" | "discord" | "facebook" | "microsoft" | "google" | "huggingface" | "slack" | "spotify" | "twitch" | "twitter" | "dropbox" | "kick" | "linear" | "linkedin" | "gitlab" | "tiktok" | "reddit" | "roblox" | "vk" | "zoom" | "notion" | (string & {}), unknown, zod_v4_core.$ZodTypeInternals<"github" | "apple" | "discord" | "facebook" | "microsoft" | "google" | "huggingface" | "slack" | "spotify" | "twitch" | "twitter" | "dropbox" | "kick" | "linear" | "linkedin" | "gitlab" | "tiktok" | "reddit" | "roblox" | "vk" | "zoom" | "notion" | (string & {}), unknown>>;
                        disableRedirect: zod.ZodOptional<zod.ZodBoolean>;
                        idToken: zod.ZodOptional<zod.ZodObject<{
                            token: zod.ZodString;
                            nonce: zod.ZodOptional<zod.ZodString>;
                            accessToken: zod.ZodOptional<zod.ZodString>;
                            refreshToken: zod.ZodOptional<zod.ZodString>;
                            expiresAt: zod.ZodOptional<zod.ZodNumber>;
                        }, zod_v4_core.$strip>>;
                        scopes: zod.ZodOptional<zod.ZodArray<zod.ZodString>>;
                        requestSignUp: zod.ZodOptional<zod.ZodBoolean>;
                        loginHint: zod.ZodOptional<zod.ZodString>;
                    }, zod_v4_core.$strip>;
                    metadata: {
                        openapi: {
                            description: string;
                            operationId: string;
                            responses: {
                                "200": {
                                    description: string;
                                    content: {
                                        "application/json": {
                                            schema: {
                                                type: "object";
                                                description: string;
                                                properties: {
                                                    redirect: {
                                                        type: string;
                                                        enum: boolean[];
                                                    };
                                                    token: {
                                                        type: string;
                                                        description: string;
                                                        url: {
                                                            type: string;
                                                            nullable: boolean;
                                                        };
                                                        user: {
                                                            type: string;
                                                            properties: {
                                                                id: {
                                                                    type: string;
                                                                };
                                                                email: {
                                                                    type: string;
                                                                };
                                                                name: {
                                                                    type: string;
                                                                    nullable: boolean;
                                                                };
                                                                image: {
                                                                    type: string;
                                                                    nullable: boolean;
                                                                };
                                                                emailVerified: {
                                                                    type: string;
                                                                };
                                                                createdAt: {
                                                                    type: string;
                                                                    format: string;
                                                                };
                                                                updatedAt: {
                                                                    type: string;
                                                                    format: string;
                                                                };
                                                            };
                                                            required: string[];
                                                        };
                                                    };
                                                };
                                                required: string[];
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                } & {
                    use: any[];
                };
                path: "/sign-in/social";
            };
            callbackOAuth: {
                <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                    body?: {
                        code?: string | undefined;
                        error?: string | undefined;
                        device_id?: string | undefined;
                        error_description?: string | undefined;
                        state?: string | undefined;
                        user?: string | undefined;
                    } | undefined;
                } & {
                    method: "GET" | "POST";
                } & {
                    query?: {
                        code?: string | undefined;
                        error?: string | undefined;
                        device_id?: string | undefined;
                        error_description?: string | undefined;
                        state?: string | undefined;
                        user?: string | undefined;
                    } | undefined;
                } & {
                    params: {
                        id: string;
                    };
                } & {
                    request?: Request;
                } & {
                    headers?: HeadersInit;
                } & {
                    asResponse?: boolean;
                    returnHeaders?: boolean;
                    use?: better_call.Middleware[];
                    path?: string;
                } & {
                    asResponse?: AsResponse | undefined;
                    returnHeaders?: ReturnHeaders | undefined;
                }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                    headers: Headers;
                    response: void;
                } : void>;
                options: {
                    method: ("GET" | "POST")[];
                    body: zod.ZodOptional<zod.ZodObject<{
                        code: zod.ZodOptional<zod.ZodString>;
                        error: zod.ZodOptional<zod.ZodString>;
                        device_id: zod.ZodOptional<zod.ZodString>;
                        error_description: zod.ZodOptional<zod.ZodString>;
                        state: zod.ZodOptional<zod.ZodString>;
                        user: zod.ZodOptional<zod.ZodString>;
                    }, zod_v4_core.$strip>>;
                    query: zod.ZodOptional<zod.ZodObject<{
                        code: zod.ZodOptional<zod.ZodString>;
                        error: zod.ZodOptional<zod.ZodString>;
                        device_id: zod.ZodOptional<zod.ZodString>;
                        error_description: zod.ZodOptional<zod.ZodString>;
                        state: zod.ZodOptional<zod.ZodString>;
                        user: zod.ZodOptional<zod.ZodString>;
                    }, zod_v4_core.$strip>>;
                    metadata: {
                        isAction: false;
                    };
                } & {
                    use: any[];
                };
                path: "/callback/:id";
            };
            getSession: {
                <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                    body?: undefined;
                } & {
                    method?: "GET" | undefined;
                } & {
                    query?: {
                        disableCookieCache?: unknown;
                        disableRefresh?: unknown;
                    } | undefined;
                } & {
                    params?: Record<string, any>;
                } & {
                    request?: Request;
                } & {
                    headers: HeadersInit;
                } & {
                    asResponse?: boolean;
                    returnHeaders?: boolean;
                    use?: better_call.Middleware[];
                    path?: string;
                } & {
                    asResponse?: AsResponse | undefined;
                    returnHeaders?: ReturnHeaders | undefined;
                }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                    headers: Headers;
                    response: {
                        session: UnionToIntersection<StripEmptyObjects<{
                            id: string;
                            userId: string;
                            expiresAt: Date;
                            createdAt: Date;
                            updatedAt: Date;
                            token: string;
                            ipAddress?: string | null | undefined;
                            userAgent?: string | null | undefined;
                        } & ((O extends undefined ? {
                            socialProviders: {
                                github: {
                                    clientId: string;
                                    clientSecret: string;
                                };
                                google: {
                                    clientId: string;
                                    clientSecret: string;
                                };
                            };
                            secret: string;
                            database: ((options: BetterAuthOptions) => Adapter) | {
                                db: Kysely<unknown>;
                                type: "postgres";
                            } | {
                                db: Kysely<unknown>;
                                type: "mysql";
                            } | undefined;
                            emailAndPassword: {
                                enabled: true;
                            };
                            rateLimit: {
                                enabled: false;
                            };
                            advanced: {
                                cookies: {};
                            };
                        } : O & {
                            socialProviders: {
                                github: {
                                    clientId: string;
                                    clientSecret: string;
                                };
                                google: {
                                    clientId: string;
                                    clientSecret: string;
                                };
                            };
                            secret: string;
                            database: ((options: BetterAuthOptions) => Adapter) | {
                                db: Kysely<unknown>;
                                type: "postgres";
                            } | {
                                db: Kysely<unknown>;
                                type: "mysql";
                            } | undefined;
                            emailAndPassword: {
                                enabled: true;
                            };
                            rateLimit: {
                                enabled: false;
                            };
                            advanced: {
                                cookies: {};
                            };
                        }) extends infer T ? T extends (O extends undefined ? {
                            socialProviders: {
                                github: {
                                    clientId: string;
                                    clientSecret: string;
                                };
                                google: {
                                    clientId: string;
                                    clientSecret: string;
                                };
                            };
                            secret: string;
                            database: ((options: BetterAuthOptions) => Adapter) | {
                                db: Kysely<unknown>;
                                type: "postgres";
                            } | {
                                db: Kysely<unknown>;
                                type: "mysql";
                            } | undefined;
                            emailAndPassword: {
                                enabled: true;
                            };
                            rateLimit: {
                                enabled: false;
                            };
                            advanced: {
                                cookies: {};
                            };
                        } : O & {
                            socialProviders: {
                                github: {
                                    clientId: string;
                                    clientSecret: string;
                                };
                                google: {
                                    clientId: string;
                                    clientSecret: string;
                                };
                            };
                            secret: string;
                            database: ((options: BetterAuthOptions) => Adapter) | {
                                db: Kysely<unknown>;
                                type: "postgres";
                            } | {
                                db: Kysely<unknown>;
                                type: "mysql";
                            } | undefined;
                            emailAndPassword: {
                                enabled: true;
                            };
                            rateLimit: {
                                enabled: false;
                            };
                            advanced: {
                                cookies: {};
                            };
                        }) ? T extends BetterAuthOptions ? AdditionalSessionFieldsOutput<T> : T extends Auth ? AdditionalSessionFieldsOutput<T["options"]> : {} : never : never)>>;
                        user: UnionToIntersection<StripEmptyObjects<{
                            id: string;
                            email: string;
                            emailVerified: boolean;
                            name: string;
                            createdAt: Date;
                            updatedAt: Date;
                            image?: string | null | undefined;
                        } & ((O extends undefined ? {
                            socialProviders: {
                                github: {
                                    clientId: string;
                                    clientSecret: string;
                                };
                                google: {
                                    clientId: string;
                                    clientSecret: string;
                                };
                            };
                            secret: string;
                            database: ((options: BetterAuthOptions) => Adapter) | {
                                db: Kysely<unknown>;
                                type: "postgres";
                            } | {
                                db: Kysely<unknown>;
                                type: "mysql";
                            } | undefined;
                            emailAndPassword: {
                                enabled: true;
                            };
                            rateLimit: {
                                enabled: false;
                            };
                            advanced: {
                                cookies: {};
                            };
                        } : O & {
                            socialProviders: {
                                github: {
                                    clientId: string;
                                    clientSecret: string;
                                };
                                google: {
                                    clientId: string;
                                    clientSecret: string;
                                };
                            };
                            secret: string;
                            database: ((options: BetterAuthOptions) => Adapter) | {
                                db: Kysely<unknown>;
                                type: "postgres";
                            } | {
                                db: Kysely<unknown>;
                                type: "mysql";
                            } | undefined;
                            emailAndPassword: {
                                enabled: true;
                            };
                            rateLimit: {
                                enabled: false;
                            };
                            advanced: {
                                cookies: {};
                            };
                        }) extends infer T_1 ? T_1 extends (O extends undefined ? {
                            socialProviders: {
                                github: {
                                    clientId: string;
                                    clientSecret: string;
                                };
                                google: {
                                    clientId: string;
                                    clientSecret: string;
                                };
                            };
                            secret: string;
                            database: ((options: BetterAuthOptions) => Adapter) | {
                                db: Kysely<unknown>;
                                type: "postgres";
                            } | {
                                db: Kysely<unknown>;
                                type: "mysql";
                            } | undefined;
                            emailAndPassword: {
                                enabled: true;
                            };
                            rateLimit: {
                                enabled: false;
                            };
                            advanced: {
                                cookies: {};
                            };
                        } : O & {
                            socialProviders: {
                                github: {
                                    clientId: string;
                                    clientSecret: string;
                                };
                                google: {
                                    clientId: string;
                                    clientSecret: string;
                                };
                            };
                            secret: string;
                            database: ((options: BetterAuthOptions) => Adapter) | {
                                db: Kysely<unknown>;
                                type: "postgres";
                            } | {
                                db: Kysely<unknown>;
                                type: "mysql";
                            } | undefined;
                            emailAndPassword: {
                                enabled: true;
                            };
                            rateLimit: {
                                enabled: false;
                            };
                            advanced: {
                                cookies: {};
                            };
                        }) ? T_1 extends BetterAuthOptions ? AdditionalUserFieldsOutput<T_1> : T_1 extends Auth ? AdditionalUserFieldsOutput<T_1["options"]> : {} : never : never)>>;
                    } | null;
                } : {
                    session: UnionToIntersection<StripEmptyObjects<{
                        id: string;
                        userId: string;
                        expiresAt: Date;
                        createdAt: Date;
                        updatedAt: Date;
                        token: string;
                        ipAddress?: string | null | undefined;
                        userAgent?: string | null | undefined;
                    } & ((O extends undefined ? {
                        socialProviders: {
                            github: {
                                clientId: string;
                                clientSecret: string;
                            };
                            google: {
                                clientId: string;
                                clientSecret: string;
                            };
                        };
                        secret: string;
                        database: ((options: BetterAuthOptions) => Adapter) | {
                            db: Kysely<unknown>;
                            type: "postgres";
                        } | {
                            db: Kysely<unknown>;
                            type: "mysql";
                        } | undefined;
                        emailAndPassword: {
                            enabled: true;
                        };
                        rateLimit: {
                            enabled: false;
                        };
                        advanced: {
                            cookies: {};
                        };
                    } : O & {
                        socialProviders: {
                            github: {
                                clientId: string;
                                clientSecret: string;
                            };
                            google: {
                                clientId: string;
                                clientSecret: string;
                            };
                        };
                        secret: string;
                        database: ((options: BetterAuthOptions) => Adapter) | {
                            db: Kysely<unknown>;
                            type: "postgres";
                        } | {
                            db: Kysely<unknown>;
                            type: "mysql";
                        } | undefined;
                        emailAndPassword: {
                            enabled: true;
                        };
                        rateLimit: {
                            enabled: false;
                        };
                        advanced: {
                            cookies: {};
                        };
                    }) extends infer T_2 ? T_2 extends (O extends undefined ? {
                        socialProviders: {
                            github: {
                                clientId: string;
                                clientSecret: string;
                            };
                            google: {
                                clientId: string;
                                clientSecret: string;
                            };
                        };
                        secret: string;
                        database: ((options: BetterAuthOptions) => Adapter) | {
                            db: Kysely<unknown>;
                            type: "postgres";
                        } | {
                            db: Kysely<unknown>;
                            type: "mysql";
                        } | undefined;
                        emailAndPassword: {
                            enabled: true;
                        };
                        rateLimit: {
                            enabled: false;
                        };
                        advanced: {
                            cookies: {};
                        };
                    } : O & {
                        socialProviders: {
                            github: {
                                clientId: string;
                                clientSecret: string;
                            };
                            google: {
                                clientId: string;
                                clientSecret: string;
                            };
                        };
                        secret: string;
                        database: ((options: BetterAuthOptions) => Adapter) | {
                            db: Kysely<unknown>;
                            type: "postgres";
                        } | {
                            db: Kysely<unknown>;
                            type: "mysql";
                        } | undefined;
                        emailAndPassword: {
                            enabled: true;
                        };
                        rateLimit: {
                            enabled: false;
                        };
                        advanced: {
                            cookies: {};
                        };
                    }) ? T_2 extends BetterAuthOptions ? AdditionalSessionFieldsOutput<T_2> : T_2 extends Auth ? AdditionalSessionFieldsOutput<T_2["options"]> : {} : never : never)>>;
                    user: UnionToIntersection<StripEmptyObjects<{
                        id: string;
                        email: string;
                        emailVerified: boolean;
                        name: string;
                        createdAt: Date;
                        updatedAt: Date;
                        image?: string | null | undefined;
                    } & ((O extends undefined ? {
                        socialProviders: {
                            github: {
                                clientId: string;
                                clientSecret: string;
                            };
                            google: {
                                clientId: string;
                                clientSecret: string;
                            };
                        };
                        secret: string;
                        database: ((options: BetterAuthOptions) => Adapter) | {
                            db: Kysely<unknown>;
                            type: "postgres";
                        } | {
                            db: Kysely<unknown>;
                            type: "mysql";
                        } | undefined;
                        emailAndPassword: {
                            enabled: true;
                        };
                        rateLimit: {
                            enabled: false;
                        };
                        advanced: {
                            cookies: {};
                        };
                    } : O & {
                        socialProviders: {
                            github: {
                                clientId: string;
                                clientSecret: string;
                            };
                            google: {
                                clientId: string;
                                clientSecret: string;
                            };
                        };
                        secret: string;
                        database: ((options: BetterAuthOptions) => Adapter) | {
                            db: Kysely<unknown>;
                            type: "postgres";
                        } | {
                            db: Kysely<unknown>;
                            type: "mysql";
                        } | undefined;
                        emailAndPassword: {
                            enabled: true;
                        };
                        rateLimit: {
                            enabled: false;
                        };
                        advanced: {
                            cookies: {};
                        };
                    }) extends infer T_3 ? T_3 extends (O extends undefined ? {
                        socialProviders: {
                            github: {
                                clientId: string;
                                clientSecret: string;
                            };
                            google: {
                                clientId: string;
                                clientSecret: string;
                            };
                        };
                        secret: string;
                        database: ((options: BetterAuthOptions) => Adapter) | {
                            db: Kysely<unknown>;
                            type: "postgres";
                        } | {
                            db: Kysely<unknown>;
                            type: "mysql";
                        } | undefined;
                        emailAndPassword: {
                            enabled: true;
                        };
                        rateLimit: {
                            enabled: false;
                        };
                        advanced: {
                            cookies: {};
                        };
                    } : O & {
                        socialProviders: {
                            github: {
                                clientId: string;
                                clientSecret: string;
                            };
                            google: {
                                clientId: string;
                                clientSecret: string;
                            };
                        };
                        secret: string;
                        database: ((options: BetterAuthOptions) => Adapter) | {
                            db: Kysely<unknown>;
                            type: "postgres";
                        } | {
                            db: Kysely<unknown>;
                            type: "mysql";
                        } | undefined;
                        emailAndPassword: {
                            enabled: true;
                        };
                        rateLimit: {
                            enabled: false;
                        };
                        advanced: {
                            cookies: {};
                        };
                    }) ? T_3 extends BetterAuthOptions ? AdditionalUserFieldsOutput<T_3> : T_3 extends Auth ? AdditionalUserFieldsOutput<T_3["options"]> : {} : never : never)>>;
                } | null>;
                options: {
                    method: "GET";
                    query: zod.ZodOptional<zod.ZodObject<{
                        disableCookieCache: zod.ZodOptional<zod.ZodCoercedBoolean<unknown>>;
                        disableRefresh: zod.ZodOptional<zod.ZodCoercedBoolean<unknown>>;
                    }, zod_v4_core.$strip>>;
                    requireHeaders: true;
                    metadata: {
                        openapi: {
                            description: string;
                            responses: {
                                "200": {
                                    description: string;
                                    content: {
                                        "application/json": {
                                            schema: {
                                                type: "object";
                                                properties: {
                                                    session: {
                                                        $ref: string;
                                                    };
                                                    user: {
                                                        $ref: string;
                                                    };
                                                };
                                                required: string[];
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                } & {
                    use: any[];
                };
                path: "/get-session";
            };
            signOut: {
                <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                    body?: undefined;
                } & {
                    method?: "POST" | undefined;
                } & {
                    query?: Record<string, any> | undefined;
                } & {
                    params?: Record<string, any>;
                } & {
                    request?: Request;
                } & {
                    headers: HeadersInit;
                } & {
                    asResponse?: boolean;
                    returnHeaders?: boolean;
                    use?: better_call.Middleware[];
                    path?: string;
                } & {
                    asResponse?: AsResponse | undefined;
                    returnHeaders?: ReturnHeaders | undefined;
                }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                    headers: Headers;
                    response: {
                        success: boolean;
                    };
                } : {
                    success: boolean;
                }>;
                options: {
                    method: "POST";
                    requireHeaders: true;
                    metadata: {
                        openapi: {
                            description: string;
                            responses: {
                                "200": {
                                    description: string;
                                    content: {
                                        "application/json": {
                                            schema: {
                                                type: "object";
                                                properties: {
                                                    success: {
                                                        type: string;
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                } & {
                    use: any[];
                };
                path: "/sign-out";
            };
            signUpEmail: {
                <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(...inputCtx: better_call.HasRequiredKeys<better_call.InputContext<"/sign-up/email", {
                    method: "POST";
                    body: zod.ZodRecord<zod.ZodString, zod.ZodAny>;
                    metadata: {
                        $Infer: {
                            body: {
                                name: string;
                                email: string;
                                password: string;
                                image?: string;
                                callbackURL?: string;
                                rememberMe?: boolean;
                            } & InferFieldsFromPlugins<O extends undefined ? {
                                socialProviders: {
                                    github: {
                                        clientId: string;
                                        clientSecret: string;
                                    };
                                    google: {
                                        clientId: string;
                                        clientSecret: string;
                                    };
                                };
                                secret: string;
                                database: ((options: BetterAuthOptions) => Adapter) | {
                                    db: Kysely<unknown>;
                                    type: "postgres";
                                } | {
                                    db: Kysely<unknown>;
                                    type: "mysql";
                                } | undefined;
                                emailAndPassword: {
                                    enabled: true;
                                };
                                rateLimit: {
                                    enabled: false;
                                };
                                advanced: {
                                    cookies: {};
                                };
                            } : O & {
                                socialProviders: {
                                    github: {
                                        clientId: string;
                                        clientSecret: string;
                                    };
                                    google: {
                                        clientId: string;
                                        clientSecret: string;
                                    };
                                };
                                secret: string;
                                database: ((options: BetterAuthOptions) => Adapter) | {
                                    db: Kysely<unknown>;
                                    type: "postgres";
                                } | {
                                    db: Kysely<unknown>;
                                    type: "mysql";
                                } | undefined;
                                emailAndPassword: {
                                    enabled: true;
                                };
                                rateLimit: {
                                    enabled: false;
                                };
                                advanced: {
                                    cookies: {};
                                };
                            }, "user", "input"> & InferFieldsFromOptions<O extends undefined ? {
                                socialProviders: {
                                    github: {
                                        clientId: string;
                                        clientSecret: string;
                                    };
                                    google: {
                                        clientId: string;
                                        clientSecret: string;
                                    };
                                };
                                secret: string;
                                database: ((options: BetterAuthOptions) => Adapter) | {
                                    db: Kysely<unknown>;
                                    type: "postgres";
                                } | {
                                    db: Kysely<unknown>;
                                    type: "mysql";
                                } | undefined;
                                emailAndPassword: {
                                    enabled: true;
                                };
                                rateLimit: {
                                    enabled: false;
                                };
                                advanced: {
                                    cookies: {};
                                };
                            } : O & {
                                socialProviders: {
                                    github: {
                                        clientId: string;
                                        clientSecret: string;
                                    };
                                    google: {
                                        clientId: string;
                                        clientSecret: string;
                                    };
                                };
                                secret: string;
                                database: ((options: BetterAuthOptions) => Adapter) | {
                                    db: Kysely<unknown>;
                                    type: "postgres";
                                } | {
                                    db: Kysely<unknown>;
                                    type: "mysql";
                                } | undefined;
                                emailAndPassword: {
                                    enabled: true;
                                };
                                rateLimit: {
                                    enabled: false;
                                };
                                advanced: {
                                    cookies: {};
                                };
                            }, "user", "input">;
                        };
                        openapi: {
                            description: string;
                            requestBody: {
                                content: {
                                    "application/json": {
                                        schema: {
                                            type: "object";
                                            properties: {
                                                name: {
                                                    type: string;
                                                    description: string;
                                                };
                                                email: {
                                                    type: string;
                                                    description: string;
                                                };
                                                password: {
                                                    type: string;
                                                    description: string;
                                                };
                                                image: {
                                                    type: string;
                                                    description: string;
                                                };
                                                callbackURL: {
                                                    type: string;
                                                    description: string;
                                                };
                                                rememberMe: {
                                                    type: string;
                                                    description: string;
                                                };
                                            };
                                            required: string[];
                                        };
                                    };
                                };
                            };
                            responses: {
                                "200": {
                                    description: string;
                                    content: {
                                        "application/json": {
                                            schema: {
                                                type: "object";
                                                properties: {
                                                    token: {
                                                        type: string;
                                                        nullable: boolean;
                                                        description: string;
                                                    };
                                                    user: {
                                                        type: string;
                                                        properties: {
                                                            id: {
                                                                type: string;
                                                                description: string;
                                                            };
                                                            email: {
                                                                type: string;
                                                                format: string;
                                                                description: string;
                                                            };
                                                            name: {
                                                                type: string;
                                                                description: string;
                                                            };
                                                            image: {
                                                                type: string;
                                                                format: string;
                                                                nullable: boolean;
                                                                description: string;
                                                            };
                                                            emailVerified: {
                                                                type: string;
                                                                description: string;
                                                            };
                                                            createdAt: {
                                                                type: string;
                                                                format: string;
                                                                description: string;
                                                            };
                                                            updatedAt: {
                                                                type: string;
                                                                format: string;
                                                                description: string;
                                                            };
                                                        };
                                                        required: string[];
                                                    };
                                                };
                                                required: string[];
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                } & {
                    use: any[];
                }>> extends true ? [better_call.InferBodyInput<{
                    method: "POST";
                    body: zod.ZodRecord<zod.ZodString, zod.ZodAny>;
                    metadata: {
                        $Infer: {
                            body: {
                                name: string;
                                email: string;
                                password: string;
                                image?: string;
                                callbackURL?: string;
                                rememberMe?: boolean;
                            } & InferFieldsFromPlugins<O extends undefined ? {
                                socialProviders: {
                                    github: {
                                        clientId: string;
                                        clientSecret: string;
                                    };
                                    google: {
                                        clientId: string;
                                        clientSecret: string;
                                    };
                                };
                                secret: string;
                                database: ((options: BetterAuthOptions) => Adapter) | {
                                    db: Kysely<unknown>;
                                    type: "postgres";
                                } | {
                                    db: Kysely<unknown>;
                                    type: "mysql";
                                } | undefined;
                                emailAndPassword: {
                                    enabled: true;
                                };
                                rateLimit: {
                                    enabled: false;
                                };
                                advanced: {
                                    cookies: {};
                                };
                            } : O & {
                                socialProviders: {
                                    github: {
                                        clientId: string;
                                        clientSecret: string;
                                    };
                                    google: {
                                        clientId: string;
                                        clientSecret: string;
                                    };
                                };
                                secret: string;
                                database: ((options: BetterAuthOptions) => Adapter) | {
                                    db: Kysely<unknown>;
                                    type: "postgres";
                                } | {
                                    db: Kysely<unknown>;
                                    type: "mysql";
                                } | undefined;
                                emailAndPassword: {
                                    enabled: true;
                                };
                                rateLimit: {
                                    enabled: false;
                                };
                                advanced: {
                                    cookies: {};
                                };
                            }, "user", "input"> & InferFieldsFromOptions<O extends undefined ? {
                                socialProviders: {
                                    github: {
                                        clientId: string;
                                        clientSecret: string;
                                    };
                                    google: {
                                        clientId: string;
                                        clientSecret: string;
                                    };
                                };
                                secret: string;
                                database: ((options: BetterAuthOptions) => Adapter) | {
                                    db: Kysely<unknown>;
                                    type: "postgres";
                                } | {
                                    db: Kysely<unknown>;
                                    type: "mysql";
                                } | undefined;
                                emailAndPassword: {
                                    enabled: true;
                                };
                                rateLimit: {
                                    enabled: false;
                                };
                                advanced: {
                                    cookies: {};
                                };
                            } : O & {
                                socialProviders: {
                                    github: {
                                        clientId: string;
                                        clientSecret: string;
                                    };
                                    google: {
                                        clientId: string;
                                        clientSecret: string;
                                    };
                                };
                                secret: string;
                                database: ((options: BetterAuthOptions) => Adapter) | {
                                    db: Kysely<unknown>;
                                    type: "postgres";
                                } | {
                                    db: Kysely<unknown>;
                                    type: "mysql";
                                } | undefined;
                                emailAndPassword: {
                                    enabled: true;
                                };
                                rateLimit: {
                                    enabled: false;
                                };
                                advanced: {
                                    cookies: {};
                                };
                            }, "user", "input">;
                        };
                        openapi: {
                            description: string;
                            requestBody: {
                                content: {
                                    "application/json": {
                                        schema: {
                                            type: "object";
                                            properties: {
                                                name: {
                                                    type: string;
                                                    description: string;
                                                };
                                                email: {
                                                    type: string;
                                                    description: string;
                                                };
                                                password: {
                                                    type: string;
                                                    description: string;
                                                };
                                                image: {
                                                    type: string;
                                                    description: string;
                                                };
                                                callbackURL: {
                                                    type: string;
                                                    description: string;
                                                };
                                                rememberMe: {
                                                    type: string;
                                                    description: string;
                                                };
                                            };
                                            required: string[];
                                        };
                                    };
                                };
                            };
                            responses: {
                                "200": {
                                    description: string;
                                    content: {
                                        "application/json": {
                                            schema: {
                                                type: "object";
                                                properties: {
                                                    token: {
                                                        type: string;
                                                        nullable: boolean;
                                                        description: string;
                                                    };
                                                    user: {
                                                        type: string;
                                                        properties: {
                                                            id: {
                                                                type: string;
                                                                description: string;
                                                            };
                                                            email: {
                                                                type: string;
                                                                format: string;
                                                                description: string;
                                                            };
                                                            name: {
                                                                type: string;
                                                                description: string;
                                                            };
                                                            image: {
                                                                type: string;
                                                                format: string;
                                                                nullable: boolean;
                                                                description: string;
                                                            };
                                                            emailVerified: {
                                                                type: string;
                                                                description: string;
                                                            };
                                                            createdAt: {
                                                                type: string;
                                                                format: string;
                                                                description: string;
                                                            };
                                                            updatedAt: {
                                                                type: string;
                                                                format: string;
                                                                description: string;
                                                            };
                                                        };
                                                        required: string[];
                                                    };
                                                };
                                                required: string[];
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                } & {
                    use: any[];
                }, {
                    name: string;
                    email: string;
                    password: string;
                    image?: string;
                    callbackURL?: string;
                    rememberMe?: boolean;
                } & InferFieldsFromPlugins<O extends undefined ? {
                    socialProviders: {
                        github: {
                            clientId: string;
                            clientSecret: string;
                        };
                        google: {
                            clientId: string;
                            clientSecret: string;
                        };
                    };
                    secret: string;
                    database: ((options: BetterAuthOptions) => Adapter) | {
                        db: Kysely<unknown>;
                        type: "postgres";
                    } | {
                        db: Kysely<unknown>;
                        type: "mysql";
                    } | undefined;
                    emailAndPassword: {
                        enabled: true;
                    };
                    rateLimit: {
                        enabled: false;
                    };
                    advanced: {
                        cookies: {};
                    };
                } : O & {
                    socialProviders: {
                        github: {
                            clientId: string;
                            clientSecret: string;
                        };
                        google: {
                            clientId: string;
                            clientSecret: string;
                        };
                    };
                    secret: string;
                    database: ((options: BetterAuthOptions) => Adapter) | {
                        db: Kysely<unknown>;
                        type: "postgres";
                    } | {
                        db: Kysely<unknown>;
                        type: "mysql";
                    } | undefined;
                    emailAndPassword: {
                        enabled: true;
                    };
                    rateLimit: {
                        enabled: false;
                    };
                    advanced: {
                        cookies: {};
                    };
                }, "user", "input"> & InferFieldsFromOptions<O extends undefined ? {
                    socialProviders: {
                        github: {
                            clientId: string;
                            clientSecret: string;
                        };
                        google: {
                            clientId: string;
                            clientSecret: string;
                        };
                    };
                    secret: string;
                    database: ((options: BetterAuthOptions) => Adapter) | {
                        db: Kysely<unknown>;
                        type: "postgres";
                    } | {
                        db: Kysely<unknown>;
                        type: "mysql";
                    } | undefined;
                    emailAndPassword: {
                        enabled: true;
                    };
                    rateLimit: {
                        enabled: false;
                    };
                    advanced: {
                        cookies: {};
                    };
                } : O & {
                    socialProviders: {
                        github: {
                            clientId: string;
                            clientSecret: string;
                        };
                        google: {
                            clientId: string;
                            clientSecret: string;
                        };
                    };
                    secret: string;
                    database: ((options: BetterAuthOptions) => Adapter) | {
                        db: Kysely<unknown>;
                        type: "postgres";
                    } | {
                        db: Kysely<unknown>;
                        type: "mysql";
                    } | undefined;
                    emailAndPassword: {
                        enabled: true;
                    };
                    rateLimit: {
                        enabled: false;
                    };
                    advanced: {
                        cookies: {};
                    };
                }, "user", "input">> & {
                    method?: "POST" | undefined;
                } & {
                    query?: Record<string, any> | undefined;
                } & {
                    params?: Record<string, any>;
                } & {
                    request?: Request;
                } & {
                    headers?: HeadersInit;
                } & {
                    asResponse?: boolean;
                    returnHeaders?: boolean;
                    use?: better_call.Middleware[];
                    path?: string;
                } & {
                    asResponse?: AsResponse | undefined;
                    returnHeaders?: ReturnHeaders | undefined;
                }] : [((better_call.InferBodyInput<{
                    method: "POST";
                    body: zod.ZodRecord<zod.ZodString, zod.ZodAny>;
                    metadata: {
                        $Infer: {
                            body: {
                                name: string;
                                email: string;
                                password: string;
                                image?: string;
                                callbackURL?: string;
                                rememberMe?: boolean;
                            } & InferFieldsFromPlugins<O extends undefined ? {
                                socialProviders: {
                                    github: {
                                        clientId: string;
                                        clientSecret: string;
                                    };
                                    google: {
                                        clientId: string;
                                        clientSecret: string;
                                    };
                                };
                                secret: string;
                                database: ((options: BetterAuthOptions) => Adapter) | {
                                    db: Kysely<unknown>;
                                    type: "postgres";
                                } | {
                                    db: Kysely<unknown>;
                                    type: "mysql";
                                } | undefined;
                                emailAndPassword: {
                                    enabled: true;
                                };
                                rateLimit: {
                                    enabled: false;
                                };
                                advanced: {
                                    cookies: {};
                                };
                            } : O & {
                                socialProviders: {
                                    github: {
                                        clientId: string;
                                        clientSecret: string;
                                    };
                                    google: {
                                        clientId: string;
                                        clientSecret: string;
                                    };
                                };
                                secret: string;
                                database: ((options: BetterAuthOptions) => Adapter) | {
                                    db: Kysely<unknown>;
                                    type: "postgres";
                                } | {
                                    db: Kysely<unknown>;
                                    type: "mysql";
                                } | undefined;
                                emailAndPassword: {
                                    enabled: true;
                                };
                                rateLimit: {
                                    enabled: false;
                                };
                                advanced: {
                                    cookies: {};
                                };
                            }, "user", "input"> & InferFieldsFromOptions<O extends undefined ? {
                                socialProviders: {
                                    github: {
                                        clientId: string;
                                        clientSecret: string;
                                    };
                                    google: {
                                        clientId: string;
                                        clientSecret: string;
                                    };
                                };
                                secret: string;
                                database: ((options: BetterAuthOptions) => Adapter) | {
                                    db: Kysely<unknown>;
                                    type: "postgres";
                                } | {
                                    db: Kysely<unknown>;
                                    type: "mysql";
                                } | undefined;
                                emailAndPassword: {
                                    enabled: true;
                                };
                                rateLimit: {
                                    enabled: false;
                                };
                                advanced: {
                                    cookies: {};
                                };
                            } : O & {
                                socialProviders: {
                                    github: {
                                        clientId: string;
                                        clientSecret: string;
                                    };
                                    google: {
                                        clientId: string;
                                        clientSecret: string;
                                    };
                                };
                                secret: string;
                                database: ((options: BetterAuthOptions) => Adapter) | {
                                    db: Kysely<unknown>;
                                    type: "postgres";
                                } | {
                                    db: Kysely<unknown>;
                                    type: "mysql";
                                } | undefined;
                                emailAndPassword: {
                                    enabled: true;
                                };
                                rateLimit: {
                                    enabled: false;
                                };
                                advanced: {
                                    cookies: {};
                                };
                            }, "user", "input">;
                        };
                        openapi: {
                            description: string;
                            requestBody: {
                                content: {
                                    "application/json": {
                                        schema: {
                                            type: "object";
                                            properties: {
                                                name: {
                                                    type: string;
                                                    description: string;
                                                };
                                                email: {
                                                    type: string;
                                                    description: string;
                                                };
                                                password: {
                                                    type: string;
                                                    description: string;
                                                };
                                                image: {
                                                    type: string;
                                                    description: string;
                                                };
                                                callbackURL: {
                                                    type: string;
                                                    description: string;
                                                };
                                                rememberMe: {
                                                    type: string;
                                                    description: string;
                                                };
                                            };
                                            required: string[];
                                        };
                                    };
                                };
                            };
                            responses: {
                                "200": {
                                    description: string;
                                    content: {
                                        "application/json": {
                                            schema: {
                                                type: "object";
                                                properties: {
                                                    token: {
                                                        type: string;
                                                        nullable: boolean;
                                                        description: string;
                                                    };
                                                    user: {
                                                        type: string;
                                                        properties: {
                                                            id: {
                                                                type: string;
                                                                description: string;
                                                            };
                                                            email: {
                                                                type: string;
                                                                format: string;
                                                                description: string;
                                                            };
                                                            name: {
                                                                type: string;
                                                                description: string;
                                                            };
                                                            image: {
                                                                type: string;
                                                                format: string;
                                                                nullable: boolean;
                                                                description: string;
                                                            };
                                                            emailVerified: {
                                                                type: string;
                                                                description: string;
                                                            };
                                                            createdAt: {
                                                                type: string;
                                                                format: string;
                                                                description: string;
                                                            };
                                                            updatedAt: {
                                                                type: string;
                                                                format: string;
                                                                description: string;
                                                            };
                                                        };
                                                        required: string[];
                                                    };
                                                };
                                                required: string[];
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                } & {
                    use: any[];
                }, {
                    name: string;
                    email: string;
                    password: string;
                    image?: string;
                    callbackURL?: string;
                    rememberMe?: boolean;
                } & InferFieldsFromPlugins<O extends undefined ? {
                    socialProviders: {
                        github: {
                            clientId: string;
                            clientSecret: string;
                        };
                        google: {
                            clientId: string;
                            clientSecret: string;
                        };
                    };
                    secret: string;
                    database: ((options: BetterAuthOptions) => Adapter) | {
                        db: Kysely<unknown>;
                        type: "postgres";
                    } | {
                        db: Kysely<unknown>;
                        type: "mysql";
                    } | undefined;
                    emailAndPassword: {
                        enabled: true;
                    };
                    rateLimit: {
                        enabled: false;
                    };
                    advanced: {
                        cookies: {};
                    };
                } : O & {
                    socialProviders: {
                        github: {
                            clientId: string;
                            clientSecret: string;
                        };
                        google: {
                            clientId: string;
                            clientSecret: string;
                        };
                    };
                    secret: string;
                    database: ((options: BetterAuthOptions) => Adapter) | {
                        db: Kysely<unknown>;
                        type: "postgres";
                    } | {
                        db: Kysely<unknown>;
                        type: "mysql";
                    } | undefined;
                    emailAndPassword: {
                        enabled: true;
                    };
                    rateLimit: {
                        enabled: false;
                    };
                    advanced: {
                        cookies: {};
                    };
                }, "user", "input"> & InferFieldsFromOptions<O extends undefined ? {
                    socialProviders: {
                        github: {
                            clientId: string;
                            clientSecret: string;
                        };
                        google: {
                            clientId: string;
                            clientSecret: string;
                        };
                    };
                    secret: string;
                    database: ((options: BetterAuthOptions) => Adapter) | {
                        db: Kysely<unknown>;
                        type: "postgres";
                    } | {
                        db: Kysely<unknown>;
                        type: "mysql";
                    } | undefined;
                    emailAndPassword: {
                        enabled: true;
                    };
                    rateLimit: {
                        enabled: false;
                    };
                    advanced: {
                        cookies: {};
                    };
                } : O & {
                    socialProviders: {
                        github: {
                            clientId: string;
                            clientSecret: string;
                        };
                        google: {
                            clientId: string;
                            clientSecret: string;
                        };
                    };
                    secret: string;
                    database: ((options: BetterAuthOptions) => Adapter) | {
                        db: Kysely<unknown>;
                        type: "postgres";
                    } | {
                        db: Kysely<unknown>;
                        type: "mysql";
                    } | undefined;
                    emailAndPassword: {
                        enabled: true;
                    };
                    rateLimit: {
                        enabled: false;
                    };
                    advanced: {
                        cookies: {};
                    };
                }, "user", "input">> & {
                    method?: "POST" | undefined;
                } & {
                    query?: Record<string, any> | undefined;
                } & {
                    params?: Record<string, any>;
                } & {
                    request?: Request;
                } & {
                    headers?: HeadersInit;
                } & {
                    asResponse?: boolean;
                    returnHeaders?: boolean;
                    use?: better_call.Middleware[];
                    path?: string;
                } & {
                    asResponse?: AsResponse | undefined;
                    returnHeaders?: ReturnHeaders | undefined;
                }) | undefined)?]): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                    headers: Headers;
                    response: {
                        token: null;
                        user: {
                            id: string;
                            email: string;
                            name: string;
                            image: string | null | undefined;
                            emailVerified: boolean;
                            createdAt: Date;
                            updatedAt: Date;
                        };
                    } | {
                        token: string;
                        user: {
                            id: string;
                            email: string;
                            name: string;
                            image: string | null | undefined;
                            emailVerified: boolean;
                            createdAt: Date;
                            updatedAt: Date;
                        };
                    };
                } : {
                    token: null;
                    user: {
                        id: string;
                        email: string;
                        name: string;
                        image: string | null | undefined;
                        emailVerified: boolean;
                        createdAt: Date;
                        updatedAt: Date;
                    };
                } | {
                    token: string;
                    user: {
                        id: string;
                        email: string;
                        name: string;
                        image: string | null | undefined;
                        emailVerified: boolean;
                        createdAt: Date;
                        updatedAt: Date;
                    };
                }>;
                options: {
                    method: "POST";
                    body: zod.ZodRecord<zod.ZodString, zod.ZodAny>;
                    metadata: {
                        $Infer: {
                            body: {
                                name: string;
                                email: string;
                                password: string;
                                image?: string;
                                callbackURL?: string;
                                rememberMe?: boolean;
                            } & InferFieldsFromPlugins<O extends undefined ? {
                                socialProviders: {
                                    github: {
                                        clientId: string;
                                        clientSecret: string;
                                    };
                                    google: {
                                        clientId: string;
                                        clientSecret: string;
                                    };
                                };
                                secret: string;
                                database: ((options: BetterAuthOptions) => Adapter) | {
                                    db: Kysely<unknown>;
                                    type: "postgres";
                                } | {
                                    db: Kysely<unknown>;
                                    type: "mysql";
                                } | undefined;
                                emailAndPassword: {
                                    enabled: true;
                                };
                                rateLimit: {
                                    enabled: false;
                                };
                                advanced: {
                                    cookies: {};
                                };
                            } : O & {
                                socialProviders: {
                                    github: {
                                        clientId: string;
                                        clientSecret: string;
                                    };
                                    google: {
                                        clientId: string;
                                        clientSecret: string;
                                    };
                                };
                                secret: string;
                                database: ((options: BetterAuthOptions) => Adapter) | {
                                    db: Kysely<unknown>;
                                    type: "postgres";
                                } | {
                                    db: Kysely<unknown>;
                                    type: "mysql";
                                } | undefined;
                                emailAndPassword: {
                                    enabled: true;
                                };
                                rateLimit: {
                                    enabled: false;
                                };
                                advanced: {
                                    cookies: {};
                                };
                            }, "user", "input"> & InferFieldsFromOptions<O extends undefined ? {
                                socialProviders: {
                                    github: {
                                        clientId: string;
                                        clientSecret: string;
                                    };
                                    google: {
                                        clientId: string;
                                        clientSecret: string;
                                    };
                                };
                                secret: string;
                                database: ((options: BetterAuthOptions) => Adapter) | {
                                    db: Kysely<unknown>;
                                    type: "postgres";
                                } | {
                                    db: Kysely<unknown>;
                                    type: "mysql";
                                } | undefined;
                                emailAndPassword: {
                                    enabled: true;
                                };
                                rateLimit: {
                                    enabled: false;
                                };
                                advanced: {
                                    cookies: {};
                                };
                            } : O & {
                                socialProviders: {
                                    github: {
                                        clientId: string;
                                        clientSecret: string;
                                    };
                                    google: {
                                        clientId: string;
                                        clientSecret: string;
                                    };
                                };
                                secret: string;
                                database: ((options: BetterAuthOptions) => Adapter) | {
                                    db: Kysely<unknown>;
                                    type: "postgres";
                                } | {
                                    db: Kysely<unknown>;
                                    type: "mysql";
                                } | undefined;
                                emailAndPassword: {
                                    enabled: true;
                                };
                                rateLimit: {
                                    enabled: false;
                                };
                                advanced: {
                                    cookies: {};
                                };
                            }, "user", "input">;
                        };
                        openapi: {
                            description: string;
                            requestBody: {
                                content: {
                                    "application/json": {
                                        schema: {
                                            type: "object";
                                            properties: {
                                                name: {
                                                    type: string;
                                                    description: string;
                                                };
                                                email: {
                                                    type: string;
                                                    description: string;
                                                };
                                                password: {
                                                    type: string;
                                                    description: string;
                                                };
                                                image: {
                                                    type: string;
                                                    description: string;
                                                };
                                                callbackURL: {
                                                    type: string;
                                                    description: string;
                                                };
                                                rememberMe: {
                                                    type: string;
                                                    description: string;
                                                };
                                            };
                                            required: string[];
                                        };
                                    };
                                };
                            };
                            responses: {
                                "200": {
                                    description: string;
                                    content: {
                                        "application/json": {
                                            schema: {
                                                type: "object";
                                                properties: {
                                                    token: {
                                                        type: string;
                                                        nullable: boolean;
                                                        description: string;
                                                    };
                                                    user: {
                                                        type: string;
                                                        properties: {
                                                            id: {
                                                                type: string;
                                                                description: string;
                                                            };
                                                            email: {
                                                                type: string;
                                                                format: string;
                                                                description: string;
                                                            };
                                                            name: {
                                                                type: string;
                                                                description: string;
                                                            };
                                                            image: {
                                                                type: string;
                                                                format: string;
                                                                nullable: boolean;
                                                                description: string;
                                                            };
                                                            emailVerified: {
                                                                type: string;
                                                                description: string;
                                                            };
                                                            createdAt: {
                                                                type: string;
                                                                format: string;
                                                                description: string;
                                                            };
                                                            updatedAt: {
                                                                type: string;
                                                                format: string;
                                                                description: string;
                                                            };
                                                        };
                                                        required: string[];
                                                    };
                                                };
                                                required: string[];
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                } & {
                    use: any[];
                };
                path: "/sign-up/email";
            };
            signInEmail: {
                <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                    body: {
                        email: string;
                        password: string;
                        callbackURL?: string | undefined;
                        rememberMe?: boolean | undefined;
                    };
                } & {
                    method?: "POST" | undefined;
                } & {
                    query?: Record<string, any> | undefined;
                } & {
                    params?: Record<string, any>;
                } & {
                    request?: Request;
                } & {
                    headers?: HeadersInit;
                } & {
                    asResponse?: boolean;
                    returnHeaders?: boolean;
                    use?: better_call.Middleware[];
                    path?: string;
                } & {
                    asResponse?: AsResponse | undefined;
                    returnHeaders?: ReturnHeaders | undefined;
                }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                    headers: Headers;
                    response: {
                        redirect: boolean;
                        token: string;
                        url: string | undefined;
                        user: {
                            id: string;
                            email: string;
                            name: string;
                            image: string | null | undefined;
                            emailVerified: boolean;
                            createdAt: Date;
                            updatedAt: Date;
                        };
                    };
                } : {
                    redirect: boolean;
                    token: string;
                    url: string | undefined;
                    user: {
                        id: string;
                        email: string;
                        name: string;
                        image: string | null | undefined;
                        emailVerified: boolean;
                        createdAt: Date;
                        updatedAt: Date;
                    };
                }>;
                options: {
                    method: "POST";
                    body: zod.ZodObject<{
                        email: zod.ZodString;
                        password: zod.ZodString;
                        callbackURL: zod.ZodOptional<zod.ZodString>;
                        rememberMe: zod.ZodOptional<zod.ZodDefault<zod.ZodBoolean>>;
                    }, zod_v4_core.$strip>;
                    metadata: {
                        openapi: {
                            description: string;
                            responses: {
                                "200": {
                                    description: string;
                                    content: {
                                        "application/json": {
                                            schema: {
                                                type: "object";
                                                description: string;
                                                properties: {
                                                    redirect: {
                                                        type: string;
                                                        enum: boolean[];
                                                    };
                                                    token: {
                                                        type: string;
                                                        description: string;
                                                    };
                                                    url: {
                                                        type: string;
                                                        nullable: boolean;
                                                    };
                                                    user: {
                                                        type: string;
                                                        properties: {
                                                            id: {
                                                                type: string;
                                                            };
                                                            email: {
                                                                type: string;
                                                            };
                                                            name: {
                                                                type: string;
                                                                nullable: boolean;
                                                            };
                                                            image: {
                                                                type: string;
                                                                nullable: boolean;
                                                            };
                                                            emailVerified: {
                                                                type: string;
                                                            };
                                                            createdAt: {
                                                                type: string;
                                                                format: string;
                                                            };
                                                            updatedAt: {
                                                                type: string;
                                                                format: string;
                                                            };
                                                        };
                                                        required: string[];
                                                    };
                                                };
                                                required: string[];
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                } & {
                    use: any[];
                };
                path: "/sign-in/email";
            };
            forgetPassword: {
                <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                    body: {
                        email: string;
                        redirectTo?: string | undefined;
                    };
                } & {
                    method?: "POST" | undefined;
                } & {
                    query?: Record<string, any> | undefined;
                } & {
                    params?: Record<string, any>;
                } & {
                    request?: Request;
                } & {
                    headers?: HeadersInit;
                } & {
                    asResponse?: boolean;
                    returnHeaders?: boolean;
                    use?: better_call.Middleware[];
                    path?: string;
                } & {
                    asResponse?: AsResponse | undefined;
                    returnHeaders?: ReturnHeaders | undefined;
                }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                    headers: Headers;
                    response: {
                        status: boolean;
                    };
                } : {
                    status: boolean;
                }>;
                options: {
                    method: "POST";
                    body: zod.ZodObject<{
                        email: zod.ZodString;
                        redirectTo: zod.ZodOptional<zod.ZodString>;
                    }, zod_v4_core.$strip>;
                    metadata: {
                        openapi: {
                            description: string;
                            responses: {
                                "200": {
                                    description: string;
                                    content: {
                                        "application/json": {
                                            schema: {
                                                type: "object";
                                                properties: {
                                                    status: {
                                                        type: string;
                                                    };
                                                    message: {
                                                        type: string;
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                } & {
                    use: any[];
                };
                path: "/forget-password";
            };
            resetPassword: {
                <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                    body: {
                        newPassword: string;
                        token?: string | undefined;
                    };
                } & {
                    method?: "POST" | undefined;
                } & {
                    query?: {
                        token?: string | undefined;
                    } | undefined;
                } & {
                    params?: Record<string, any>;
                } & {
                    request?: Request;
                } & {
                    headers?: HeadersInit;
                } & {
                    asResponse?: boolean;
                    returnHeaders?: boolean;
                    use?: better_call.Middleware[];
                    path?: string;
                } & {
                    asResponse?: AsResponse | undefined;
                    returnHeaders?: ReturnHeaders | undefined;
                }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                    headers: Headers;
                    response: {
                        status: boolean;
                    };
                } : {
                    status: boolean;
                }>;
                options: {
                    method: "POST";
                    query: zod.ZodOptional<zod.ZodObject<{
                        token: zod.ZodOptional<zod.ZodString>;
                    }, zod_v4_core.$strip>>;
                    body: zod.ZodObject<{
                        newPassword: zod.ZodString;
                        token: zod.ZodOptional<zod.ZodString>;
                    }, zod_v4_core.$strip>;
                    metadata: {
                        openapi: {
                            description: string;
                            responses: {
                                "200": {
                                    description: string;
                                    content: {
                                        "application/json": {
                                            schema: {
                                                type: "object";
                                                properties: {
                                                    status: {
                                                        type: string;
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                } & {
                    use: any[];
                };
                path: "/reset-password";
            };
            verifyEmail: {
                <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                    body?: undefined;
                } & {
                    method?: "GET" | undefined;
                } & {
                    query: {
                        token: string;
                        callbackURL?: string | undefined;
                    };
                } & {
                    params?: Record<string, any>;
                } & {
                    request?: Request;
                } & {
                    headers?: HeadersInit;
                } & {
                    asResponse?: boolean;
                    returnHeaders?: boolean;
                    use?: better_call.Middleware[];
                    path?: string;
                } & {
                    asResponse?: AsResponse | undefined;
                    returnHeaders?: ReturnHeaders | undefined;
                }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                    headers: Headers;
                    response: void | {
                        status: boolean;
                        user: {
                            id: any;
                            email: any;
                            name: any;
                            image: any;
                            emailVerified: any;
                            createdAt: any;
                            updatedAt: any;
                        };
                    } | {
                        status: boolean;
                        user: null;
                    };
                } : void | {
                    status: boolean;
                    user: {
                        id: any;
                        email: any;
                        name: any;
                        image: any;
                        emailVerified: any;
                        createdAt: any;
                        updatedAt: any;
                    };
                } | {
                    status: boolean;
                    user: null;
                }>;
                options: {
                    method: "GET";
                    query: zod.ZodObject<{
                        token: zod.ZodString;
                        callbackURL: zod.ZodOptional<zod.ZodString>;
                    }, zod_v4_core.$strip>;
                    use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<void>)[];
                    metadata: {
                        openapi: {
                            description: string;
                            parameters: ({
                                name: string;
                                in: "query";
                                description: string;
                                required: true;
                                schema: {
                                    type: "string";
                                };
                            } | {
                                name: string;
                                in: "query";
                                description: string;
                                required: false;
                                schema: {
                                    type: "string";
                                };
                            })[];
                            responses: {
                                "200": {
                                    description: string;
                                    content: {
                                        "application/json": {
                                            schema: {
                                                type: "object";
                                                properties: {
                                                    user: {
                                                        type: string;
                                                        properties: {
                                                            id: {
                                                                type: string;
                                                                description: string;
                                                            };
                                                            email: {
                                                                type: string;
                                                                description: string;
                                                            };
                                                            name: {
                                                                type: string;
                                                                description: string;
                                                            };
                                                            image: {
                                                                type: string;
                                                                description: string;
                                                            };
                                                            emailVerified: {
                                                                type: string;
                                                                description: string;
                                                            };
                                                            createdAt: {
                                                                type: string;
                                                                description: string;
                                                            };
                                                            updatedAt: {
                                                                type: string;
                                                                description: string;
                                                            };
                                                        };
                                                        required: string[];
                                                    };
                                                    status: {
                                                        type: string;
                                                        description: string;
                                                    };
                                                };
                                                required: string[];
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                } & {
                    use: any[];
                };
                path: "/verify-email";
            };
            sendVerificationEmail: {
                <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                    body: {
                        email: string;
                        callbackURL?: string | undefined;
                    };
                } & {
                    method?: "POST" | undefined;
                } & {
                    query?: Record<string, any> | undefined;
                } & {
                    params?: Record<string, any>;
                } & {
                    request?: Request;
                } & {
                    headers?: HeadersInit;
                } & {
                    asResponse?: boolean;
                    returnHeaders?: boolean;
                    use?: better_call.Middleware[];
                    path?: string;
                } & {
                    asResponse?: AsResponse | undefined;
                    returnHeaders?: ReturnHeaders | undefined;
                }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                    headers: Headers;
                    response: {
                        status: boolean;
                    };
                } : {
                    status: boolean;
                }>;
                options: {
                    method: "POST";
                    body: zod.ZodObject<{
                        email: zod.ZodEmail;
                        callbackURL: zod.ZodOptional<zod.ZodString>;
                    }, zod_v4_core.$strip>;
                    metadata: {
                        openapi: {
                            description: string;
                            requestBody: {
                                content: {
                                    "application/json": {
                                        schema: {
                                            type: "object";
                                            properties: {
                                                email: {
                                                    type: string;
                                                    description: string;
                                                    example: string;
                                                };
                                                callbackURL: {
                                                    type: string;
                                                    description: string;
                                                    example: string;
                                                    nullable: boolean;
                                                };
                                            };
                                            required: string[];
                                        };
                                    };
                                };
                            };
                            responses: {
                                "200": {
                                    description: string;
                                    content: {
                                        "application/json": {
                                            schema: {
                                                type: "object";
                                                properties: {
                                                    status: {
                                                        type: string;
                                                        description: string;
                                                        example: boolean;
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                                "400": {
                                    description: string;
                                    content: {
                                        "application/json": {
                                            schema: {
                                                type: "object";
                                                properties: {
                                                    message: {
                                                        type: string;
                                                        description: string;
                                                        example: string;
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                } & {
                    use: any[];
                };
                path: "/send-verification-email";
            };
            changeEmail: {
                <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                    body: {
                        newEmail: string;
                        callbackURL?: string | undefined;
                    };
                } & {
                    method?: "POST" | undefined;
                } & {
                    query?: Record<string, any> | undefined;
                } & {
                    params?: Record<string, any>;
                } & {
                    request?: Request;
                } & {
                    headers?: HeadersInit;
                } & {
                    asResponse?: boolean;
                    returnHeaders?: boolean;
                    use?: better_call.Middleware[];
                    path?: string;
                } & {
                    asResponse?: AsResponse | undefined;
                    returnHeaders?: ReturnHeaders | undefined;
                }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                    headers: Headers;
                    response: {
                        status: boolean;
                    };
                } : {
                    status: boolean;
                }>;
                options: {
                    method: "POST";
                    body: zod.ZodObject<{
                        newEmail: zod.ZodEmail;
                        callbackURL: zod.ZodOptional<zod.ZodString>;
                    }, zod_v4_core.$strip>;
                    use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<{
                        session: {
                            session: Record<string, any> & {
                                id: string;
                                userId: string;
                                expiresAt: Date;
                                createdAt: Date;
                                updatedAt: Date;
                                token: string;
                                ipAddress?: string | null | undefined;
                                userAgent?: string | null | undefined;
                            };
                            user: Record<string, any> & {
                                id: string;
                                email: string;
                                emailVerified: boolean;
                                name: string;
                                createdAt: Date;
                                updatedAt: Date;
                                image?: string | null | undefined;
                            };
                        };
                    }>)[];
                    metadata: {
                        openapi: {
                            responses: {
                                "200": {
                                    description: string;
                                    content: {
                                        "application/json": {
                                            schema: {
                                                type: "object";
                                                properties: {
                                                    status: {
                                                        type: string;
                                                        description: string;
                                                    };
                                                    message: {
                                                        type: string;
                                                        enum: string[];
                                                        description: string;
                                                        nullable: boolean;
                                                    };
                                                };
                                                required: string[];
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                } & {
                    use: any[];
                };
                path: "/change-email";
            };
            changePassword: {
                <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                    body: {
                        newPassword: string;
                        currentPassword: string;
                        revokeOtherSessions?: boolean | undefined;
                    };
                } & {
                    method?: "POST" | undefined;
                } & {
                    query?: Record<string, any> | undefined;
                } & {
                    params?: Record<string, any>;
                } & {
                    request?: Request;
                } & {
                    headers?: HeadersInit;
                } & {
                    asResponse?: boolean;
                    returnHeaders?: boolean;
                    use?: better_call.Middleware[];
                    path?: string;
                } & {
                    asResponse?: AsResponse | undefined;
                    returnHeaders?: ReturnHeaders | undefined;
                }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                    headers: Headers;
                    response: {
                        token: string | null;
                        user: {
                            id: string;
                            email: string;
                            name: string;
                            image: string | null | undefined;
                            emailVerified: boolean;
                            createdAt: Date;
                            updatedAt: Date;
                        };
                    };
                } : {
                    token: string | null;
                    user: {
                        id: string;
                        email: string;
                        name: string;
                        image: string | null | undefined;
                        emailVerified: boolean;
                        createdAt: Date;
                        updatedAt: Date;
                    };
                }>;
                options: {
                    method: "POST";
                    body: zod.ZodObject<{
                        newPassword: zod.ZodString;
                        currentPassword: zod.ZodString;
                        revokeOtherSessions: zod.ZodOptional<zod.ZodBoolean>;
                    }, zod_v4_core.$strip>;
                    use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<{
                        session: {
                            session: Record<string, any> & {
                                id: string;
                                userId: string;
                                expiresAt: Date;
                                createdAt: Date;
                                updatedAt: Date;
                                token: string;
                                ipAddress?: string | null | undefined;
                                userAgent?: string | null | undefined;
                            };
                            user: Record<string, any> & {
                                id: string;
                                email: string;
                                emailVerified: boolean;
                                name: string;
                                createdAt: Date;
                                updatedAt: Date;
                                image?: string | null | undefined;
                            };
                        };
                    }>)[];
                    metadata: {
                        openapi: {
                            description: string;
                            responses: {
                                "200": {
                                    description: string;
                                    content: {
                                        "application/json": {
                                            schema: {
                                                type: "object";
                                                properties: {
                                                    token: {
                                                        type: string;
                                                        nullable: boolean;
                                                        description: string;
                                                    };
                                                    user: {
                                                        type: string;
                                                        properties: {
                                                            id: {
                                                                type: string;
                                                                description: string;
                                                            };
                                                            email: {
                                                                type: string;
                                                                format: string;
                                                                description: string;
                                                            };
                                                            name: {
                                                                type: string;
                                                                description: string;
                                                            };
                                                            image: {
                                                                type: string;
                                                                format: string;
                                                                nullable: boolean;
                                                                description: string;
                                                            };
                                                            emailVerified: {
                                                                type: string;
                                                                description: string;
                                                            };
                                                            createdAt: {
                                                                type: string;
                                                                format: string;
                                                                description: string;
                                                            };
                                                            updatedAt: {
                                                                type: string;
                                                                format: string;
                                                                description: string;
                                                            };
                                                        };
                                                        required: string[];
                                                    };
                                                };
                                                required: string[];
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                } & {
                    use: any[];
                };
                path: "/change-password";
            };
            setPassword: {
                <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                    body: {
                        newPassword: string;
                    };
                } & {
                    method?: "POST" | undefined;
                } & {
                    query?: Record<string, any> | undefined;
                } & {
                    params?: Record<string, any>;
                } & {
                    request?: Request;
                } & {
                    headers?: HeadersInit;
                } & {
                    asResponse?: boolean;
                    returnHeaders?: boolean;
                    use?: better_call.Middleware[];
                    path?: string;
                } & {
                    asResponse?: AsResponse | undefined;
                    returnHeaders?: ReturnHeaders | undefined;
                }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                    headers: Headers;
                    response: {
                        status: boolean;
                    };
                } : {
                    status: boolean;
                }>;
                options: {
                    method: "POST";
                    body: zod.ZodObject<{
                        newPassword: zod.ZodString;
                    }, zod_v4_core.$strip>;
                    metadata: {
                        SERVER_ONLY: true;
                    };
                    use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<{
                        session: {
                            session: Record<string, any> & {
                                id: string;
                                userId: string;
                                expiresAt: Date;
                                createdAt: Date;
                                updatedAt: Date;
                                token: string;
                                ipAddress?: string | null | undefined;
                                userAgent?: string | null | undefined;
                            };
                            user: Record<string, any> & {
                                id: string;
                                email: string;
                                emailVerified: boolean;
                                name: string;
                                createdAt: Date;
                                updatedAt: Date;
                                image?: string | null | undefined;
                            };
                        };
                    }>)[];
                } & {
                    use: any[];
                };
                path: "/set-password";
            };
            updateUser: {
                <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(...inputCtx: better_call.HasRequiredKeys<better_call.InputContext<"/update-user", {
                    method: "POST";
                    body: zod.ZodRecord<zod.ZodString, zod.ZodAny>;
                    use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<{
                        session: {
                            session: Record<string, any> & {
                                id: string;
                                userId: string;
                                expiresAt: Date;
                                createdAt: Date;
                                updatedAt: Date;
                                token: string;
                                ipAddress?: string | null | undefined;
                                userAgent?: string | null | undefined;
                            };
                            user: Record<string, any> & {
                                id: string;
                                email: string;
                                emailVerified: boolean;
                                name: string;
                                createdAt: Date;
                                updatedAt: Date;
                                image?: string | null | undefined;
                            };
                        };
                    }>)[];
                    metadata: {
                        $Infer: {
                            body: Partial<AdditionalUserFieldsInput<O extends undefined ? {
                                socialProviders: {
                                    github: {
                                        clientId: string;
                                        clientSecret: string;
                                    };
                                    google: {
                                        clientId: string;
                                        clientSecret: string;
                                    };
                                };
                                secret: string;
                                database: ((options: BetterAuthOptions) => Adapter) | {
                                    db: Kysely<unknown>;
                                    type: "postgres";
                                } | {
                                    db: Kysely<unknown>;
                                    type: "mysql";
                                } | undefined;
                                emailAndPassword: {
                                    enabled: true;
                                };
                                rateLimit: {
                                    enabled: false;
                                };
                                advanced: {
                                    cookies: {};
                                };
                            } : O & {
                                socialProviders: {
                                    github: {
                                        clientId: string;
                                        clientSecret: string;
                                    };
                                    google: {
                                        clientId: string;
                                        clientSecret: string;
                                    };
                                };
                                secret: string;
                                database: ((options: BetterAuthOptions) => Adapter) | {
                                    db: Kysely<unknown>;
                                    type: "postgres";
                                } | {
                                    db: Kysely<unknown>;
                                    type: "mysql";
                                } | undefined;
                                emailAndPassword: {
                                    enabled: true;
                                };
                                rateLimit: {
                                    enabled: false;
                                };
                                advanced: {
                                    cookies: {};
                                };
                            }>> & {
                                name?: string;
                                image?: string;
                            };
                        };
                        openapi: {
                            description: string;
                            requestBody: {
                                content: {
                                    "application/json": {
                                        schema: {
                                            type: "object";
                                            properties: {
                                                name: {
                                                    type: string;
                                                    description: string;
                                                };
                                                image: {
                                                    type: string;
                                                    description: string;
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                            responses: {
                                "200": {
                                    description: string;
                                    content: {
                                        "application/json": {
                                            schema: {
                                                type: "object";
                                                properties: {
                                                    status: {
                                                        type: string;
                                                        description: string;
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                } & {
                    use: any[];
                }>> extends true ? [better_call.InferBodyInput<{
                    method: "POST";
                    body: zod.ZodRecord<zod.ZodString, zod.ZodAny>;
                    use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<{
                        session: {
                            session: Record<string, any> & {
                                id: string;
                                userId: string;
                                expiresAt: Date;
                                createdAt: Date;
                                updatedAt: Date;
                                token: string;
                                ipAddress?: string | null | undefined;
                                userAgent?: string | null | undefined;
                            };
                            user: Record<string, any> & {
                                id: string;
                                email: string;
                                emailVerified: boolean;
                                name: string;
                                createdAt: Date;
                                updatedAt: Date;
                                image?: string | null | undefined;
                            };
                        };
                    }>)[];
                    metadata: {
                        $Infer: {
                            body: Partial<AdditionalUserFieldsInput<O extends undefined ? {
                                socialProviders: {
                                    github: {
                                        clientId: string;
                                        clientSecret: string;
                                    };
                                    google: {
                                        clientId: string;
                                        clientSecret: string;
                                    };
                                };
                                secret: string;
                                database: ((options: BetterAuthOptions) => Adapter) | {
                                    db: Kysely<unknown>;
                                    type: "postgres";
                                } | {
                                    db: Kysely<unknown>;
                                    type: "mysql";
                                } | undefined;
                                emailAndPassword: {
                                    enabled: true;
                                };
                                rateLimit: {
                                    enabled: false;
                                };
                                advanced: {
                                    cookies: {};
                                };
                            } : O & {
                                socialProviders: {
                                    github: {
                                        clientId: string;
                                        clientSecret: string;
                                    };
                                    google: {
                                        clientId: string;
                                        clientSecret: string;
                                    };
                                };
                                secret: string;
                                database: ((options: BetterAuthOptions) => Adapter) | {
                                    db: Kysely<unknown>;
                                    type: "postgres";
                                } | {
                                    db: Kysely<unknown>;
                                    type: "mysql";
                                } | undefined;
                                emailAndPassword: {
                                    enabled: true;
                                };
                                rateLimit: {
                                    enabled: false;
                                };
                                advanced: {
                                    cookies: {};
                                };
                            }>> & {
                                name?: string;
                                image?: string;
                            };
                        };
                        openapi: {
                            description: string;
                            requestBody: {
                                content: {
                                    "application/json": {
                                        schema: {
                                            type: "object";
                                            properties: {
                                                name: {
                                                    type: string;
                                                    description: string;
                                                };
                                                image: {
                                                    type: string;
                                                    description: string;
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                            responses: {
                                "200": {
                                    description: string;
                                    content: {
                                        "application/json": {
                                            schema: {
                                                type: "object";
                                                properties: {
                                                    status: {
                                                        type: string;
                                                        description: string;
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                } & {
                    use: any[];
                }, Partial<AdditionalUserFieldsInput<O extends undefined ? {
                    socialProviders: {
                        github: {
                            clientId: string;
                            clientSecret: string;
                        };
                        google: {
                            clientId: string;
                            clientSecret: string;
                        };
                    };
                    secret: string;
                    database: ((options: BetterAuthOptions) => Adapter) | {
                        db: Kysely<unknown>;
                        type: "postgres";
                    } | {
                        db: Kysely<unknown>;
                        type: "mysql";
                    } | undefined;
                    emailAndPassword: {
                        enabled: true;
                    };
                    rateLimit: {
                        enabled: false;
                    };
                    advanced: {
                        cookies: {};
                    };
                } : O & {
                    socialProviders: {
                        github: {
                            clientId: string;
                            clientSecret: string;
                        };
                        google: {
                            clientId: string;
                            clientSecret: string;
                        };
                    };
                    secret: string;
                    database: ((options: BetterAuthOptions) => Adapter) | {
                        db: Kysely<unknown>;
                        type: "postgres";
                    } | {
                        db: Kysely<unknown>;
                        type: "mysql";
                    } | undefined;
                    emailAndPassword: {
                        enabled: true;
                    };
                    rateLimit: {
                        enabled: false;
                    };
                    advanced: {
                        cookies: {};
                    };
                }>> & {
                    name?: string;
                    image?: string;
                }> & {
                    method?: "POST" | undefined;
                } & {
                    query?: Record<string, any> | undefined;
                } & {
                    params?: Record<string, any>;
                } & {
                    request?: Request;
                } & {
                    headers?: HeadersInit;
                } & {
                    asResponse?: boolean;
                    returnHeaders?: boolean;
                    use?: better_call.Middleware[];
                    path?: string;
                } & {
                    asResponse?: AsResponse | undefined;
                    returnHeaders?: ReturnHeaders | undefined;
                }] : [((better_call.InferBodyInput<{
                    method: "POST";
                    body: zod.ZodRecord<zod.ZodString, zod.ZodAny>;
                    use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<{
                        session: {
                            session: Record<string, any> & {
                                id: string;
                                userId: string;
                                expiresAt: Date;
                                createdAt: Date;
                                updatedAt: Date;
                                token: string;
                                ipAddress?: string | null | undefined;
                                userAgent?: string | null | undefined;
                            };
                            user: Record<string, any> & {
                                id: string;
                                email: string;
                                emailVerified: boolean;
                                name: string;
                                createdAt: Date;
                                updatedAt: Date;
                                image?: string | null | undefined;
                            };
                        };
                    }>)[];
                    metadata: {
                        $Infer: {
                            body: Partial<AdditionalUserFieldsInput<O extends undefined ? {
                                socialProviders: {
                                    github: {
                                        clientId: string;
                                        clientSecret: string;
                                    };
                                    google: {
                                        clientId: string;
                                        clientSecret: string;
                                    };
                                };
                                secret: string;
                                database: ((options: BetterAuthOptions) => Adapter) | {
                                    db: Kysely<unknown>;
                                    type: "postgres";
                                } | {
                                    db: Kysely<unknown>;
                                    type: "mysql";
                                } | undefined;
                                emailAndPassword: {
                                    enabled: true;
                                };
                                rateLimit: {
                                    enabled: false;
                                };
                                advanced: {
                                    cookies: {};
                                };
                            } : O & {
                                socialProviders: {
                                    github: {
                                        clientId: string;
                                        clientSecret: string;
                                    };
                                    google: {
                                        clientId: string;
                                        clientSecret: string;
                                    };
                                };
                                secret: string;
                                database: ((options: BetterAuthOptions) => Adapter) | {
                                    db: Kysely<unknown>;
                                    type: "postgres";
                                } | {
                                    db: Kysely<unknown>;
                                    type: "mysql";
                                } | undefined;
                                emailAndPassword: {
                                    enabled: true;
                                };
                                rateLimit: {
                                    enabled: false;
                                };
                                advanced: {
                                    cookies: {};
                                };
                            }>> & {
                                name?: string;
                                image?: string;
                            };
                        };
                        openapi: {
                            description: string;
                            requestBody: {
                                content: {
                                    "application/json": {
                                        schema: {
                                            type: "object";
                                            properties: {
                                                name: {
                                                    type: string;
                                                    description: string;
                                                };
                                                image: {
                                                    type: string;
                                                    description: string;
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                            responses: {
                                "200": {
                                    description: string;
                                    content: {
                                        "application/json": {
                                            schema: {
                                                type: "object";
                                                properties: {
                                                    status: {
                                                        type: string;
                                                        description: string;
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                } & {
                    use: any[];
                }, Partial<AdditionalUserFieldsInput<O extends undefined ? {
                    socialProviders: {
                        github: {
                            clientId: string;
                            clientSecret: string;
                        };
                        google: {
                            clientId: string;
                            clientSecret: string;
                        };
                    };
                    secret: string;
                    database: ((options: BetterAuthOptions) => Adapter) | {
                        db: Kysely<unknown>;
                        type: "postgres";
                    } | {
                        db: Kysely<unknown>;
                        type: "mysql";
                    } | undefined;
                    emailAndPassword: {
                        enabled: true;
                    };
                    rateLimit: {
                        enabled: false;
                    };
                    advanced: {
                        cookies: {};
                    };
                } : O & {
                    socialProviders: {
                        github: {
                            clientId: string;
                            clientSecret: string;
                        };
                        google: {
                            clientId: string;
                            clientSecret: string;
                        };
                    };
                    secret: string;
                    database: ((options: BetterAuthOptions) => Adapter) | {
                        db: Kysely<unknown>;
                        type: "postgres";
                    } | {
                        db: Kysely<unknown>;
                        type: "mysql";
                    } | undefined;
                    emailAndPassword: {
                        enabled: true;
                    };
                    rateLimit: {
                        enabled: false;
                    };
                    advanced: {
                        cookies: {};
                    };
                }>> & {
                    name?: string;
                    image?: string;
                }> & {
                    method?: "POST" | undefined;
                } & {
                    query?: Record<string, any> | undefined;
                } & {
                    params?: Record<string, any>;
                } & {
                    request?: Request;
                } & {
                    headers?: HeadersInit;
                } & {
                    asResponse?: boolean;
                    returnHeaders?: boolean;
                    use?: better_call.Middleware[];
                    path?: string;
                } & {
                    asResponse?: AsResponse | undefined;
                    returnHeaders?: ReturnHeaders | undefined;
                }) | undefined)?]): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                    headers: Headers;
                    response: {
                        status: boolean;
                    };
                } : {
                    status: boolean;
                }>;
                options: {
                    method: "POST";
                    body: zod.ZodRecord<zod.ZodString, zod.ZodAny>;
                    use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<{
                        session: {
                            session: Record<string, any> & {
                                id: string;
                                userId: string;
                                expiresAt: Date;
                                createdAt: Date;
                                updatedAt: Date;
                                token: string;
                                ipAddress?: string | null | undefined;
                                userAgent?: string | null | undefined;
                            };
                            user: Record<string, any> & {
                                id: string;
                                email: string;
                                emailVerified: boolean;
                                name: string;
                                createdAt: Date;
                                updatedAt: Date;
                                image?: string | null | undefined;
                            };
                        };
                    }>)[];
                    metadata: {
                        $Infer: {
                            body: Partial<AdditionalUserFieldsInput<O extends undefined ? {
                                socialProviders: {
                                    github: {
                                        clientId: string;
                                        clientSecret: string;
                                    };
                                    google: {
                                        clientId: string;
                                        clientSecret: string;
                                    };
                                };
                                secret: string;
                                database: ((options: BetterAuthOptions) => Adapter) | {
                                    db: Kysely<unknown>;
                                    type: "postgres";
                                } | {
                                    db: Kysely<unknown>;
                                    type: "mysql";
                                } | undefined;
                                emailAndPassword: {
                                    enabled: true;
                                };
                                rateLimit: {
                                    enabled: false;
                                };
                                advanced: {
                                    cookies: {};
                                };
                            } : O & {
                                socialProviders: {
                                    github: {
                                        clientId: string;
                                        clientSecret: string;
                                    };
                                    google: {
                                        clientId: string;
                                        clientSecret: string;
                                    };
                                };
                                secret: string;
                                database: ((options: BetterAuthOptions) => Adapter) | {
                                    db: Kysely<unknown>;
                                    type: "postgres";
                                } | {
                                    db: Kysely<unknown>;
                                    type: "mysql";
                                } | undefined;
                                emailAndPassword: {
                                    enabled: true;
                                };
                                rateLimit: {
                                    enabled: false;
                                };
                                advanced: {
                                    cookies: {};
                                };
                            }>> & {
                                name?: string;
                                image?: string;
                            };
                        };
                        openapi: {
                            description: string;
                            requestBody: {
                                content: {
                                    "application/json": {
                                        schema: {
                                            type: "object";
                                            properties: {
                                                name: {
                                                    type: string;
                                                    description: string;
                                                };
                                                image: {
                                                    type: string;
                                                    description: string;
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                            responses: {
                                "200": {
                                    description: string;
                                    content: {
                                        "application/json": {
                                            schema: {
                                                type: "object";
                                                properties: {
                                                    status: {
                                                        type: string;
                                                        description: string;
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                } & {
                    use: any[];
                };
                path: "/update-user";
            };
            deleteUser: {
                <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                    body: {
                        callbackURL?: string | undefined;
                        password?: string | undefined;
                        token?: string | undefined;
                    };
                } & {
                    method?: "POST" | undefined;
                } & {
                    query?: Record<string, any> | undefined;
                } & {
                    params?: Record<string, any>;
                } & {
                    request?: Request;
                } & {
                    headers?: HeadersInit;
                } & {
                    asResponse?: boolean;
                    returnHeaders?: boolean;
                    use?: better_call.Middleware[];
                    path?: string;
                } & {
                    asResponse?: AsResponse | undefined;
                    returnHeaders?: ReturnHeaders | undefined;
                }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                    headers: Headers;
                    response: {
                        success: boolean;
                        message: string;
                    };
                } : {
                    success: boolean;
                    message: string;
                }>;
                options: {
                    method: "POST";
                    use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<{
                        session: {
                            session: Record<string, any> & {
                                id: string;
                                userId: string;
                                expiresAt: Date;
                                createdAt: Date;
                                updatedAt: Date;
                                token: string;
                                ipAddress?: string | null | undefined;
                                userAgent?: string | null | undefined;
                            };
                            user: Record<string, any> & {
                                id: string;
                                email: string;
                                emailVerified: boolean;
                                name: string;
                                createdAt: Date;
                                updatedAt: Date;
                                image?: string | null | undefined;
                            };
                        };
                    }>)[];
                    body: zod.ZodObject<{
                        callbackURL: zod.ZodOptional<zod.ZodString>;
                        password: zod.ZodOptional<zod.ZodString>;
                        token: zod.ZodOptional<zod.ZodString>;
                    }, zod_v4_core.$strip>;
                    metadata: {
                        openapi: {
                            description: string;
                            responses: {
                                "200": {
                                    description: string;
                                    content: {
                                        "application/json": {
                                            schema: {
                                                type: "object";
                                                properties: {
                                                    success: {
                                                        type: string;
                                                        description: string;
                                                    };
                                                    message: {
                                                        type: string;
                                                        enum: string[];
                                                        description: string;
                                                    };
                                                };
                                                required: string[];
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                } & {
                    use: any[];
                };
                path: "/delete-user";
            };
            forgetPasswordCallback: {
                <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                    body?: undefined;
                } & {
                    method?: "GET" | undefined;
                } & {
                    query: {
                        callbackURL: string;
                    };
                } & {
                    params: {
                        token: string;
                    };
                } & {
                    request?: Request;
                } & {
                    headers?: HeadersInit;
                } & {
                    asResponse?: boolean;
                    returnHeaders?: boolean;
                    use?: better_call.Middleware[];
                    path?: string;
                } & {
                    asResponse?: AsResponse | undefined;
                    returnHeaders?: ReturnHeaders | undefined;
                }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                    headers: Headers;
                    response: never;
                } : never>;
                options: {
                    method: "GET";
                    query: zod.ZodObject<{
                        callbackURL: zod.ZodString;
                    }, zod_v4_core.$strip>;
                    use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<void>)[];
                    metadata: {
                        openapi: {
                            description: string;
                            responses: {
                                "200": {
                                    description: string;
                                    content: {
                                        "application/json": {
                                            schema: {
                                                type: "object";
                                                properties: {
                                                    token: {
                                                        type: string;
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                } & {
                    use: any[];
                };
                path: "/reset-password/:token";
            };
            requestPasswordReset: {
                <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                    body: {
                        email: string;
                        redirectTo?: string | undefined;
                    };
                } & {
                    method?: "POST" | undefined;
                } & {
                    query?: Record<string, any> | undefined;
                } & {
                    params?: Record<string, any>;
                } & {
                    request?: Request;
                } & {
                    headers?: HeadersInit;
                } & {
                    asResponse?: boolean;
                    returnHeaders?: boolean;
                    use?: better_call.Middleware[];
                    path?: string;
                } & {
                    asResponse?: AsResponse | undefined;
                    returnHeaders?: ReturnHeaders | undefined;
                }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                    headers: Headers;
                    response: {
                        status: boolean;
                    };
                } : {
                    status: boolean;
                }>;
                options: {
                    method: "POST";
                    body: zod.ZodObject<{
                        email: zod.ZodEmail;
                        redirectTo: zod.ZodOptional<zod.ZodString>;
                    }, zod_v4_core.$strip>;
                    metadata: {
                        openapi: {
                            description: string;
                            responses: {
                                "200": {
                                    description: string;
                                    content: {
                                        "application/json": {
                                            schema: {
                                                type: "object";
                                                properties: {
                                                    status: {
                                                        type: string;
                                                    };
                                                    message: {
                                                        type: string;
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                } & {
                    use: any[];
                };
                path: "/request-password-reset";
            };
            requestPasswordResetCallback: {
                <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                    body?: undefined;
                } & {
                    method?: "GET" | undefined;
                } & {
                    query: {
                        callbackURL: string;
                    };
                } & {
                    params: {
                        token: string;
                    };
                } & {
                    request?: Request;
                } & {
                    headers?: HeadersInit;
                } & {
                    asResponse?: boolean;
                    returnHeaders?: boolean;
                    use?: better_call.Middleware[];
                    path?: string;
                } & {
                    asResponse?: AsResponse | undefined;
                    returnHeaders?: ReturnHeaders | undefined;
                }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                    headers: Headers;
                    response: never;
                } : never>;
                options: {
                    method: "GET";
                    query: zod.ZodObject<{
                        callbackURL: zod.ZodString;
                    }, zod_v4_core.$strip>;
                    use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<void>)[];
                    metadata: {
                        openapi: {
                            description: string;
                            responses: {
                                "200": {
                                    description: string;
                                    content: {
                                        "application/json": {
                                            schema: {
                                                type: "object";
                                                properties: {
                                                    token: {
                                                        type: string;
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                } & {
                    use: any[];
                };
                path: "/reset-password/:token";
            };
            listSessions: {
                <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                    body?: undefined;
                } & {
                    method?: "GET" | undefined;
                } & {
                    query?: Record<string, any> | undefined;
                } & {
                    params?: Record<string, any>;
                } & {
                    request?: Request;
                } & {
                    headers: HeadersInit;
                } & {
                    asResponse?: boolean;
                    returnHeaders?: boolean;
                    use?: better_call.Middleware[];
                    path?: string;
                } & {
                    asResponse?: AsResponse | undefined;
                    returnHeaders?: ReturnHeaders | undefined;
                }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                    headers: Headers;
                    response: Prettify<UnionToIntersection<StripEmptyObjects<{
                        id: string;
                        userId: string;
                        expiresAt: Date;
                        createdAt: Date;
                        updatedAt: Date;
                        token: string;
                        ipAddress?: string | null | undefined;
                        userAgent?: string | null | undefined;
                    } & ((O extends undefined ? {
                        socialProviders: {
                            github: {
                                clientId: string;
                                clientSecret: string;
                            };
                            google: {
                                clientId: string;
                                clientSecret: string;
                            };
                        };
                        secret: string;
                        database: ((options: BetterAuthOptions) => Adapter) | {
                            db: Kysely<unknown>;
                            type: "postgres";
                        } | {
                            db: Kysely<unknown>;
                            type: "mysql";
                        } | undefined;
                        emailAndPassword: {
                            enabled: true;
                        };
                        rateLimit: {
                            enabled: false;
                        };
                        advanced: {
                            cookies: {};
                        };
                    } : O & {
                        socialProviders: {
                            github: {
                                clientId: string;
                                clientSecret: string;
                            };
                            google: {
                                clientId: string;
                                clientSecret: string;
                            };
                        };
                        secret: string;
                        database: ((options: BetterAuthOptions) => Adapter) | {
                            db: Kysely<unknown>;
                            type: "postgres";
                        } | {
                            db: Kysely<unknown>;
                            type: "mysql";
                        } | undefined;
                        emailAndPassword: {
                            enabled: true;
                        };
                        rateLimit: {
                            enabled: false;
                        };
                        advanced: {
                            cookies: {};
                        };
                    }) extends infer T ? T extends (O extends undefined ? {
                        socialProviders: {
                            github: {
                                clientId: string;
                                clientSecret: string;
                            };
                            google: {
                                clientId: string;
                                clientSecret: string;
                            };
                        };
                        secret: string;
                        database: ((options: BetterAuthOptions) => Adapter) | {
                            db: Kysely<unknown>;
                            type: "postgres";
                        } | {
                            db: Kysely<unknown>;
                            type: "mysql";
                        } | undefined;
                        emailAndPassword: {
                            enabled: true;
                        };
                        rateLimit: {
                            enabled: false;
                        };
                        advanced: {
                            cookies: {};
                        };
                    } : O & {
                        socialProviders: {
                            github: {
                                clientId: string;
                                clientSecret: string;
                            };
                            google: {
                                clientId: string;
                                clientSecret: string;
                            };
                        };
                        secret: string;
                        database: ((options: BetterAuthOptions) => Adapter) | {
                            db: Kysely<unknown>;
                            type: "postgres";
                        } | {
                            db: Kysely<unknown>;
                            type: "mysql";
                        } | undefined;
                        emailAndPassword: {
                            enabled: true;
                        };
                        rateLimit: {
                            enabled: false;
                        };
                        advanced: {
                            cookies: {};
                        };
                    }) ? T extends BetterAuthOptions ? AdditionalSessionFieldsOutput<T> : T extends Auth ? AdditionalSessionFieldsOutput<T["options"]> : {} : never : never)>>>[];
                } : Prettify<UnionToIntersection<StripEmptyObjects<{
                    id: string;
                    userId: string;
                    expiresAt: Date;
                    createdAt: Date;
                    updatedAt: Date;
                    token: string;
                    ipAddress?: string | null | undefined;
                    userAgent?: string | null | undefined;
                } & ((O extends undefined ? {
                    socialProviders: {
                        github: {
                            clientId: string;
                            clientSecret: string;
                        };
                        google: {
                            clientId: string;
                            clientSecret: string;
                        };
                    };
                    secret: string;
                    database: ((options: BetterAuthOptions) => Adapter) | {
                        db: Kysely<unknown>;
                        type: "postgres";
                    } | {
                        db: Kysely<unknown>;
                        type: "mysql";
                    } | undefined;
                    emailAndPassword: {
                        enabled: true;
                    };
                    rateLimit: {
                        enabled: false;
                    };
                    advanced: {
                        cookies: {};
                    };
                } : O & {
                    socialProviders: {
                        github: {
                            clientId: string;
                            clientSecret: string;
                        };
                        google: {
                            clientId: string;
                            clientSecret: string;
                        };
                    };
                    secret: string;
                    database: ((options: BetterAuthOptions) => Adapter) | {
                        db: Kysely<unknown>;
                        type: "postgres";
                    } | {
                        db: Kysely<unknown>;
                        type: "mysql";
                    } | undefined;
                    emailAndPassword: {
                        enabled: true;
                    };
                    rateLimit: {
                        enabled: false;
                    };
                    advanced: {
                        cookies: {};
                    };
                }) extends infer T_1 ? T_1 extends (O extends undefined ? {
                    socialProviders: {
                        github: {
                            clientId: string;
                            clientSecret: string;
                        };
                        google: {
                            clientId: string;
                            clientSecret: string;
                        };
                    };
                    secret: string;
                    database: ((options: BetterAuthOptions) => Adapter) | {
                        db: Kysely<unknown>;
                        type: "postgres";
                    } | {
                        db: Kysely<unknown>;
                        type: "mysql";
                    } | undefined;
                    emailAndPassword: {
                        enabled: true;
                    };
                    rateLimit: {
                        enabled: false;
                    };
                    advanced: {
                        cookies: {};
                    };
                } : O & {
                    socialProviders: {
                        github: {
                            clientId: string;
                            clientSecret: string;
                        };
                        google: {
                            clientId: string;
                            clientSecret: string;
                        };
                    };
                    secret: string;
                    database: ((options: BetterAuthOptions) => Adapter) | {
                        db: Kysely<unknown>;
                        type: "postgres";
                    } | {
                        db: Kysely<unknown>;
                        type: "mysql";
                    } | undefined;
                    emailAndPassword: {
                        enabled: true;
                    };
                    rateLimit: {
                        enabled: false;
                    };
                    advanced: {
                        cookies: {};
                    };
                }) ? T_1 extends BetterAuthOptions ? AdditionalSessionFieldsOutput<T_1> : T_1 extends Auth ? AdditionalSessionFieldsOutput<T_1["options"]> : {} : never : never)>>>[]>;
                options: {
                    method: "GET";
                    use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<{
                        session: {
                            session: Record<string, any> & {
                                id: string;
                                userId: string;
                                expiresAt: Date;
                                createdAt: Date;
                                updatedAt: Date;
                                token: string;
                                ipAddress?: string | null | undefined;
                                userAgent?: string | null | undefined;
                            };
                            user: Record<string, any> & {
                                id: string;
                                email: string;
                                emailVerified: boolean;
                                name: string;
                                createdAt: Date;
                                updatedAt: Date;
                                image?: string | null | undefined;
                            };
                        };
                    }>)[];
                    requireHeaders: true;
                    metadata: {
                        openapi: {
                            description: string;
                            responses: {
                                "200": {
                                    description: string;
                                    content: {
                                        "application/json": {
                                            schema: {
                                                type: "array";
                                                items: {
                                                    $ref: string;
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                } & {
                    use: any[];
                };
                path: "/list-sessions";
            };
            revokeSession: {
                <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                    body: {
                        token: string;
                    };
                } & {
                    method?: "POST" | undefined;
                } & {
                    query?: Record<string, any> | undefined;
                } & {
                    params?: Record<string, any>;
                } & {
                    request?: Request;
                } & {
                    headers: HeadersInit;
                } & {
                    asResponse?: boolean;
                    returnHeaders?: boolean;
                    use?: better_call.Middleware[];
                    path?: string;
                } & {
                    asResponse?: AsResponse | undefined;
                    returnHeaders?: ReturnHeaders | undefined;
                }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                    headers: Headers;
                    response: {
                        status: boolean;
                    };
                } : {
                    status: boolean;
                }>;
                options: {
                    method: "POST";
                    body: zod.ZodObject<{
                        token: zod.ZodString;
                    }, zod_v4_core.$strip>;
                    use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<{
                        session: {
                            session: Record<string, any> & {
                                id: string;
                                userId: string;
                                expiresAt: Date;
                                createdAt: Date;
                                updatedAt: Date;
                                token: string;
                                ipAddress?: string | null | undefined;
                                userAgent?: string | null | undefined;
                            };
                            user: Record<string, any> & {
                                id: string;
                                email: string;
                                emailVerified: boolean;
                                name: string;
                                createdAt: Date;
                                updatedAt: Date;
                                image?: string | null | undefined;
                            };
                        };
                    }>)[];
                    requireHeaders: true;
                    metadata: {
                        openapi: {
                            description: string;
                            requestBody: {
                                content: {
                                    "application/json": {
                                        schema: {
                                            type: "object";
                                            properties: {
                                                token: {
                                                    type: string;
                                                    description: string;
                                                };
                                            };
                                            required: string[];
                                        };
                                    };
                                };
                            };
                            responses: {
                                "200": {
                                    description: string;
                                    content: {
                                        "application/json": {
                                            schema: {
                                                type: "object";
                                                properties: {
                                                    status: {
                                                        type: string;
                                                        description: string;
                                                    };
                                                };
                                                required: string[];
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                } & {
                    use: any[];
                };
                path: "/revoke-session";
            };
            revokeSessions: {
                <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                    body?: undefined;
                } & {
                    method?: "POST" | undefined;
                } & {
                    query?: Record<string, any> | undefined;
                } & {
                    params?: Record<string, any>;
                } & {
                    request?: Request;
                } & {
                    headers: HeadersInit;
                } & {
                    asResponse?: boolean;
                    returnHeaders?: boolean;
                    use?: better_call.Middleware[];
                    path?: string;
                } & {
                    asResponse?: AsResponse | undefined;
                    returnHeaders?: ReturnHeaders | undefined;
                }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                    headers: Headers;
                    response: {
                        status: boolean;
                    };
                } : {
                    status: boolean;
                }>;
                options: {
                    method: "POST";
                    use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<{
                        session: {
                            session: Record<string, any> & {
                                id: string;
                                userId: string;
                                expiresAt: Date;
                                createdAt: Date;
                                updatedAt: Date;
                                token: string;
                                ipAddress?: string | null | undefined;
                                userAgent?: string | null | undefined;
                            };
                            user: Record<string, any> & {
                                id: string;
                                email: string;
                                emailVerified: boolean;
                                name: string;
                                createdAt: Date;
                                updatedAt: Date;
                                image?: string | null | undefined;
                            };
                        };
                    }>)[];
                    requireHeaders: true;
                    metadata: {
                        openapi: {
                            description: string;
                            responses: {
                                "200": {
                                    description: string;
                                    content: {
                                        "application/json": {
                                            schema: {
                                                type: "object";
                                                properties: {
                                                    status: {
                                                        type: string;
                                                        description: string;
                                                    };
                                                };
                                                required: string[];
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                } & {
                    use: any[];
                };
                path: "/revoke-sessions";
            };
            revokeOtherSessions: {
                <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                    body?: undefined;
                } & {
                    method?: "POST" | undefined;
                } & {
                    query?: Record<string, any> | undefined;
                } & {
                    params?: Record<string, any>;
                } & {
                    request?: Request;
                } & {
                    headers: HeadersInit;
                } & {
                    asResponse?: boolean;
                    returnHeaders?: boolean;
                    use?: better_call.Middleware[];
                    path?: string;
                } & {
                    asResponse?: AsResponse | undefined;
                    returnHeaders?: ReturnHeaders | undefined;
                }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                    headers: Headers;
                    response: {
                        status: boolean;
                    };
                } : {
                    status: boolean;
                }>;
                options: {
                    method: "POST";
                    requireHeaders: true;
                    use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<{
                        session: {
                            session: Record<string, any> & {
                                id: string;
                                userId: string;
                                expiresAt: Date;
                                createdAt: Date;
                                updatedAt: Date;
                                token: string;
                                ipAddress?: string | null | undefined;
                                userAgent?: string | null | undefined;
                            };
                            user: Record<string, any> & {
                                id: string;
                                email: string;
                                emailVerified: boolean;
                                name: string;
                                createdAt: Date;
                                updatedAt: Date;
                                image?: string | null | undefined;
                            };
                        };
                    }>)[];
                    metadata: {
                        openapi: {
                            description: string;
                            responses: {
                                "200": {
                                    description: string;
                                    content: {
                                        "application/json": {
                                            schema: {
                                                type: "object";
                                                properties: {
                                                    status: {
                                                        type: string;
                                                        description: string;
                                                    };
                                                };
                                                required: string[];
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                } & {
                    use: any[];
                };
                path: "/revoke-other-sessions";
            };
            linkSocialAccount: {
                <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                    body: {
                        provider: unknown;
                        callbackURL?: string | undefined;
                        idToken?: {
                            token: string;
                            nonce?: string | undefined;
                            accessToken?: string | undefined;
                            refreshToken?: string | undefined;
                            scopes?: string[] | undefined;
                        } | undefined;
                        requestSignUp?: boolean | undefined;
                        scopes?: string[] | undefined;
                        errorCallbackURL?: string | undefined;
                        disableRedirect?: boolean | undefined;
                    };
                } & {
                    method?: "POST" | undefined;
                } & {
                    query?: Record<string, any> | undefined;
                } & {
                    params?: Record<string, any>;
                } & {
                    request?: Request;
                } & {
                    headers: HeadersInit;
                } & {
                    asResponse?: boolean;
                    returnHeaders?: boolean;
                    use?: better_call.Middleware[];
                    path?: string;
                } & {
                    asResponse?: AsResponse | undefined;
                    returnHeaders?: ReturnHeaders | undefined;
                }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                    headers: Headers;
                    response: {
                        url: string;
                        redirect: boolean;
                    };
                } : {
                    url: string;
                    redirect: boolean;
                }>;
                options: {
                    method: "POST";
                    requireHeaders: true;
                    body: zod.ZodObject<{
                        callbackURL: zod.ZodOptional<zod.ZodString>;
                        provider: zod.ZodType<"github" | "apple" | "discord" | "facebook" | "microsoft" | "google" | "huggingface" | "slack" | "spotify" | "twitch" | "twitter" | "dropbox" | "kick" | "linear" | "linkedin" | "gitlab" | "tiktok" | "reddit" | "roblox" | "vk" | "zoom" | "notion" | (string & {}), unknown, zod_v4_core.$ZodTypeInternals<"github" | "apple" | "discord" | "facebook" | "microsoft" | "google" | "huggingface" | "slack" | "spotify" | "twitch" | "twitter" | "dropbox" | "kick" | "linear" | "linkedin" | "gitlab" | "tiktok" | "reddit" | "roblox" | "vk" | "zoom" | "notion" | (string & {}), unknown>>;
                        idToken: zod.ZodOptional<zod.ZodObject<{
                            token: zod.ZodString;
                            nonce: zod.ZodOptional<zod.ZodString>;
                            accessToken: zod.ZodOptional<zod.ZodString>;
                            refreshToken: zod.ZodOptional<zod.ZodString>;
                            scopes: zod.ZodOptional<zod.ZodArray<zod.ZodString>>;
                        }, zod_v4_core.$strip>>;
                        requestSignUp: zod.ZodOptional<zod.ZodBoolean>;
                        scopes: zod.ZodOptional<zod.ZodArray<zod.ZodString>>;
                        errorCallbackURL: zod.ZodOptional<zod.ZodString>;
                        disableRedirect: zod.ZodOptional<zod.ZodBoolean>;
                    }, zod_v4_core.$strip>;
                    use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<{
                        session: {
                            session: Record<string, any> & {
                                id: string;
                                userId: string;
                                expiresAt: Date;
                                createdAt: Date;
                                updatedAt: Date;
                                token: string;
                                ipAddress?: string | null | undefined;
                                userAgent?: string | null | undefined;
                            };
                            user: Record<string, any> & {
                                id: string;
                                email: string;
                                emailVerified: boolean;
                                name: string;
                                createdAt: Date;
                                updatedAt: Date;
                                image?: string | null | undefined;
                            };
                        };
                    }>)[];
                    metadata: {
                        openapi: {
                            description: string;
                            responses: {
                                "200": {
                                    description: string;
                                    content: {
                                        "application/json": {
                                            schema: {
                                                type: "object";
                                                properties: {
                                                    url: {
                                                        type: string;
                                                        description: string;
                                                    };
                                                    redirect: {
                                                        type: string;
                                                        description: string;
                                                    };
                                                    status: {
                                                        type: string;
                                                    };
                                                };
                                                required: string[];
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                } & {
                    use: any[];
                };
                path: "/link-social";
            };
            listUserAccounts: {
                <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0?: ({
                    body?: undefined;
                } & {
                    method?: "GET" | undefined;
                } & {
                    query?: Record<string, any> | undefined;
                } & {
                    params?: Record<string, any>;
                } & {
                    request?: Request;
                } & {
                    headers?: HeadersInit;
                } & {
                    asResponse?: boolean;
                    returnHeaders?: boolean;
                    use?: better_call.Middleware[];
                    path?: string;
                } & {
                    asResponse?: AsResponse | undefined;
                    returnHeaders?: ReturnHeaders | undefined;
                }) | undefined): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                    headers: Headers;
                    response: {
                        id: string;
                        provider: string;
                        createdAt: Date;
                        updatedAt: Date;
                        accountId: string;
                        scopes: string[];
                    }[];
                } : {
                    id: string;
                    provider: string;
                    createdAt: Date;
                    updatedAt: Date;
                    accountId: string;
                    scopes: string[];
                }[]>;
                options: {
                    method: "GET";
                    use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<{
                        session: {
                            session: Record<string, any> & {
                                id: string;
                                userId: string;
                                expiresAt: Date;
                                createdAt: Date;
                                updatedAt: Date;
                                token: string;
                                ipAddress?: string | null | undefined;
                                userAgent?: string | null | undefined;
                            };
                            user: Record<string, any> & {
                                id: string;
                                email: string;
                                emailVerified: boolean;
                                name: string;
                                createdAt: Date;
                                updatedAt: Date;
                                image?: string | null | undefined;
                            };
                        };
                    }>)[];
                    metadata: {
                        openapi: {
                            description: string;
                            responses: {
                                "200": {
                                    description: string;
                                    content: {
                                        "application/json": {
                                            schema: {
                                                type: "array";
                                                items: {
                                                    type: string;
                                                    properties: {
                                                        id: {
                                                            type: string;
                                                        };
                                                        provider: {
                                                            type: string;
                                                        };
                                                        createdAt: {
                                                            type: string;
                                                            format: string;
                                                        };
                                                        updatedAt: {
                                                            type: string;
                                                            format: string;
                                                        };
                                                    };
                                                    accountId: {
                                                        type: string;
                                                    };
                                                    scopes: {
                                                        type: string;
                                                        items: {
                                                            type: string;
                                                        };
                                                    };
                                                };
                                                required: string[];
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                } & {
                    use: any[];
                };
                path: "/list-accounts";
            };
            deleteUserCallback: {
                <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                    body?: undefined;
                } & {
                    method?: "GET" | undefined;
                } & {
                    query: {
                        token: string;
                        callbackURL?: string | undefined;
                    };
                } & {
                    params?: Record<string, any>;
                } & {
                    request?: Request;
                } & {
                    headers?: HeadersInit;
                } & {
                    asResponse?: boolean;
                    returnHeaders?: boolean;
                    use?: better_call.Middleware[];
                    path?: string;
                } & {
                    asResponse?: AsResponse | undefined;
                    returnHeaders?: ReturnHeaders | undefined;
                }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                    headers: Headers;
                    response: {
                        success: boolean;
                        message: string;
                    };
                } : {
                    success: boolean;
                    message: string;
                }>;
                options: {
                    method: "GET";
                    query: zod.ZodObject<{
                        token: zod.ZodString;
                        callbackURL: zod.ZodOptional<zod.ZodString>;
                    }, zod_v4_core.$strip>;
                    use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<void>)[];
                    metadata: {
                        openapi: {
                            description: string;
                            responses: {
                                "200": {
                                    description: string;
                                    content: {
                                        "application/json": {
                                            schema: {
                                                type: "object";
                                                properties: {
                                                    success: {
                                                        type: string;
                                                        description: string;
                                                    };
                                                    message: {
                                                        type: string;
                                                        enum: string[];
                                                        description: string;
                                                    };
                                                };
                                                required: string[];
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                } & {
                    use: any[];
                };
                path: "/delete-user/callback";
            };
            unlinkAccount: {
                <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                    body: {
                        providerId: string;
                        accountId?: string | undefined;
                    };
                } & {
                    method?: "POST" | undefined;
                } & {
                    query?: Record<string, any> | undefined;
                } & {
                    params?: Record<string, any>;
                } & {
                    request?: Request;
                } & {
                    headers?: HeadersInit;
                } & {
                    asResponse?: boolean;
                    returnHeaders?: boolean;
                    use?: better_call.Middleware[];
                    path?: string;
                } & {
                    asResponse?: AsResponse | undefined;
                    returnHeaders?: ReturnHeaders | undefined;
                }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                    headers: Headers;
                    response: {
                        status: boolean;
                    };
                } : {
                    status: boolean;
                }>;
                options: {
                    method: "POST";
                    body: zod.ZodObject<{
                        providerId: zod.ZodString;
                        accountId: zod.ZodOptional<zod.ZodString>;
                    }, zod_v4_core.$strip>;
                    use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<{
                        session: {
                            session: Record<string, any> & {
                                id: string;
                                userId: string;
                                expiresAt: Date;
                                createdAt: Date;
                                updatedAt: Date;
                                token: string;
                                ipAddress?: string | null | undefined;
                                userAgent?: string | null | undefined;
                            };
                            user: Record<string, any> & {
                                id: string;
                                email: string;
                                emailVerified: boolean;
                                name: string;
                                createdAt: Date;
                                updatedAt: Date;
                                image?: string | null | undefined;
                            };
                        };
                    }>)[];
                    metadata: {
                        openapi: {
                            description: string;
                            responses: {
                                "200": {
                                    description: string;
                                    content: {
                                        "application/json": {
                                            schema: {
                                                type: "object";
                                                properties: {
                                                    status: {
                                                        type: string;
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                } & {
                    use: any[];
                };
                path: "/unlink-account";
            };
            refreshToken: {
                <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                    body: {
                        providerId: string;
                        accountId?: string | undefined;
                        userId?: string | undefined;
                    };
                } & {
                    method?: "POST" | undefined;
                } & {
                    query?: Record<string, any> | undefined;
                } & {
                    params?: Record<string, any>;
                } & {
                    request?: Request;
                } & {
                    headers?: HeadersInit;
                } & {
                    asResponse?: boolean;
                    returnHeaders?: boolean;
                    use?: better_call.Middleware[];
                    path?: string;
                } & {
                    asResponse?: AsResponse | undefined;
                    returnHeaders?: ReturnHeaders | undefined;
                }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                    headers: Headers;
                    response: OAuth2Tokens;
                } : OAuth2Tokens>;
                options: {
                    method: "POST";
                    body: zod.ZodObject<{
                        providerId: zod.ZodString;
                        accountId: zod.ZodOptional<zod.ZodString>;
                        userId: zod.ZodOptional<zod.ZodString>;
                    }, zod_v4_core.$strip>;
                    metadata: {
                        openapi: {
                            description: string;
                            responses: {
                                200: {
                                    description: string;
                                    content: {
                                        "application/json": {
                                            schema: {
                                                type: "object";
                                                properties: {
                                                    tokenType: {
                                                        type: string;
                                                    };
                                                    idToken: {
                                                        type: string;
                                                    };
                                                    accessToken: {
                                                        type: string;
                                                    };
                                                    refreshToken: {
                                                        type: string;
                                                    };
                                                    accessTokenExpiresAt: {
                                                        type: string;
                                                        format: string;
                                                    };
                                                    refreshTokenExpiresAt: {
                                                        type: string;
                                                        format: string;
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                                400: {
                                    description: string;
                                };
                            };
                        };
                    };
                } & {
                    use: any[];
                };
                path: "/refresh-token";
            };
            getAccessToken: {
                <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                    body: {
                        providerId: string;
                        accountId?: string | undefined;
                        userId?: string | undefined;
                    };
                } & {
                    method?: "POST" | undefined;
                } & {
                    query?: Record<string, any> | undefined;
                } & {
                    params?: Record<string, any>;
                } & {
                    request?: Request;
                } & {
                    headers?: HeadersInit;
                } & {
                    asResponse?: boolean;
                    returnHeaders?: boolean;
                    use?: better_call.Middleware[];
                    path?: string;
                } & {
                    asResponse?: AsResponse | undefined;
                    returnHeaders?: ReturnHeaders | undefined;
                }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                    headers: Headers;
                    response: {
                        accessToken: string;
                        accessTokenExpiresAt: Date | undefined;
                        scopes: string[];
                        idToken: string | undefined;
                    };
                } : {
                    accessToken: string;
                    accessTokenExpiresAt: Date | undefined;
                    scopes: string[];
                    idToken: string | undefined;
                }>;
                options: {
                    method: "POST";
                    body: zod.ZodObject<{
                        providerId: zod.ZodString;
                        accountId: zod.ZodOptional<zod.ZodString>;
                        userId: zod.ZodOptional<zod.ZodString>;
                    }, zod_v4_core.$strip>;
                    metadata: {
                        openapi: {
                            description: string;
                            responses: {
                                200: {
                                    description: string;
                                    content: {
                                        "application/json": {
                                            schema: {
                                                type: "object";
                                                properties: {
                                                    tokenType: {
                                                        type: string;
                                                    };
                                                    idToken: {
                                                        type: string;
                                                    };
                                                    accessToken: {
                                                        type: string;
                                                    };
                                                    refreshToken: {
                                                        type: string;
                                                    };
                                                    accessTokenExpiresAt: {
                                                        type: string;
                                                        format: string;
                                                    };
                                                    refreshTokenExpiresAt: {
                                                        type: string;
                                                        format: string;
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                                400: {
                                    description: string;
                                };
                            };
                        };
                    };
                } & {
                    use: any[];
                };
                path: "/get-access-token";
            };
            accountInfo: {
                <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                    body: {
                        accountId: string;
                    };
                } & {
                    method?: "POST" | undefined;
                } & {
                    query?: Record<string, any> | undefined;
                } & {
                    params?: Record<string, any>;
                } & {
                    request?: Request;
                } & {
                    headers?: HeadersInit;
                } & {
                    asResponse?: boolean;
                    returnHeaders?: boolean;
                    use?: better_call.Middleware[];
                    path?: string;
                } & {
                    asResponse?: AsResponse | undefined;
                    returnHeaders?: ReturnHeaders | undefined;
                }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                    headers: Headers;
                    response: {
                        user: {
                            id: string | number;
                            name?: string;
                            email?: string | null;
                            image?: string;
                            emailVerified: boolean;
                        };
                        data: Record<string, any>;
                    } | null;
                } : {
                    user: {
                        id: string | number;
                        name?: string;
                        email?: string | null;
                        image?: string;
                        emailVerified: boolean;
                    };
                    data: Record<string, any>;
                } | null>;
                options: {
                    method: "POST";
                    use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<{
                        session: {
                            session: Record<string, any> & {
                                id: string;
                                userId: string;
                                expiresAt: Date;
                                createdAt: Date;
                                updatedAt: Date;
                                token: string;
                                ipAddress?: string | null | undefined;
                                userAgent?: string | null | undefined;
                            };
                            user: Record<string, any> & {
                                id: string;
                                email: string;
                                emailVerified: boolean;
                                name: string;
                                createdAt: Date;
                                updatedAt: Date;
                                image?: string | null | undefined;
                            };
                        };
                    }>)[];
                    metadata: {
                        openapi: {
                            description: string;
                            responses: {
                                "200": {
                                    description: string;
                                    content: {
                                        "application/json": {
                                            schema: {
                                                type: "object";
                                                properties: {
                                                    user: {
                                                        type: string;
                                                        properties: {
                                                            id: {
                                                                type: string;
                                                            };
                                                            name: {
                                                                type: string;
                                                            };
                                                            email: {
                                                                type: string;
                                                            };
                                                            image: {
                                                                type: string;
                                                            };
                                                            emailVerified: {
                                                                type: string;
                                                            };
                                                        };
                                                        required: string[];
                                                    };
                                                    data: {
                                                        type: string;
                                                        properties: {};
                                                        additionalProperties: boolean;
                                                    };
                                                };
                                                required: string[];
                                                additionalProperties: boolean;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                    body: zod.ZodObject<{
                        accountId: zod.ZodString;
                    }, zod_v4_core.$strip>;
                } & {
                    use: any[];
                };
                path: "/account-info";
            };
        } & UnionToIntersection<(O extends undefined ? {
            socialProviders: {
                github: {
                    clientId: string;
                    clientSecret: string;
                };
                google: {
                    clientId: string;
                    clientSecret: string;
                };
            };
            secret: string;
            database: ((options: BetterAuthOptions) => Adapter) | {
                db: Kysely<unknown>;
                type: "postgres";
            } | {
                db: Kysely<unknown>;
                type: "mysql";
            } | undefined;
            emailAndPassword: {
                enabled: true;
            };
            rateLimit: {
                enabled: false;
            };
            advanced: {
                cookies: {};
            };
        } : O & {
            socialProviders: {
                github: {
                    clientId: string;
                    clientSecret: string;
                };
                google: {
                    clientId: string;
                    clientSecret: string;
                };
            };
            secret: string;
            database: ((options: BetterAuthOptions) => Adapter) | {
                db: Kysely<unknown>;
                type: "postgres";
            } | {
                db: Kysely<unknown>;
                type: "mysql";
            } | undefined;
            emailAndPassword: {
                enabled: true;
            };
            rateLimit: {
                enabled: false;
            };
            advanced: {
                cookies: {};
            };
        })["plugins"] extends (infer T)[] ? T extends BetterAuthPlugin ? T extends {
            endpoints: infer E;
        } ? E : {} : {} : {}>>;
        options: O extends undefined ? {
            socialProviders: {
                github: {
                    clientId: string;
                    clientSecret: string;
                };
                google: {
                    clientId: string;
                    clientSecret: string;
                };
            };
            secret: string;
            database: ((options: BetterAuthOptions) => Adapter) | {
                db: Kysely<unknown>;
                type: "postgres";
            } | {
                db: Kysely<unknown>;
                type: "mysql";
            } | undefined;
            emailAndPassword: {
                enabled: true;
            };
            rateLimit: {
                enabled: false;
            };
            advanced: {
                cookies: {};
            };
        } : O & {
            socialProviders: {
                github: {
                    clientId: string;
                    clientSecret: string;
                };
                google: {
                    clientId: string;
                    clientSecret: string;
                };
            };
            secret: string;
            database: ((options: BetterAuthOptions) => Adapter) | {
                db: Kysely<unknown>;
                type: "postgres";
            } | {
                db: Kysely<unknown>;
                type: "mysql";
            } | undefined;
            emailAndPassword: {
                enabled: true;
            };
            rateLimit: {
                enabled: false;
            };
            advanced: {
                cookies: {};
            };
        };
        $context: Promise<AuthContext>;
        $Infer: {
            Session: {
                session: UnionToIntersection<StripEmptyObjects<{
                    id: string;
                    userId: string;
                    expiresAt: Date;
                    createdAt: Date;
                    updatedAt: Date;
                    token: string;
                    ipAddress?: string | null | undefined;
                    userAgent?: string | null | undefined;
                } & ((O extends undefined ? {
                    socialProviders: {
                        github: {
                            clientId: string;
                            clientSecret: string;
                        };
                        google: {
                            clientId: string;
                            clientSecret: string;
                        };
                    };
                    secret: string;
                    database: ((options: BetterAuthOptions) => Adapter) | {
                        db: Kysely<unknown>;
                        type: "postgres";
                    } | {
                        db: Kysely<unknown>;
                        type: "mysql";
                    } | undefined;
                    emailAndPassword: {
                        enabled: true;
                    };
                    rateLimit: {
                        enabled: false;
                    };
                    advanced: {
                        cookies: {};
                    };
                } : O & {
                    socialProviders: {
                        github: {
                            clientId: string;
                            clientSecret: string;
                        };
                        google: {
                            clientId: string;
                            clientSecret: string;
                        };
                    };
                    secret: string;
                    database: ((options: BetterAuthOptions) => Adapter) | {
                        db: Kysely<unknown>;
                        type: "postgres";
                    } | {
                        db: Kysely<unknown>;
                        type: "mysql";
                    } | undefined;
                    emailAndPassword: {
                        enabled: true;
                    };
                    rateLimit: {
                        enabled: false;
                    };
                    advanced: {
                        cookies: {};
                    };
                }) extends infer T_2 ? T_2 extends (O extends undefined ? {
                    socialProviders: {
                        github: {
                            clientId: string;
                            clientSecret: string;
                        };
                        google: {
                            clientId: string;
                            clientSecret: string;
                        };
                    };
                    secret: string;
                    database: ((options: BetterAuthOptions) => Adapter) | {
                        db: Kysely<unknown>;
                        type: "postgres";
                    } | {
                        db: Kysely<unknown>;
                        type: "mysql";
                    } | undefined;
                    emailAndPassword: {
                        enabled: true;
                    };
                    rateLimit: {
                        enabled: false;
                    };
                    advanced: {
                        cookies: {};
                    };
                } : O & {
                    socialProviders: {
                        github: {
                            clientId: string;
                            clientSecret: string;
                        };
                        google: {
                            clientId: string;
                            clientSecret: string;
                        };
                    };
                    secret: string;
                    database: ((options: BetterAuthOptions) => Adapter) | {
                        db: Kysely<unknown>;
                        type: "postgres";
                    } | {
                        db: Kysely<unknown>;
                        type: "mysql";
                    } | undefined;
                    emailAndPassword: {
                        enabled: true;
                    };
                    rateLimit: {
                        enabled: false;
                    };
                    advanced: {
                        cookies: {};
                    };
                }) ? T_2 extends BetterAuthOptions ? AdditionalSessionFieldsOutput<T_2> : T_2 extends Auth ? AdditionalSessionFieldsOutput<T_2["options"]> : {} : never : never)>> extends infer T_1 ? { [K in keyof T_1]: T_1[K] extends (...args: any[]) => any ? T_1[K] : T_1[K] extends object ? T_1[K] extends any[] ? T_1[K] : T_1[K] extends Date ? T_1[K] : T_1[K] extends infer T_2 ? { [K_2 in keyof T_2]: T_2[K_2] extends (...args: any[]) => any ? T_2[K_2] : T_2[K_2] extends object ? T_2[K_2] extends any[] ? T_2[K_2] : T_2[K_2] extends Date ? T_2[K_2] : T_2[K_2] extends infer T_3 ? { [K_3 in keyof T_3]: T_3[K_3] extends (...args: any[]) => any ? T_3[K_3] : T_3[K_3] extends object ? T_3[K_3] extends any[] ? T_3[K_3] : T_3[K_3] extends Date ? T_3[K_3] : T_3[K_3] extends infer T_4 ? { [K_4 in keyof T_4]: T_4[K_4] extends (...args: any[]) => any ? T_4[K_4] : T_4[K_4] extends object ? T_4[K_4] extends any[] ? T_4[K_4] : T_4[K_4] extends Date ? T_4[K_4] : T_4[K_4] extends infer T_5 ? { [K_5 in keyof T_5]: T_5[K_5] extends (...args: any[]) => any ? T_5[K_5] : T_5[K_5] extends object ? T_5[K_5] extends any[] ? T_5[K_5] : T_5[K_5] extends Date ? T_5[K_5] : T_5[K_5] extends infer T_6 ? { [K_6 in keyof T_6]: T_6[K_6] extends (...args: any[]) => any ? T_6[K_6] : T_6[K_6] extends object ? T_6[K_6] extends any[] ? T_6[K_6] : T_6[K_6] extends Date ? T_6[K_6] : T_6[K_6] extends infer T_7 ? { [K_7 in keyof T_7]: T_7[K_7] extends (...args: any[]) => any ? T_7[K_7] : T_7[K_7] extends object ? T_7[K_7] extends any[] ? T_7[K_7] : T_7[K_7] extends Date ? T_7[K_7] : T_7[K_7] extends infer T_8 ? { [K_8 in keyof T_8]: T_8[K_8] extends (...args: any[]) => any ? T_8[K_8] : T_8[K_8] extends object ? T_8[K_8] extends any[] ? T_8[K_8] : T_8[K_8] extends Date ? T_8[K_8] : T_8[K_8] extends infer T_9 ? { [K_9 in keyof T_9]: T_9[K_9] extends (...args: any[]) => any ? T_9[K_9] : T_9[K_9] extends object ? T_9[K_9] extends any[] ? T_9[K_9] : T_9[K_9] extends Date ? T_9[K_9] : T_9[K_9] extends infer T_10 ? { [K_10 in keyof T_10]: T_10[K_10] extends (...args: any[]) => any ? T_10[K_10] : T_10[K_10] extends object ? T_10[K_10] extends any[] ? T_10[K_10] : T_10[K_10] extends Date ? T_10[K_10] : T_10[K_10] extends infer T_11 ? { [K_11 in keyof T_11]: T_11[K_11] extends (...args: any[]) => any ? T_11[K_11] : T_11[K_11] extends object ? T_11[K_11] extends any[] ? T_11[K_11] : T_11[K_11] extends Date ? T_11[K_11] : /*elided*/ any : T_11[K_11]; } : never : T_10[K_10]; } : never : T_9[K_9]; } : never : T_8[K_8]; } : never : T_7[K_7]; } : never : T_6[K_6]; } : never : T_5[K_5]; } : never : T_4[K_4]; } : never : T_3[K_3]; } : never : T_2[K_2]; } : never : T_1[K]; } : never;
                user: UnionToIntersection<StripEmptyObjects<{
                    id: string;
                    email: string;
                    emailVerified: boolean;
                    name: string;
                    createdAt: Date;
                    updatedAt: Date;
                    image?: string | null | undefined;
                } & ((O extends undefined ? {
                    socialProviders: {
                        github: {
                            clientId: string;
                            clientSecret: string;
                        };
                        google: {
                            clientId: string;
                            clientSecret: string;
                        };
                    };
                    secret: string;
                    database: ((options: BetterAuthOptions) => Adapter) | {
                        db: Kysely<unknown>;
                        type: "postgres";
                    } | {
                        db: Kysely<unknown>;
                        type: "mysql";
                    } | undefined;
                    emailAndPassword: {
                        enabled: true;
                    };
                    rateLimit: {
                        enabled: false;
                    };
                    advanced: {
                        cookies: {};
                    };
                } : O & {
                    socialProviders: {
                        github: {
                            clientId: string;
                            clientSecret: string;
                        };
                        google: {
                            clientId: string;
                            clientSecret: string;
                        };
                    };
                    secret: string;
                    database: ((options: BetterAuthOptions) => Adapter) | {
                        db: Kysely<unknown>;
                        type: "postgres";
                    } | {
                        db: Kysely<unknown>;
                        type: "mysql";
                    } | undefined;
                    emailAndPassword: {
                        enabled: true;
                    };
                    rateLimit: {
                        enabled: false;
                    };
                    advanced: {
                        cookies: {};
                    };
                }) extends infer T_4 ? T_4 extends (O extends undefined ? {
                    socialProviders: {
                        github: {
                            clientId: string;
                            clientSecret: string;
                        };
                        google: {
                            clientId: string;
                            clientSecret: string;
                        };
                    };
                    secret: string;
                    database: ((options: BetterAuthOptions) => Adapter) | {
                        db: Kysely<unknown>;
                        type: "postgres";
                    } | {
                        db: Kysely<unknown>;
                        type: "mysql";
                    } | undefined;
                    emailAndPassword: {
                        enabled: true;
                    };
                    rateLimit: {
                        enabled: false;
                    };
                    advanced: {
                        cookies: {};
                    };
                } : O & {
                    socialProviders: {
                        github: {
                            clientId: string;
                            clientSecret: string;
                        };
                        google: {
                            clientId: string;
                            clientSecret: string;
                        };
                    };
                    secret: string;
                    database: ((options: BetterAuthOptions) => Adapter) | {
                        db: Kysely<unknown>;
                        type: "postgres";
                    } | {
                        db: Kysely<unknown>;
                        type: "mysql";
                    } | undefined;
                    emailAndPassword: {
                        enabled: true;
                    };
                    rateLimit: {
                        enabled: false;
                    };
                    advanced: {
                        cookies: {};
                    };
                }) ? T_4 extends BetterAuthOptions ? AdditionalUserFieldsOutput<T_4> : T_4 extends Auth ? AdditionalUserFieldsOutput<T_4["options"]> : {} : never : never)>> extends infer T_3 ? { [K_1 in keyof T_3]: T_3[K_1] extends (...args: any[]) => any ? T_3[K_1] : T_3[K_1] extends object ? T_3[K_1] extends any[] ? T_3[K_1] : T_3[K_1] extends Date ? T_3[K_1] : T_3[K_1] extends infer T_4 ? { [K_3 in keyof T_4]: T_4[K_3] extends (...args: any[]) => any ? T_4[K_3] : T_4[K_3] extends object ? T_4[K_3] extends any[] ? T_4[K_3] : T_4[K_3] extends Date ? T_4[K_3] : T_4[K_3] extends infer T_5 ? { [K_4 in keyof T_5]: T_5[K_4] extends (...args: any[]) => any ? T_5[K_4] : T_5[K_4] extends object ? T_5[K_4] extends any[] ? T_5[K_4] : T_5[K_4] extends Date ? T_5[K_4] : T_5[K_4] extends infer T_6 ? { [K_5 in keyof T_6]: T_6[K_5] extends (...args: any[]) => any ? T_6[K_5] : T_6[K_5] extends object ? T_6[K_5] extends any[] ? T_6[K_5] : T_6[K_5] extends Date ? T_6[K_5] : T_6[K_5] extends infer T_7 ? { [K_6 in keyof T_7]: T_7[K_6] extends (...args: any[]) => any ? T_7[K_6] : T_7[K_6] extends object ? T_7[K_6] extends any[] ? T_7[K_6] : T_7[K_6] extends Date ? T_7[K_6] : T_7[K_6] extends infer T_8 ? { [K_7 in keyof T_8]: T_8[K_7] extends (...args: any[]) => any ? T_8[K_7] : T_8[K_7] extends object ? T_8[K_7] extends any[] ? T_8[K_7] : T_8[K_7] extends Date ? T_8[K_7] : T_8[K_7] extends infer T_9 ? { [K_8 in keyof T_9]: T_9[K_8] extends (...args: any[]) => any ? T_9[K_8] : T_9[K_8] extends object ? T_9[K_8] extends any[] ? T_9[K_8] : T_9[K_8] extends Date ? T_9[K_8] : T_9[K_8] extends infer T_10 ? { [K_9 in keyof T_10]: T_10[K_9] extends (...args: any[]) => any ? T_10[K_9] : T_10[K_9] extends object ? T_10[K_9] extends any[] ? T_10[K_9] : T_10[K_9] extends Date ? T_10[K_9] : T_10[K_9] extends infer T_11 ? { [K_10 in keyof T_11]: T_11[K_10] extends (...args: any[]) => any ? T_11[K_10] : T_11[K_10] extends object ? T_11[K_10] extends any[] ? T_11[K_10] : T_11[K_10] extends Date ? T_11[K_10] : T_11[K_10] extends infer T_12 ? { [K_11 in keyof T_12]: T_12[K_11] extends (...args: any[]) => any ? T_12[K_11] : T_12[K_11] extends object ? T_12[K_11] extends any[] ? T_12[K_11] : T_12[K_11] extends Date ? T_12[K_11] : T_12[K_11] extends infer T_13 ? { [K_12 in keyof T_13]: T_13[K_12] extends (...args: any[]) => any ? T_13[K_12] : T_13[K_12] extends object ? T_13[K_12] extends any[] ? T_13[K_12] : T_13[K_12] extends Date ? T_13[K_12] : /*elided*/ any : T_13[K_12]; } : never : T_12[K_11]; } : never : T_11[K_10]; } : never : T_10[K_9]; } : never : T_9[K_8]; } : never : T_8[K_7]; } : never : T_7[K_6]; } : never : T_6[K_5]; } : never : T_5[K_4]; } : never : T_4[K_3]; } : never : T_3[K_1]; } : never;
            };
        } & InferPluginTypes<O extends undefined ? {
            socialProviders: {
                github: {
                    clientId: string;
                    clientSecret: string;
                };
                google: {
                    clientId: string;
                    clientSecret: string;
                };
            };
            secret: string;
            database: ((options: BetterAuthOptions) => Adapter) | {
                db: Kysely<unknown>;
                type: "postgres";
            } | {
                db: Kysely<unknown>;
                type: "mysql";
            } | undefined;
            emailAndPassword: {
                enabled: true;
            };
            rateLimit: {
                enabled: false;
            };
            advanced: {
                cookies: {};
            };
        } : O & {
            socialProviders: {
                github: {
                    clientId: string;
                    clientSecret: string;
                };
                google: {
                    clientId: string;
                    clientSecret: string;
                };
            };
            secret: string;
            database: ((options: BetterAuthOptions) => Adapter) | {
                db: Kysely<unknown>;
                type: "postgres";
            } | {
                db: Kysely<unknown>;
                type: "mysql";
            } | undefined;
            emailAndPassword: {
                enabled: true;
            };
            rateLimit: {
                enabled: false;
            };
            advanced: {
                cookies: {};
            };
        }>;
        $ERROR_CODES: InferPluginErrorCodes<O extends undefined ? {
            socialProviders: {
                github: {
                    clientId: string;
                    clientSecret: string;
                };
                google: {
                    clientId: string;
                    clientSecret: string;
                };
            };
            secret: string;
            database: ((options: BetterAuthOptions) => Adapter) | {
                db: Kysely<unknown>;
                type: "postgres";
            } | {
                db: Kysely<unknown>;
                type: "mysql";
            } | undefined;
            emailAndPassword: {
                enabled: true;
            };
            rateLimit: {
                enabled: false;
            };
            advanced: {
                cookies: {};
            };
        } : O & {
            socialProviders: {
                github: {
                    clientId: string;
                    clientSecret: string;
                };
                google: {
                    clientId: string;
                    clientSecret: string;
                };
            };
            secret: string;
            database: ((options: BetterAuthOptions) => Adapter) | {
                db: Kysely<unknown>;
                type: "postgres";
            } | {
                db: Kysely<unknown>;
                type: "mysql";
            } | undefined;
            emailAndPassword: {
                enabled: true;
            };
            rateLimit: {
                enabled: false;
            };
            advanced: {
                cookies: {};
            };
        }> & {
            USER_NOT_FOUND: string;
            FAILED_TO_CREATE_USER: string;
            FAILED_TO_CREATE_SESSION: string;
            FAILED_TO_UPDATE_USER: string;
            FAILED_TO_GET_SESSION: string;
            INVALID_PASSWORD: string;
            INVALID_EMAIL: string;
            INVALID_EMAIL_OR_PASSWORD: string;
            SOCIAL_ACCOUNT_ALREADY_LINKED: string;
            PROVIDER_NOT_FOUND: string;
            INVALID_TOKEN: string;
            ID_TOKEN_NOT_SUPPORTED: string;
            FAILED_TO_GET_USER_INFO: string;
            USER_EMAIL_NOT_FOUND: string;
            EMAIL_NOT_VERIFIED: string;
            PASSWORD_TOO_SHORT: string;
            PASSWORD_TOO_LONG: string;
            USER_ALREADY_EXISTS: string;
            EMAIL_CAN_NOT_BE_UPDATED: string;
            CREDENTIAL_ACCOUNT_NOT_FOUND: string;
            SESSION_EXPIRED: string;
            FAILED_TO_UNLINK_LAST_ACCOUNT: string;
            ACCOUNT_NOT_FOUND: string;
            USER_ALREADY_HAS_PASSWORD: string;
        };
    };
    client: UnionToIntersection<((C extends undefined ? {} : C) & {
        baseURL: string | undefined;
        fetchOptions: {
            customFetchImpl: (url: string | URL | Request, init?: RequestInit) => Promise<Response>;
        };
    })["plugins"] extends (infer Plugin)[] ? Plugin extends BetterAuthClientPlugin ? Plugin["getAtoms"] extends (fetch: any) => infer Atoms ? Atoms extends Record<string, any> ? { [key in keyof Atoms as IsSignal<key> extends true ? never : key extends string ? `use${Capitalize<key>}` : never]: Atoms[key]; } : {} : {} : {} : {}> & UnionToIntersection<InferRoute<((C extends undefined ? {} : C) & {
        baseURL: string | undefined;
        fetchOptions: {
            customFetchImpl: (url: string | URL | Request, init?: RequestInit) => Promise<Response>;
        };
    })["plugins"] extends any[] ? FilterActions<{
        ok: {
            <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0?: ({
                body?: undefined;
            } & {
                method?: "GET" | undefined;
            } & {
                query?: Record<string, any> | undefined;
            } & {
                params?: Record<string, any>;
            } & {
                request?: Request;
            } & {
                headers?: HeadersInit;
            } & {
                asResponse?: boolean;
                returnHeaders?: boolean;
                use?: better_call.Middleware[];
                path?: string;
            } & {
                asResponse?: AsResponse | undefined;
                returnHeaders?: ReturnHeaders | undefined;
            }) | undefined): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                headers: Headers;
                response: {
                    ok: boolean;
                };
            } : {
                ok: boolean;
            }>;
            options: {
                method: "GET";
                metadata: {
                    openapi: {
                        description: string;
                        responses: {
                            "200": {
                                description: string;
                                content: {
                                    "application/json": {
                                        schema: {
                                            type: "object";
                                            properties: {
                                                ok: {
                                                    type: string;
                                                    description: string;
                                                };
                                            };
                                            required: string[];
                                        };
                                    };
                                };
                            };
                        };
                    };
                    isAction: false;
                };
            } & {
                use: any[];
            };
            path: "/ok";
        };
        error: {
            <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0?: ({
                body?: undefined;
            } & {
                method?: "GET" | undefined;
            } & {
                query?: Record<string, any> | undefined;
            } & {
                params?: Record<string, any>;
            } & {
                request?: Request;
            } & {
                headers?: HeadersInit;
            } & {
                asResponse?: boolean;
                returnHeaders?: boolean;
                use?: better_call.Middleware[];
                path?: string;
            } & {
                asResponse?: AsResponse | undefined;
                returnHeaders?: ReturnHeaders | undefined;
            }) | undefined): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                headers: Headers;
                response: Response;
            } : Response>;
            options: {
                method: "GET";
                metadata: {
                    openapi: {
                        description: string;
                        responses: {
                            "200": {
                                description: string;
                                content: {
                                    "text/html": {
                                        schema: {
                                            type: "string";
                                            description: string;
                                        };
                                    };
                                };
                            };
                        };
                    };
                    isAction: false;
                };
            } & {
                use: any[];
            };
            path: "/error";
        };
        signInSocial: {
            <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                body: {
                    provider: unknown;
                    callbackURL?: string | undefined;
                    newUserCallbackURL?: string | undefined;
                    errorCallbackURL?: string | undefined;
                    disableRedirect?: boolean | undefined;
                    idToken?: {
                        token: string;
                        nonce?: string | undefined;
                        accessToken?: string | undefined;
                        refreshToken?: string | undefined;
                        expiresAt?: number | undefined;
                    } | undefined;
                    scopes?: string[] | undefined;
                    requestSignUp?: boolean | undefined;
                    loginHint?: string | undefined;
                };
            } & {
                method?: "POST" | undefined;
            } & {
                query?: Record<string, any> | undefined;
            } & {
                params?: Record<string, any>;
            } & {
                request?: Request;
            } & {
                headers?: HeadersInit;
            } & {
                asResponse?: boolean;
                returnHeaders?: boolean;
                use?: better_call.Middleware[];
                path?: string;
            } & {
                asResponse?: AsResponse | undefined;
                returnHeaders?: ReturnHeaders | undefined;
            }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                headers: Headers;
                response: {
                    redirect: boolean;
                    token: string;
                    url: undefined;
                    user: {
                        id: string;
                        email: string;
                        name: string;
                        image: string | null | undefined;
                        emailVerified: boolean;
                        createdAt: Date;
                        updatedAt: Date;
                    };
                } | {
                    url: string;
                    redirect: boolean;
                };
            } : {
                redirect: boolean;
                token: string;
                url: undefined;
                user: {
                    id: string;
                    email: string;
                    name: string;
                    image: string | null | undefined;
                    emailVerified: boolean;
                    createdAt: Date;
                    updatedAt: Date;
                };
            } | {
                url: string;
                redirect: boolean;
            }>;
            options: {
                method: "POST";
                body: zod.ZodObject<{
                    callbackURL: zod.ZodOptional<zod.ZodString>;
                    newUserCallbackURL: zod.ZodOptional<zod.ZodString>;
                    errorCallbackURL: zod.ZodOptional<zod.ZodString>;
                    provider: zod.ZodType<"github" | "apple" | "discord" | "facebook" | "microsoft" | "google" | "huggingface" | "slack" | "spotify" | "twitch" | "twitter" | "dropbox" | "kick" | "linear" | "linkedin" | "gitlab" | "tiktok" | "reddit" | "roblox" | "vk" | "zoom" | "notion" | (string & {}), unknown, zod_v4_core.$ZodTypeInternals<"github" | "apple" | "discord" | "facebook" | "microsoft" | "google" | "huggingface" | "slack" | "spotify" | "twitch" | "twitter" | "dropbox" | "kick" | "linear" | "linkedin" | "gitlab" | "tiktok" | "reddit" | "roblox" | "vk" | "zoom" | "notion" | (string & {}), unknown>>;
                    disableRedirect: zod.ZodOptional<zod.ZodBoolean>;
                    idToken: zod.ZodOptional<zod.ZodObject<{
                        token: zod.ZodString;
                        nonce: zod.ZodOptional<zod.ZodString>;
                        accessToken: zod.ZodOptional<zod.ZodString>;
                        refreshToken: zod.ZodOptional<zod.ZodString>;
                        expiresAt: zod.ZodOptional<zod.ZodNumber>;
                    }, zod_v4_core.$strip>>;
                    scopes: zod.ZodOptional<zod.ZodArray<zod.ZodString>>;
                    requestSignUp: zod.ZodOptional<zod.ZodBoolean>;
                    loginHint: zod.ZodOptional<zod.ZodString>;
                }, zod_v4_core.$strip>;
                metadata: {
                    openapi: {
                        description: string;
                        operationId: string;
                        responses: {
                            "200": {
                                description: string;
                                content: {
                                    "application/json": {
                                        schema: {
                                            type: "object";
                                            description: string;
                                            properties: {
                                                redirect: {
                                                    type: string;
                                                    enum: boolean[];
                                                };
                                                token: {
                                                    type: string;
                                                    description: string;
                                                    url: {
                                                        type: string;
                                                        nullable: boolean;
                                                    };
                                                    user: {
                                                        type: string;
                                                        properties: {
                                                            id: {
                                                                type: string;
                                                            };
                                                            email: {
                                                                type: string;
                                                            };
                                                            name: {
                                                                type: string;
                                                                nullable: boolean;
                                                            };
                                                            image: {
                                                                type: string;
                                                                nullable: boolean;
                                                            };
                                                            emailVerified: {
                                                                type: string;
                                                            };
                                                            createdAt: {
                                                                type: string;
                                                                format: string;
                                                            };
                                                            updatedAt: {
                                                                type: string;
                                                                format: string;
                                                            };
                                                        };
                                                        required: string[];
                                                    };
                                                };
                                            };
                                            required: string[];
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            } & {
                use: any[];
            };
            path: "/sign-in/social";
        };
        callbackOAuth: {
            <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                body?: {
                    code?: string | undefined;
                    error?: string | undefined;
                    device_id?: string | undefined;
                    error_description?: string | undefined;
                    state?: string | undefined;
                    user?: string | undefined;
                } | undefined;
            } & {
                method: "GET" | "POST";
            } & {
                query?: {
                    code?: string | undefined;
                    error?: string | undefined;
                    device_id?: string | undefined;
                    error_description?: string | undefined;
                    state?: string | undefined;
                    user?: string | undefined;
                } | undefined;
            } & {
                params: {
                    id: string;
                };
            } & {
                request?: Request;
            } & {
                headers?: HeadersInit;
            } & {
                asResponse?: boolean;
                returnHeaders?: boolean;
                use?: better_call.Middleware[];
                path?: string;
            } & {
                asResponse?: AsResponse | undefined;
                returnHeaders?: ReturnHeaders | undefined;
            }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                headers: Headers;
                response: void;
            } : void>;
            options: {
                method: ("GET" | "POST")[];
                body: zod.ZodOptional<zod.ZodObject<{
                    code: zod.ZodOptional<zod.ZodString>;
                    error: zod.ZodOptional<zod.ZodString>;
                    device_id: zod.ZodOptional<zod.ZodString>;
                    error_description: zod.ZodOptional<zod.ZodString>;
                    state: zod.ZodOptional<zod.ZodString>;
                    user: zod.ZodOptional<zod.ZodString>;
                }, zod_v4_core.$strip>>;
                query: zod.ZodOptional<zod.ZodObject<{
                    code: zod.ZodOptional<zod.ZodString>;
                    error: zod.ZodOptional<zod.ZodString>;
                    device_id: zod.ZodOptional<zod.ZodString>;
                    error_description: zod.ZodOptional<zod.ZodString>;
                    state: zod.ZodOptional<zod.ZodString>;
                    user: zod.ZodOptional<zod.ZodString>;
                }, zod_v4_core.$strip>>;
                metadata: {
                    isAction: false;
                };
            } & {
                use: any[];
            };
            path: "/callback/:id";
        };
        getSession: {
            <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                body?: undefined;
            } & {
                method?: "GET" | undefined;
            } & {
                query?: {
                    disableCookieCache?: unknown;
                    disableRefresh?: unknown;
                } | undefined;
            } & {
                params?: Record<string, any>;
            } & {
                request?: Request;
            } & {
                headers: HeadersInit;
            } & {
                asResponse?: boolean;
                returnHeaders?: boolean;
                use?: better_call.Middleware[];
                path?: string;
            } & {
                asResponse?: AsResponse | undefined;
                returnHeaders?: ReturnHeaders | undefined;
            }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                headers: Headers;
                response: {
                    session: {
                        id: string;
                        userId: string;
                        expiresAt: Date;
                        createdAt: Date;
                        updatedAt: Date;
                        token: string;
                        ipAddress?: string | null | undefined;
                        userAgent?: string | null | undefined;
                    };
                    user: {
                        id: string;
                        email: string;
                        emailVerified: boolean;
                        name: string;
                        createdAt: Date;
                        updatedAt: Date;
                        image?: string | null | undefined;
                    };
                } | null;
            } : {
                session: {
                    id: string;
                    userId: string;
                    expiresAt: Date;
                    createdAt: Date;
                    updatedAt: Date;
                    token: string;
                    ipAddress?: string | null | undefined;
                    userAgent?: string | null | undefined;
                };
                user: {
                    id: string;
                    email: string;
                    emailVerified: boolean;
                    name: string;
                    createdAt: Date;
                    updatedAt: Date;
                    image?: string | null | undefined;
                };
            } | null>;
            options: {
                method: "GET";
                query: zod.ZodOptional<zod.ZodObject<{
                    disableCookieCache: zod.ZodOptional<zod.ZodCoercedBoolean<unknown>>;
                    disableRefresh: zod.ZodOptional<zod.ZodCoercedBoolean<unknown>>;
                }, zod_v4_core.$strip>>;
                requireHeaders: true;
                metadata: {
                    openapi: {
                        description: string;
                        responses: {
                            "200": {
                                description: string;
                                content: {
                                    "application/json": {
                                        schema: {
                                            type: "object";
                                            properties: {
                                                session: {
                                                    $ref: string;
                                                };
                                                user: {
                                                    $ref: string;
                                                };
                                            };
                                            required: string[];
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            } & {
                use: any[];
            };
            path: "/get-session";
        };
        signOut: {
            <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                body?: undefined;
            } & {
                method?: "POST" | undefined;
            } & {
                query?: Record<string, any> | undefined;
            } & {
                params?: Record<string, any>;
            } & {
                request?: Request;
            } & {
                headers: HeadersInit;
            } & {
                asResponse?: boolean;
                returnHeaders?: boolean;
                use?: better_call.Middleware[];
                path?: string;
            } & {
                asResponse?: AsResponse | undefined;
                returnHeaders?: ReturnHeaders | undefined;
            }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                headers: Headers;
                response: {
                    success: boolean;
                };
            } : {
                success: boolean;
            }>;
            options: {
                method: "POST";
                requireHeaders: true;
                metadata: {
                    openapi: {
                        description: string;
                        responses: {
                            "200": {
                                description: string;
                                content: {
                                    "application/json": {
                                        schema: {
                                            type: "object";
                                            properties: {
                                                success: {
                                                    type: string;
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            } & {
                use: any[];
            };
            path: "/sign-out";
        };
        signUpEmail: {
            <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                body: {
                    name: string;
                    email: string;
                    password: string;
                    image?: string;
                    callbackURL?: string;
                    rememberMe?: boolean;
                };
            } & {
                method?: "POST" | undefined;
            } & {
                query?: Record<string, any> | undefined;
            } & {
                params?: Record<string, any>;
            } & {
                request?: Request;
            } & {
                headers?: HeadersInit;
            } & {
                asResponse?: boolean;
                returnHeaders?: boolean;
                use?: better_call.Middleware[];
                path?: string;
            } & {
                asResponse?: AsResponse | undefined;
                returnHeaders?: ReturnHeaders | undefined;
            }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                headers: Headers;
                response: {
                    token: null;
                    user: {
                        id: string;
                        email: string;
                        name: string;
                        image: string | null | undefined;
                        emailVerified: boolean;
                        createdAt: Date;
                        updatedAt: Date;
                    };
                } | {
                    token: string;
                    user: {
                        id: string;
                        email: string;
                        name: string;
                        image: string | null | undefined;
                        emailVerified: boolean;
                        createdAt: Date;
                        updatedAt: Date;
                    };
                };
            } : {
                token: null;
                user: {
                    id: string;
                    email: string;
                    name: string;
                    image: string | null | undefined;
                    emailVerified: boolean;
                    createdAt: Date;
                    updatedAt: Date;
                };
            } | {
                token: string;
                user: {
                    id: string;
                    email: string;
                    name: string;
                    image: string | null | undefined;
                    emailVerified: boolean;
                    createdAt: Date;
                    updatedAt: Date;
                };
            }>;
            options: {
                method: "POST";
                body: zod.ZodRecord<zod.ZodString, zod.ZodAny>;
                metadata: {
                    $Infer: {
                        body: {
                            name: string;
                            email: string;
                            password: string;
                            image?: string;
                            callbackURL?: string;
                            rememberMe?: boolean;
                        };
                    };
                    openapi: {
                        description: string;
                        requestBody: {
                            content: {
                                "application/json": {
                                    schema: {
                                        type: "object";
                                        properties: {
                                            name: {
                                                type: string;
                                                description: string;
                                            };
                                            email: {
                                                type: string;
                                                description: string;
                                            };
                                            password: {
                                                type: string;
                                                description: string;
                                            };
                                            image: {
                                                type: string;
                                                description: string;
                                            };
                                            callbackURL: {
                                                type: string;
                                                description: string;
                                            };
                                            rememberMe: {
                                                type: string;
                                                description: string;
                                            };
                                        };
                                        required: string[];
                                    };
                                };
                            };
                        };
                        responses: {
                            "200": {
                                description: string;
                                content: {
                                    "application/json": {
                                        schema: {
                                            type: "object";
                                            properties: {
                                                token: {
                                                    type: string;
                                                    nullable: boolean;
                                                    description: string;
                                                };
                                                user: {
                                                    type: string;
                                                    properties: {
                                                        id: {
                                                            type: string;
                                                            description: string;
                                                        };
                                                        email: {
                                                            type: string;
                                                            format: string;
                                                            description: string;
                                                        };
                                                        name: {
                                                            type: string;
                                                            description: string;
                                                        };
                                                        image: {
                                                            type: string;
                                                            format: string;
                                                            nullable: boolean;
                                                            description: string;
                                                        };
                                                        emailVerified: {
                                                            type: string;
                                                            description: string;
                                                        };
                                                        createdAt: {
                                                            type: string;
                                                            format: string;
                                                            description: string;
                                                        };
                                                        updatedAt: {
                                                            type: string;
                                                            format: string;
                                                            description: string;
                                                        };
                                                    };
                                                    required: string[];
                                                };
                                            };
                                            required: string[];
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            } & {
                use: any[];
            };
            path: "/sign-up/email";
        };
        signInEmail: {
            <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                body: {
                    email: string;
                    password: string;
                    callbackURL?: string | undefined;
                    rememberMe?: boolean | undefined;
                };
            } & {
                method?: "POST" | undefined;
            } & {
                query?: Record<string, any> | undefined;
            } & {
                params?: Record<string, any>;
            } & {
                request?: Request;
            } & {
                headers?: HeadersInit;
            } & {
                asResponse?: boolean;
                returnHeaders?: boolean;
                use?: better_call.Middleware[];
                path?: string;
            } & {
                asResponse?: AsResponse | undefined;
                returnHeaders?: ReturnHeaders | undefined;
            }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                headers: Headers;
                response: {
                    redirect: boolean;
                    token: string;
                    url: string | undefined;
                    user: {
                        id: string;
                        email: string;
                        name: string;
                        image: string | null | undefined;
                        emailVerified: boolean;
                        createdAt: Date;
                        updatedAt: Date;
                    };
                };
            } : {
                redirect: boolean;
                token: string;
                url: string | undefined;
                user: {
                    id: string;
                    email: string;
                    name: string;
                    image: string | null | undefined;
                    emailVerified: boolean;
                    createdAt: Date;
                    updatedAt: Date;
                };
            }>;
            options: {
                method: "POST";
                body: zod.ZodObject<{
                    email: zod.ZodString;
                    password: zod.ZodString;
                    callbackURL: zod.ZodOptional<zod.ZodString>;
                    rememberMe: zod.ZodOptional<zod.ZodDefault<zod.ZodBoolean>>;
                }, zod_v4_core.$strip>;
                metadata: {
                    openapi: {
                        description: string;
                        responses: {
                            "200": {
                                description: string;
                                content: {
                                    "application/json": {
                                        schema: {
                                            type: "object";
                                            description: string;
                                            properties: {
                                                redirect: {
                                                    type: string;
                                                    enum: boolean[];
                                                };
                                                token: {
                                                    type: string;
                                                    description: string;
                                                };
                                                url: {
                                                    type: string;
                                                    nullable: boolean;
                                                };
                                                user: {
                                                    type: string;
                                                    properties: {
                                                        id: {
                                                            type: string;
                                                        };
                                                        email: {
                                                            type: string;
                                                        };
                                                        name: {
                                                            type: string;
                                                            nullable: boolean;
                                                        };
                                                        image: {
                                                            type: string;
                                                            nullable: boolean;
                                                        };
                                                        emailVerified: {
                                                            type: string;
                                                        };
                                                        createdAt: {
                                                            type: string;
                                                            format: string;
                                                        };
                                                        updatedAt: {
                                                            type: string;
                                                            format: string;
                                                        };
                                                    };
                                                    required: string[];
                                                };
                                            };
                                            required: string[];
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            } & {
                use: any[];
            };
            path: "/sign-in/email";
        };
        forgetPassword: {
            <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                body: {
                    email: string;
                    redirectTo?: string | undefined;
                };
            } & {
                method?: "POST" | undefined;
            } & {
                query?: Record<string, any> | undefined;
            } & {
                params?: Record<string, any>;
            } & {
                request?: Request;
            } & {
                headers?: HeadersInit;
            } & {
                asResponse?: boolean;
                returnHeaders?: boolean;
                use?: better_call.Middleware[];
                path?: string;
            } & {
                asResponse?: AsResponse | undefined;
                returnHeaders?: ReturnHeaders | undefined;
            }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                headers: Headers;
                response: {
                    status: boolean;
                };
            } : {
                status: boolean;
            }>;
            options: {
                method: "POST";
                body: zod.ZodObject<{
                    email: zod.ZodString;
                    redirectTo: zod.ZodOptional<zod.ZodString>;
                }, zod_v4_core.$strip>;
                metadata: {
                    openapi: {
                        description: string;
                        responses: {
                            "200": {
                                description: string;
                                content: {
                                    "application/json": {
                                        schema: {
                                            type: "object";
                                            properties: {
                                                status: {
                                                    type: string;
                                                };
                                                message: {
                                                    type: string;
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            } & {
                use: any[];
            };
            path: "/forget-password";
        };
        resetPassword: {
            <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                body: {
                    newPassword: string;
                    token?: string | undefined;
                };
            } & {
                method?: "POST" | undefined;
            } & {
                query?: {
                    token?: string | undefined;
                } | undefined;
            } & {
                params?: Record<string, any>;
            } & {
                request?: Request;
            } & {
                headers?: HeadersInit;
            } & {
                asResponse?: boolean;
                returnHeaders?: boolean;
                use?: better_call.Middleware[];
                path?: string;
            } & {
                asResponse?: AsResponse | undefined;
                returnHeaders?: ReturnHeaders | undefined;
            }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                headers: Headers;
                response: {
                    status: boolean;
                };
            } : {
                status: boolean;
            }>;
            options: {
                method: "POST";
                query: zod.ZodOptional<zod.ZodObject<{
                    token: zod.ZodOptional<zod.ZodString>;
                }, zod_v4_core.$strip>>;
                body: zod.ZodObject<{
                    newPassword: zod.ZodString;
                    token: zod.ZodOptional<zod.ZodString>;
                }, zod_v4_core.$strip>;
                metadata: {
                    openapi: {
                        description: string;
                        responses: {
                            "200": {
                                description: string;
                                content: {
                                    "application/json": {
                                        schema: {
                                            type: "object";
                                            properties: {
                                                status: {
                                                    type: string;
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            } & {
                use: any[];
            };
            path: "/reset-password";
        };
        verifyEmail: {
            <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                body?: undefined;
            } & {
                method?: "GET" | undefined;
            } & {
                query: {
                    token: string;
                    callbackURL?: string | undefined;
                };
            } & {
                params?: Record<string, any>;
            } & {
                request?: Request;
            } & {
                headers?: HeadersInit;
            } & {
                asResponse?: boolean;
                returnHeaders?: boolean;
                use?: better_call.Middleware[];
                path?: string;
            } & {
                asResponse?: AsResponse | undefined;
                returnHeaders?: ReturnHeaders | undefined;
            }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                headers: Headers;
                response: void | {
                    status: boolean;
                    user: {
                        id: any;
                        email: any;
                        name: any;
                        image: any;
                        emailVerified: any;
                        createdAt: any;
                        updatedAt: any;
                    };
                } | {
                    status: boolean;
                    user: null;
                };
            } : void | {
                status: boolean;
                user: {
                    id: any;
                    email: any;
                    name: any;
                    image: any;
                    emailVerified: any;
                    createdAt: any;
                    updatedAt: any;
                };
            } | {
                status: boolean;
                user: null;
            }>;
            options: {
                method: "GET";
                query: zod.ZodObject<{
                    token: zod.ZodString;
                    callbackURL: zod.ZodOptional<zod.ZodString>;
                }, zod_v4_core.$strip>;
                use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<void>)[];
                metadata: {
                    openapi: {
                        description: string;
                        parameters: ({
                            name: string;
                            in: "query";
                            description: string;
                            required: true;
                            schema: {
                                type: "string";
                            };
                        } | {
                            name: string;
                            in: "query";
                            description: string;
                            required: false;
                            schema: {
                                type: "string";
                            };
                        })[];
                        responses: {
                            "200": {
                                description: string;
                                content: {
                                    "application/json": {
                                        schema: {
                                            type: "object";
                                            properties: {
                                                user: {
                                                    type: string;
                                                    properties: {
                                                        id: {
                                                            type: string;
                                                            description: string;
                                                        };
                                                        email: {
                                                            type: string;
                                                            description: string;
                                                        };
                                                        name: {
                                                            type: string;
                                                            description: string;
                                                        };
                                                        image: {
                                                            type: string;
                                                            description: string;
                                                        };
                                                        emailVerified: {
                                                            type: string;
                                                            description: string;
                                                        };
                                                        createdAt: {
                                                            type: string;
                                                            description: string;
                                                        };
                                                        updatedAt: {
                                                            type: string;
                                                            description: string;
                                                        };
                                                    };
                                                    required: string[];
                                                };
                                                status: {
                                                    type: string;
                                                    description: string;
                                                };
                                            };
                                            required: string[];
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            } & {
                use: any[];
            };
            path: "/verify-email";
        };
        sendVerificationEmail: {
            <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                body: {
                    email: string;
                    callbackURL?: string | undefined;
                };
            } & {
                method?: "POST" | undefined;
            } & {
                query?: Record<string, any> | undefined;
            } & {
                params?: Record<string, any>;
            } & {
                request?: Request;
            } & {
                headers?: HeadersInit;
            } & {
                asResponse?: boolean;
                returnHeaders?: boolean;
                use?: better_call.Middleware[];
                path?: string;
            } & {
                asResponse?: AsResponse | undefined;
                returnHeaders?: ReturnHeaders | undefined;
            }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                headers: Headers;
                response: {
                    status: boolean;
                };
            } : {
                status: boolean;
            }>;
            options: {
                method: "POST";
                body: zod.ZodObject<{
                    email: zod.ZodEmail;
                    callbackURL: zod.ZodOptional<zod.ZodString>;
                }, zod_v4_core.$strip>;
                metadata: {
                    openapi: {
                        description: string;
                        requestBody: {
                            content: {
                                "application/json": {
                                    schema: {
                                        type: "object";
                                        properties: {
                                            email: {
                                                type: string;
                                                description: string;
                                                example: string;
                                            };
                                            callbackURL: {
                                                type: string;
                                                description: string;
                                                example: string;
                                                nullable: boolean;
                                            };
                                        };
                                        required: string[];
                                    };
                                };
                            };
                        };
                        responses: {
                            "200": {
                                description: string;
                                content: {
                                    "application/json": {
                                        schema: {
                                            type: "object";
                                            properties: {
                                                status: {
                                                    type: string;
                                                    description: string;
                                                    example: boolean;
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                            "400": {
                                description: string;
                                content: {
                                    "application/json": {
                                        schema: {
                                            type: "object";
                                            properties: {
                                                message: {
                                                    type: string;
                                                    description: string;
                                                    example: string;
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            } & {
                use: any[];
            };
            path: "/send-verification-email";
        };
        changeEmail: {
            <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                body: {
                    newEmail: string;
                    callbackURL?: string | undefined;
                };
            } & {
                method?: "POST" | undefined;
            } & {
                query?: Record<string, any> | undefined;
            } & {
                params?: Record<string, any>;
            } & {
                request?: Request;
            } & {
                headers?: HeadersInit;
            } & {
                asResponse?: boolean;
                returnHeaders?: boolean;
                use?: better_call.Middleware[];
                path?: string;
            } & {
                asResponse?: AsResponse | undefined;
                returnHeaders?: ReturnHeaders | undefined;
            }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                headers: Headers;
                response: {
                    status: boolean;
                };
            } : {
                status: boolean;
            }>;
            options: {
                method: "POST";
                body: zod.ZodObject<{
                    newEmail: zod.ZodEmail;
                    callbackURL: zod.ZodOptional<zod.ZodString>;
                }, zod_v4_core.$strip>;
                use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<{
                    session: {
                        session: Record<string, any> & {
                            id: string;
                            userId: string;
                            expiresAt: Date;
                            createdAt: Date;
                            updatedAt: Date;
                            token: string;
                            ipAddress?: string | null | undefined;
                            userAgent?: string | null | undefined;
                        };
                        user: Record<string, any> & {
                            id: string;
                            email: string;
                            emailVerified: boolean;
                            name: string;
                            createdAt: Date;
                            updatedAt: Date;
                            image?: string | null | undefined;
                        };
                    };
                }>)[];
                metadata: {
                    openapi: {
                        responses: {
                            "200": {
                                description: string;
                                content: {
                                    "application/json": {
                                        schema: {
                                            type: "object";
                                            properties: {
                                                status: {
                                                    type: string;
                                                    description: string;
                                                };
                                                message: {
                                                    type: string;
                                                    enum: string[];
                                                    description: string;
                                                    nullable: boolean;
                                                };
                                            };
                                            required: string[];
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            } & {
                use: any[];
            };
            path: "/change-email";
        };
        changePassword: {
            <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                body: {
                    newPassword: string;
                    currentPassword: string;
                    revokeOtherSessions?: boolean | undefined;
                };
            } & {
                method?: "POST" | undefined;
            } & {
                query?: Record<string, any> | undefined;
            } & {
                params?: Record<string, any>;
            } & {
                request?: Request;
            } & {
                headers?: HeadersInit;
            } & {
                asResponse?: boolean;
                returnHeaders?: boolean;
                use?: better_call.Middleware[];
                path?: string;
            } & {
                asResponse?: AsResponse | undefined;
                returnHeaders?: ReturnHeaders | undefined;
            }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                headers: Headers;
                response: {
                    token: string | null;
                    user: {
                        id: string;
                        email: string;
                        name: string;
                        image: string | null | undefined;
                        emailVerified: boolean;
                        createdAt: Date;
                        updatedAt: Date;
                    };
                };
            } : {
                token: string | null;
                user: {
                    id: string;
                    email: string;
                    name: string;
                    image: string | null | undefined;
                    emailVerified: boolean;
                    createdAt: Date;
                    updatedAt: Date;
                };
            }>;
            options: {
                method: "POST";
                body: zod.ZodObject<{
                    newPassword: zod.ZodString;
                    currentPassword: zod.ZodString;
                    revokeOtherSessions: zod.ZodOptional<zod.ZodBoolean>;
                }, zod_v4_core.$strip>;
                use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<{
                    session: {
                        session: Record<string, any> & {
                            id: string;
                            userId: string;
                            expiresAt: Date;
                            createdAt: Date;
                            updatedAt: Date;
                            token: string;
                            ipAddress?: string | null | undefined;
                            userAgent?: string | null | undefined;
                        };
                        user: Record<string, any> & {
                            id: string;
                            email: string;
                            emailVerified: boolean;
                            name: string;
                            createdAt: Date;
                            updatedAt: Date;
                            image?: string | null | undefined;
                        };
                    };
                }>)[];
                metadata: {
                    openapi: {
                        description: string;
                        responses: {
                            "200": {
                                description: string;
                                content: {
                                    "application/json": {
                                        schema: {
                                            type: "object";
                                            properties: {
                                                token: {
                                                    type: string;
                                                    nullable: boolean;
                                                    description: string;
                                                };
                                                user: {
                                                    type: string;
                                                    properties: {
                                                        id: {
                                                            type: string;
                                                            description: string;
                                                        };
                                                        email: {
                                                            type: string;
                                                            format: string;
                                                            description: string;
                                                        };
                                                        name: {
                                                            type: string;
                                                            description: string;
                                                        };
                                                        image: {
                                                            type: string;
                                                            format: string;
                                                            nullable: boolean;
                                                            description: string;
                                                        };
                                                        emailVerified: {
                                                            type: string;
                                                            description: string;
                                                        };
                                                        createdAt: {
                                                            type: string;
                                                            format: string;
                                                            description: string;
                                                        };
                                                        updatedAt: {
                                                            type: string;
                                                            format: string;
                                                            description: string;
                                                        };
                                                    };
                                                    required: string[];
                                                };
                                            };
                                            required: string[];
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            } & {
                use: any[];
            };
            path: "/change-password";
        };
        setPassword: {
            <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                body: {
                    newPassword: string;
                };
            } & {
                method?: "POST" | undefined;
            } & {
                query?: Record<string, any> | undefined;
            } & {
                params?: Record<string, any>;
            } & {
                request?: Request;
            } & {
                headers?: HeadersInit;
            } & {
                asResponse?: boolean;
                returnHeaders?: boolean;
                use?: better_call.Middleware[];
                path?: string;
            } & {
                asResponse?: AsResponse | undefined;
                returnHeaders?: ReturnHeaders | undefined;
            }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                headers: Headers;
                response: {
                    status: boolean;
                };
            } : {
                status: boolean;
            }>;
            options: {
                method: "POST";
                body: zod.ZodObject<{
                    newPassword: zod.ZodString;
                }, zod_v4_core.$strip>;
                metadata: {
                    SERVER_ONLY: true;
                };
                use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<{
                    session: {
                        session: Record<string, any> & {
                            id: string;
                            userId: string;
                            expiresAt: Date;
                            createdAt: Date;
                            updatedAt: Date;
                            token: string;
                            ipAddress?: string | null | undefined;
                            userAgent?: string | null | undefined;
                        };
                        user: Record<string, any> & {
                            id: string;
                            email: string;
                            emailVerified: boolean;
                            name: string;
                            createdAt: Date;
                            updatedAt: Date;
                            image?: string | null | undefined;
                        };
                    };
                }>)[];
            } & {
                use: any[];
            };
            path: "/set-password";
        };
        updateUser: {
            <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                body: Partial<{}> & {
                    name?: string;
                    image?: string;
                };
            } & {
                method?: "POST" | undefined;
            } & {
                query?: Record<string, any> | undefined;
            } & {
                params?: Record<string, any>;
            } & {
                request?: Request;
            } & {
                headers?: HeadersInit;
            } & {
                asResponse?: boolean;
                returnHeaders?: boolean;
                use?: better_call.Middleware[];
                path?: string;
            } & {
                asResponse?: AsResponse | undefined;
                returnHeaders?: ReturnHeaders | undefined;
            }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                headers: Headers;
                response: {
                    status: boolean;
                };
            } : {
                status: boolean;
            }>;
            options: {
                method: "POST";
                body: zod.ZodRecord<zod.ZodString, zod.ZodAny>;
                use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<{
                    session: {
                        session: Record<string, any> & {
                            id: string;
                            userId: string;
                            expiresAt: Date;
                            createdAt: Date;
                            updatedAt: Date;
                            token: string;
                            ipAddress?: string | null | undefined;
                            userAgent?: string | null | undefined;
                        };
                        user: Record<string, any> & {
                            id: string;
                            email: string;
                            emailVerified: boolean;
                            name: string;
                            createdAt: Date;
                            updatedAt: Date;
                            image?: string | null | undefined;
                        };
                    };
                }>)[];
                metadata: {
                    $Infer: {
                        body: Partial<{}> & {
                            name?: string;
                            image?: string;
                        };
                    };
                    openapi: {
                        description: string;
                        requestBody: {
                            content: {
                                "application/json": {
                                    schema: {
                                        type: "object";
                                        properties: {
                                            name: {
                                                type: string;
                                                description: string;
                                            };
                                            image: {
                                                type: string;
                                                description: string;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                        responses: {
                            "200": {
                                description: string;
                                content: {
                                    "application/json": {
                                        schema: {
                                            type: "object";
                                            properties: {
                                                status: {
                                                    type: string;
                                                    description: string;
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            } & {
                use: any[];
            };
            path: "/update-user";
        };
        deleteUser: {
            <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                body: {
                    callbackURL?: string | undefined;
                    password?: string | undefined;
                    token?: string | undefined;
                };
            } & {
                method?: "POST" | undefined;
            } & {
                query?: Record<string, any> | undefined;
            } & {
                params?: Record<string, any>;
            } & {
                request?: Request;
            } & {
                headers?: HeadersInit;
            } & {
                asResponse?: boolean;
                returnHeaders?: boolean;
                use?: better_call.Middleware[];
                path?: string;
            } & {
                asResponse?: AsResponse | undefined;
                returnHeaders?: ReturnHeaders | undefined;
            }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                headers: Headers;
                response: {
                    success: boolean;
                    message: string;
                };
            } : {
                success: boolean;
                message: string;
            }>;
            options: {
                method: "POST";
                use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<{
                    session: {
                        session: Record<string, any> & {
                            id: string;
                            userId: string;
                            expiresAt: Date;
                            createdAt: Date;
                            updatedAt: Date;
                            token: string;
                            ipAddress?: string | null | undefined;
                            userAgent?: string | null | undefined;
                        };
                        user: Record<string, any> & {
                            id: string;
                            email: string;
                            emailVerified: boolean;
                            name: string;
                            createdAt: Date;
                            updatedAt: Date;
                            image?: string | null | undefined;
                        };
                    };
                }>)[];
                body: zod.ZodObject<{
                    callbackURL: zod.ZodOptional<zod.ZodString>;
                    password: zod.ZodOptional<zod.ZodString>;
                    token: zod.ZodOptional<zod.ZodString>;
                }, zod_v4_core.$strip>;
                metadata: {
                    openapi: {
                        description: string;
                        responses: {
                            "200": {
                                description: string;
                                content: {
                                    "application/json": {
                                        schema: {
                                            type: "object";
                                            properties: {
                                                success: {
                                                    type: string;
                                                    description: string;
                                                };
                                                message: {
                                                    type: string;
                                                    enum: string[];
                                                    description: string;
                                                };
                                            };
                                            required: string[];
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            } & {
                use: any[];
            };
            path: "/delete-user";
        };
        forgetPasswordCallback: {
            <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                body?: undefined;
            } & {
                method?: "GET" | undefined;
            } & {
                query: {
                    callbackURL: string;
                };
            } & {
                params: {
                    token: string;
                };
            } & {
                request?: Request;
            } & {
                headers?: HeadersInit;
            } & {
                asResponse?: boolean;
                returnHeaders?: boolean;
                use?: better_call.Middleware[];
                path?: string;
            } & {
                asResponse?: AsResponse | undefined;
                returnHeaders?: ReturnHeaders | undefined;
            }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                headers: Headers;
                response: never;
            } : never>;
            options: {
                method: "GET";
                query: zod.ZodObject<{
                    callbackURL: zod.ZodString;
                }, zod_v4_core.$strip>;
                use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<void>)[];
                metadata: {
                    openapi: {
                        description: string;
                        responses: {
                            "200": {
                                description: string;
                                content: {
                                    "application/json": {
                                        schema: {
                                            type: "object";
                                            properties: {
                                                token: {
                                                    type: string;
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            } & {
                use: any[];
            };
            path: "/reset-password/:token";
        };
        requestPasswordReset: {
            <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                body: {
                    email: string;
                    redirectTo?: string | undefined;
                };
            } & {
                method?: "POST" | undefined;
            } & {
                query?: Record<string, any> | undefined;
            } & {
                params?: Record<string, any>;
            } & {
                request?: Request;
            } & {
                headers?: HeadersInit;
            } & {
                asResponse?: boolean;
                returnHeaders?: boolean;
                use?: better_call.Middleware[];
                path?: string;
            } & {
                asResponse?: AsResponse | undefined;
                returnHeaders?: ReturnHeaders | undefined;
            }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                headers: Headers;
                response: {
                    status: boolean;
                };
            } : {
                status: boolean;
            }>;
            options: {
                method: "POST";
                body: zod.ZodObject<{
                    email: zod.ZodEmail;
                    redirectTo: zod.ZodOptional<zod.ZodString>;
                }, zod_v4_core.$strip>;
                metadata: {
                    openapi: {
                        description: string;
                        responses: {
                            "200": {
                                description: string;
                                content: {
                                    "application/json": {
                                        schema: {
                                            type: "object";
                                            properties: {
                                                status: {
                                                    type: string;
                                                };
                                                message: {
                                                    type: string;
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            } & {
                use: any[];
            };
            path: "/request-password-reset";
        };
        requestPasswordResetCallback: {
            <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                body?: undefined;
            } & {
                method?: "GET" | undefined;
            } & {
                query: {
                    callbackURL: string;
                };
            } & {
                params: {
                    token: string;
                };
            } & {
                request?: Request;
            } & {
                headers?: HeadersInit;
            } & {
                asResponse?: boolean;
                returnHeaders?: boolean;
                use?: better_call.Middleware[];
                path?: string;
            } & {
                asResponse?: AsResponse | undefined;
                returnHeaders?: ReturnHeaders | undefined;
            }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                headers: Headers;
                response: never;
            } : never>;
            options: {
                method: "GET";
                query: zod.ZodObject<{
                    callbackURL: zod.ZodString;
                }, zod_v4_core.$strip>;
                use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<void>)[];
                metadata: {
                    openapi: {
                        description: string;
                        responses: {
                            "200": {
                                description: string;
                                content: {
                                    "application/json": {
                                        schema: {
                                            type: "object";
                                            properties: {
                                                token: {
                                                    type: string;
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            } & {
                use: any[];
            };
            path: "/reset-password/:token";
        };
        listSessions: {
            <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                body?: undefined;
            } & {
                method?: "GET" | undefined;
            } & {
                query?: Record<string, any> | undefined;
            } & {
                params?: Record<string, any>;
            } & {
                request?: Request;
            } & {
                headers: HeadersInit;
            } & {
                asResponse?: boolean;
                returnHeaders?: boolean;
                use?: better_call.Middleware[];
                path?: string;
            } & {
                asResponse?: AsResponse | undefined;
                returnHeaders?: ReturnHeaders | undefined;
            }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                headers: Headers;
                response: Prettify<{
                    id: string;
                    userId: string;
                    expiresAt: Date;
                    createdAt: Date;
                    updatedAt: Date;
                    token: string;
                    ipAddress?: string | null | undefined;
                    userAgent?: string | null | undefined;
                }>[];
            } : Prettify<{
                id: string;
                userId: string;
                expiresAt: Date;
                createdAt: Date;
                updatedAt: Date;
                token: string;
                ipAddress?: string | null | undefined;
                userAgent?: string | null | undefined;
            }>[]>;
            options: {
                method: "GET";
                use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<{
                    session: {
                        session: Record<string, any> & {
                            id: string;
                            userId: string;
                            expiresAt: Date;
                            createdAt: Date;
                            updatedAt: Date;
                            token: string;
                            ipAddress?: string | null | undefined;
                            userAgent?: string | null | undefined;
                        };
                        user: Record<string, any> & {
                            id: string;
                            email: string;
                            emailVerified: boolean;
                            name: string;
                            createdAt: Date;
                            updatedAt: Date;
                            image?: string | null | undefined;
                        };
                    };
                }>)[];
                requireHeaders: true;
                metadata: {
                    openapi: {
                        description: string;
                        responses: {
                            "200": {
                                description: string;
                                content: {
                                    "application/json": {
                                        schema: {
                                            type: "array";
                                            items: {
                                                $ref: string;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            } & {
                use: any[];
            };
            path: "/list-sessions";
        };
        revokeSession: {
            <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                body: {
                    token: string;
                };
            } & {
                method?: "POST" | undefined;
            } & {
                query?: Record<string, any> | undefined;
            } & {
                params?: Record<string, any>;
            } & {
                request?: Request;
            } & {
                headers: HeadersInit;
            } & {
                asResponse?: boolean;
                returnHeaders?: boolean;
                use?: better_call.Middleware[];
                path?: string;
            } & {
                asResponse?: AsResponse | undefined;
                returnHeaders?: ReturnHeaders | undefined;
            }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                headers: Headers;
                response: {
                    status: boolean;
                };
            } : {
                status: boolean;
            }>;
            options: {
                method: "POST";
                body: zod.ZodObject<{
                    token: zod.ZodString;
                }, zod_v4_core.$strip>;
                use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<{
                    session: {
                        session: Record<string, any> & {
                            id: string;
                            userId: string;
                            expiresAt: Date;
                            createdAt: Date;
                            updatedAt: Date;
                            token: string;
                            ipAddress?: string | null | undefined;
                            userAgent?: string | null | undefined;
                        };
                        user: Record<string, any> & {
                            id: string;
                            email: string;
                            emailVerified: boolean;
                            name: string;
                            createdAt: Date;
                            updatedAt: Date;
                            image?: string | null | undefined;
                        };
                    };
                }>)[];
                requireHeaders: true;
                metadata: {
                    openapi: {
                        description: string;
                        requestBody: {
                            content: {
                                "application/json": {
                                    schema: {
                                        type: "object";
                                        properties: {
                                            token: {
                                                type: string;
                                                description: string;
                                            };
                                        };
                                        required: string[];
                                    };
                                };
                            };
                        };
                        responses: {
                            "200": {
                                description: string;
                                content: {
                                    "application/json": {
                                        schema: {
                                            type: "object";
                                            properties: {
                                                status: {
                                                    type: string;
                                                    description: string;
                                                };
                                            };
                                            required: string[];
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            } & {
                use: any[];
            };
            path: "/revoke-session";
        };
        revokeSessions: {
            <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                body?: undefined;
            } & {
                method?: "POST" | undefined;
            } & {
                query?: Record<string, any> | undefined;
            } & {
                params?: Record<string, any>;
            } & {
                request?: Request;
            } & {
                headers: HeadersInit;
            } & {
                asResponse?: boolean;
                returnHeaders?: boolean;
                use?: better_call.Middleware[];
                path?: string;
            } & {
                asResponse?: AsResponse | undefined;
                returnHeaders?: ReturnHeaders | undefined;
            }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                headers: Headers;
                response: {
                    status: boolean;
                };
            } : {
                status: boolean;
            }>;
            options: {
                method: "POST";
                use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<{
                    session: {
                        session: Record<string, any> & {
                            id: string;
                            userId: string;
                            expiresAt: Date;
                            createdAt: Date;
                            updatedAt: Date;
                            token: string;
                            ipAddress?: string | null | undefined;
                            userAgent?: string | null | undefined;
                        };
                        user: Record<string, any> & {
                            id: string;
                            email: string;
                            emailVerified: boolean;
                            name: string;
                            createdAt: Date;
                            updatedAt: Date;
                            image?: string | null | undefined;
                        };
                    };
                }>)[];
                requireHeaders: true;
                metadata: {
                    openapi: {
                        description: string;
                        responses: {
                            "200": {
                                description: string;
                                content: {
                                    "application/json": {
                                        schema: {
                                            type: "object";
                                            properties: {
                                                status: {
                                                    type: string;
                                                    description: string;
                                                };
                                            };
                                            required: string[];
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            } & {
                use: any[];
            };
            path: "/revoke-sessions";
        };
        revokeOtherSessions: {
            <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                body?: undefined;
            } & {
                method?: "POST" | undefined;
            } & {
                query?: Record<string, any> | undefined;
            } & {
                params?: Record<string, any>;
            } & {
                request?: Request;
            } & {
                headers: HeadersInit;
            } & {
                asResponse?: boolean;
                returnHeaders?: boolean;
                use?: better_call.Middleware[];
                path?: string;
            } & {
                asResponse?: AsResponse | undefined;
                returnHeaders?: ReturnHeaders | undefined;
            }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                headers: Headers;
                response: {
                    status: boolean;
                };
            } : {
                status: boolean;
            }>;
            options: {
                method: "POST";
                requireHeaders: true;
                use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<{
                    session: {
                        session: Record<string, any> & {
                            id: string;
                            userId: string;
                            expiresAt: Date;
                            createdAt: Date;
                            updatedAt: Date;
                            token: string;
                            ipAddress?: string | null | undefined;
                            userAgent?: string | null | undefined;
                        };
                        user: Record<string, any> & {
                            id: string;
                            email: string;
                            emailVerified: boolean;
                            name: string;
                            createdAt: Date;
                            updatedAt: Date;
                            image?: string | null | undefined;
                        };
                    };
                }>)[];
                metadata: {
                    openapi: {
                        description: string;
                        responses: {
                            "200": {
                                description: string;
                                content: {
                                    "application/json": {
                                        schema: {
                                            type: "object";
                                            properties: {
                                                status: {
                                                    type: string;
                                                    description: string;
                                                };
                                            };
                                            required: string[];
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            } & {
                use: any[];
            };
            path: "/revoke-other-sessions";
        };
        linkSocialAccount: {
            <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                body: {
                    provider: unknown;
                    callbackURL?: string | undefined;
                    idToken?: {
                        token: string;
                        nonce?: string | undefined;
                        accessToken?: string | undefined;
                        refreshToken?: string | undefined;
                        scopes?: string[] | undefined;
                    } | undefined;
                    requestSignUp?: boolean | undefined;
                    scopes?: string[] | undefined;
                    errorCallbackURL?: string | undefined;
                    disableRedirect?: boolean | undefined;
                };
            } & {
                method?: "POST" | undefined;
            } & {
                query?: Record<string, any> | undefined;
            } & {
                params?: Record<string, any>;
            } & {
                request?: Request;
            } & {
                headers: HeadersInit;
            } & {
                asResponse?: boolean;
                returnHeaders?: boolean;
                use?: better_call.Middleware[];
                path?: string;
            } & {
                asResponse?: AsResponse | undefined;
                returnHeaders?: ReturnHeaders | undefined;
            }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                headers: Headers;
                response: {
                    url: string;
                    redirect: boolean;
                };
            } : {
                url: string;
                redirect: boolean;
            }>;
            options: {
                method: "POST";
                requireHeaders: true;
                body: zod.ZodObject<{
                    callbackURL: zod.ZodOptional<zod.ZodString>;
                    provider: zod.ZodType<"github" | "apple" | "discord" | "facebook" | "microsoft" | "google" | "huggingface" | "slack" | "spotify" | "twitch" | "twitter" | "dropbox" | "kick" | "linear" | "linkedin" | "gitlab" | "tiktok" | "reddit" | "roblox" | "vk" | "zoom" | "notion" | (string & {}), unknown, zod_v4_core.$ZodTypeInternals<"github" | "apple" | "discord" | "facebook" | "microsoft" | "google" | "huggingface" | "slack" | "spotify" | "twitch" | "twitter" | "dropbox" | "kick" | "linear" | "linkedin" | "gitlab" | "tiktok" | "reddit" | "roblox" | "vk" | "zoom" | "notion" | (string & {}), unknown>>;
                    idToken: zod.ZodOptional<zod.ZodObject<{
                        token: zod.ZodString;
                        nonce: zod.ZodOptional<zod.ZodString>;
                        accessToken: zod.ZodOptional<zod.ZodString>;
                        refreshToken: zod.ZodOptional<zod.ZodString>;
                        scopes: zod.ZodOptional<zod.ZodArray<zod.ZodString>>;
                    }, zod_v4_core.$strip>>;
                    requestSignUp: zod.ZodOptional<zod.ZodBoolean>;
                    scopes: zod.ZodOptional<zod.ZodArray<zod.ZodString>>;
                    errorCallbackURL: zod.ZodOptional<zod.ZodString>;
                    disableRedirect: zod.ZodOptional<zod.ZodBoolean>;
                }, zod_v4_core.$strip>;
                use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<{
                    session: {
                        session: Record<string, any> & {
                            id: string;
                            userId: string;
                            expiresAt: Date;
                            createdAt: Date;
                            updatedAt: Date;
                            token: string;
                            ipAddress?: string | null | undefined;
                            userAgent?: string | null | undefined;
                        };
                        user: Record<string, any> & {
                            id: string;
                            email: string;
                            emailVerified: boolean;
                            name: string;
                            createdAt: Date;
                            updatedAt: Date;
                            image?: string | null | undefined;
                        };
                    };
                }>)[];
                metadata: {
                    openapi: {
                        description: string;
                        responses: {
                            "200": {
                                description: string;
                                content: {
                                    "application/json": {
                                        schema: {
                                            type: "object";
                                            properties: {
                                                url: {
                                                    type: string;
                                                    description: string;
                                                };
                                                redirect: {
                                                    type: string;
                                                    description: string;
                                                };
                                                status: {
                                                    type: string;
                                                };
                                            };
                                            required: string[];
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            } & {
                use: any[];
            };
            path: "/link-social";
        };
        listUserAccounts: {
            <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0?: ({
                body?: undefined;
            } & {
                method?: "GET" | undefined;
            } & {
                query?: Record<string, any> | undefined;
            } & {
                params?: Record<string, any>;
            } & {
                request?: Request;
            } & {
                headers?: HeadersInit;
            } & {
                asResponse?: boolean;
                returnHeaders?: boolean;
                use?: better_call.Middleware[];
                path?: string;
            } & {
                asResponse?: AsResponse | undefined;
                returnHeaders?: ReturnHeaders | undefined;
            }) | undefined): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                headers: Headers;
                response: {
                    id: string;
                    provider: string;
                    createdAt: Date;
                    updatedAt: Date;
                    accountId: string;
                    scopes: string[];
                }[];
            } : {
                id: string;
                provider: string;
                createdAt: Date;
                updatedAt: Date;
                accountId: string;
                scopes: string[];
            }[]>;
            options: {
                method: "GET";
                use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<{
                    session: {
                        session: Record<string, any> & {
                            id: string;
                            userId: string;
                            expiresAt: Date;
                            createdAt: Date;
                            updatedAt: Date;
                            token: string;
                            ipAddress?: string | null | undefined;
                            userAgent?: string | null | undefined;
                        };
                        user: Record<string, any> & {
                            id: string;
                            email: string;
                            emailVerified: boolean;
                            name: string;
                            createdAt: Date;
                            updatedAt: Date;
                            image?: string | null | undefined;
                        };
                    };
                }>)[];
                metadata: {
                    openapi: {
                        description: string;
                        responses: {
                            "200": {
                                description: string;
                                content: {
                                    "application/json": {
                                        schema: {
                                            type: "array";
                                            items: {
                                                type: string;
                                                properties: {
                                                    id: {
                                                        type: string;
                                                    };
                                                    provider: {
                                                        type: string;
                                                    };
                                                    createdAt: {
                                                        type: string;
                                                        format: string;
                                                    };
                                                    updatedAt: {
                                                        type: string;
                                                        format: string;
                                                    };
                                                };
                                                accountId: {
                                                    type: string;
                                                };
                                                scopes: {
                                                    type: string;
                                                    items: {
                                                        type: string;
                                                    };
                                                };
                                            };
                                            required: string[];
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            } & {
                use: any[];
            };
            path: "/list-accounts";
        };
        deleteUserCallback: {
            <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                body?: undefined;
            } & {
                method?: "GET" | undefined;
            } & {
                query: {
                    token: string;
                    callbackURL?: string | undefined;
                };
            } & {
                params?: Record<string, any>;
            } & {
                request?: Request;
            } & {
                headers?: HeadersInit;
            } & {
                asResponse?: boolean;
                returnHeaders?: boolean;
                use?: better_call.Middleware[];
                path?: string;
            } & {
                asResponse?: AsResponse | undefined;
                returnHeaders?: ReturnHeaders | undefined;
            }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                headers: Headers;
                response: {
                    success: boolean;
                    message: string;
                };
            } : {
                success: boolean;
                message: string;
            }>;
            options: {
                method: "GET";
                query: zod.ZodObject<{
                    token: zod.ZodString;
                    callbackURL: zod.ZodOptional<zod.ZodString>;
                }, zod_v4_core.$strip>;
                use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<void>)[];
                metadata: {
                    openapi: {
                        description: string;
                        responses: {
                            "200": {
                                description: string;
                                content: {
                                    "application/json": {
                                        schema: {
                                            type: "object";
                                            properties: {
                                                success: {
                                                    type: string;
                                                    description: string;
                                                };
                                                message: {
                                                    type: string;
                                                    enum: string[];
                                                    description: string;
                                                };
                                            };
                                            required: string[];
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            } & {
                use: any[];
            };
            path: "/delete-user/callback";
        };
        unlinkAccount: {
            <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                body: {
                    providerId: string;
                    accountId?: string | undefined;
                };
            } & {
                method?: "POST" | undefined;
            } & {
                query?: Record<string, any> | undefined;
            } & {
                params?: Record<string, any>;
            } & {
                request?: Request;
            } & {
                headers?: HeadersInit;
            } & {
                asResponse?: boolean;
                returnHeaders?: boolean;
                use?: better_call.Middleware[];
                path?: string;
            } & {
                asResponse?: AsResponse | undefined;
                returnHeaders?: ReturnHeaders | undefined;
            }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                headers: Headers;
                response: {
                    status: boolean;
                };
            } : {
                status: boolean;
            }>;
            options: {
                method: "POST";
                body: zod.ZodObject<{
                    providerId: zod.ZodString;
                    accountId: zod.ZodOptional<zod.ZodString>;
                }, zod_v4_core.$strip>;
                use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<{
                    session: {
                        session: Record<string, any> & {
                            id: string;
                            userId: string;
                            expiresAt: Date;
                            createdAt: Date;
                            updatedAt: Date;
                            token: string;
                            ipAddress?: string | null | undefined;
                            userAgent?: string | null | undefined;
                        };
                        user: Record<string, any> & {
                            id: string;
                            email: string;
                            emailVerified: boolean;
                            name: string;
                            createdAt: Date;
                            updatedAt: Date;
                            image?: string | null | undefined;
                        };
                    };
                }>)[];
                metadata: {
                    openapi: {
                        description: string;
                        responses: {
                            "200": {
                                description: string;
                                content: {
                                    "application/json": {
                                        schema: {
                                            type: "object";
                                            properties: {
                                                status: {
                                                    type: string;
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            } & {
                use: any[];
            };
            path: "/unlink-account";
        };
        refreshToken: {
            <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                body: {
                    providerId: string;
                    accountId?: string | undefined;
                    userId?: string | undefined;
                };
            } & {
                method?: "POST" | undefined;
            } & {
                query?: Record<string, any> | undefined;
            } & {
                params?: Record<string, any>;
            } & {
                request?: Request;
            } & {
                headers?: HeadersInit;
            } & {
                asResponse?: boolean;
                returnHeaders?: boolean;
                use?: better_call.Middleware[];
                path?: string;
            } & {
                asResponse?: AsResponse | undefined;
                returnHeaders?: ReturnHeaders | undefined;
            }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                headers: Headers;
                response: OAuth2Tokens;
            } : OAuth2Tokens>;
            options: {
                method: "POST";
                body: zod.ZodObject<{
                    providerId: zod.ZodString;
                    accountId: zod.ZodOptional<zod.ZodString>;
                    userId: zod.ZodOptional<zod.ZodString>;
                }, zod_v4_core.$strip>;
                metadata: {
                    openapi: {
                        description: string;
                        responses: {
                            200: {
                                description: string;
                                content: {
                                    "application/json": {
                                        schema: {
                                            type: "object";
                                            properties: {
                                                tokenType: {
                                                    type: string;
                                                };
                                                idToken: {
                                                    type: string;
                                                };
                                                accessToken: {
                                                    type: string;
                                                };
                                                refreshToken: {
                                                    type: string;
                                                };
                                                accessTokenExpiresAt: {
                                                    type: string;
                                                    format: string;
                                                };
                                                refreshTokenExpiresAt: {
                                                    type: string;
                                                    format: string;
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                            400: {
                                description: string;
                            };
                        };
                    };
                };
            } & {
                use: any[];
            };
            path: "/refresh-token";
        };
        getAccessToken: {
            <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                body: {
                    providerId: string;
                    accountId?: string | undefined;
                    userId?: string | undefined;
                };
            } & {
                method?: "POST" | undefined;
            } & {
                query?: Record<string, any> | undefined;
            } & {
                params?: Record<string, any>;
            } & {
                request?: Request;
            } & {
                headers?: HeadersInit;
            } & {
                asResponse?: boolean;
                returnHeaders?: boolean;
                use?: better_call.Middleware[];
                path?: string;
            } & {
                asResponse?: AsResponse | undefined;
                returnHeaders?: ReturnHeaders | undefined;
            }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                headers: Headers;
                response: {
                    accessToken: string;
                    accessTokenExpiresAt: Date | undefined;
                    scopes: string[];
                    idToken: string | undefined;
                };
            } : {
                accessToken: string;
                accessTokenExpiresAt: Date | undefined;
                scopes: string[];
                idToken: string | undefined;
            }>;
            options: {
                method: "POST";
                body: zod.ZodObject<{
                    providerId: zod.ZodString;
                    accountId: zod.ZodOptional<zod.ZodString>;
                    userId: zod.ZodOptional<zod.ZodString>;
                }, zod_v4_core.$strip>;
                metadata: {
                    openapi: {
                        description: string;
                        responses: {
                            200: {
                                description: string;
                                content: {
                                    "application/json": {
                                        schema: {
                                            type: "object";
                                            properties: {
                                                tokenType: {
                                                    type: string;
                                                };
                                                idToken: {
                                                    type: string;
                                                };
                                                accessToken: {
                                                    type: string;
                                                };
                                                refreshToken: {
                                                    type: string;
                                                };
                                                accessTokenExpiresAt: {
                                                    type: string;
                                                    format: string;
                                                };
                                                refreshTokenExpiresAt: {
                                                    type: string;
                                                    format: string;
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                            400: {
                                description: string;
                            };
                        };
                    };
                };
            } & {
                use: any[];
            };
            path: "/get-access-token";
        };
        accountInfo: {
            <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                body: {
                    accountId: string;
                };
            } & {
                method?: "POST" | undefined;
            } & {
                query?: Record<string, any> | undefined;
            } & {
                params?: Record<string, any>;
            } & {
                request?: Request;
            } & {
                headers?: HeadersInit;
            } & {
                asResponse?: boolean;
                returnHeaders?: boolean;
                use?: better_call.Middleware[];
                path?: string;
            } & {
                asResponse?: AsResponse | undefined;
                returnHeaders?: ReturnHeaders | undefined;
            }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                headers: Headers;
                response: {
                    user: {
                        id: string | number;
                        name?: string;
                        email?: string | null;
                        image?: string;
                        emailVerified: boolean;
                    };
                    data: Record<string, any>;
                } | null;
            } : {
                user: {
                    id: string | number;
                    name?: string;
                    email?: string | null;
                    image?: string;
                    emailVerified: boolean;
                };
                data: Record<string, any>;
            } | null>;
            options: {
                method: "POST";
                use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<{
                    session: {
                        session: Record<string, any> & {
                            id: string;
                            userId: string;
                            expiresAt: Date;
                            createdAt: Date;
                            updatedAt: Date;
                            token: string;
                            ipAddress?: string | null | undefined;
                            userAgent?: string | null | undefined;
                        };
                        user: Record<string, any> & {
                            id: string;
                            email: string;
                            emailVerified: boolean;
                            name: string;
                            createdAt: Date;
                            updatedAt: Date;
                            image?: string | null | undefined;
                        };
                    };
                }>)[];
                metadata: {
                    openapi: {
                        description: string;
                        responses: {
                            "200": {
                                description: string;
                                content: {
                                    "application/json": {
                                        schema: {
                                            type: "object";
                                            properties: {
                                                user: {
                                                    type: string;
                                                    properties: {
                                                        id: {
                                                            type: string;
                                                        };
                                                        name: {
                                                            type: string;
                                                        };
                                                        email: {
                                                            type: string;
                                                        };
                                                        image: {
                                                            type: string;
                                                        };
                                                        emailVerified: {
                                                            type: string;
                                                        };
                                                    };
                                                    required: string[];
                                                };
                                                data: {
                                                    type: string;
                                                    properties: {};
                                                    additionalProperties: boolean;
                                                };
                                            };
                                            required: string[];
                                            additionalProperties: boolean;
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
                body: zod.ZodObject<{
                    accountId: zod.ZodString;
                }, zod_v4_core.$strip>;
            } & {
                use: any[];
            };
            path: "/account-info";
        };
    }> & (((C extends undefined ? {} : C) & {
        baseURL: string | undefined;
        fetchOptions: {
            customFetchImpl: (url: string | URL | Request, init?: RequestInit) => Promise<Response>;
        };
    })["plugins"] extends (infer Pl)[] ? UnionToIntersection<Pl extends {
        $InferServerPlugin: infer Plug;
    } ? Plug extends {
        endpoints: infer Endpoints;
    } ? Endpoints : {} : {}> : {}) : FilterActions<{
        ok: {
            <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0?: ({
                body?: undefined;
            } & {
                method?: "GET" | undefined;
            } & {
                query?: Record<string, any> | undefined;
            } & {
                params?: Record<string, any>;
            } & {
                request?: Request;
            } & {
                headers?: HeadersInit;
            } & {
                asResponse?: boolean;
                returnHeaders?: boolean;
                use?: better_call.Middleware[];
                path?: string;
            } & {
                asResponse?: AsResponse | undefined;
                returnHeaders?: ReturnHeaders | undefined;
            }) | undefined): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                headers: Headers;
                response: {
                    ok: boolean;
                };
            } : {
                ok: boolean;
            }>;
            options: {
                method: "GET";
                metadata: {
                    openapi: {
                        description: string;
                        responses: {
                            "200": {
                                description: string;
                                content: {
                                    "application/json": {
                                        schema: {
                                            type: "object";
                                            properties: {
                                                ok: {
                                                    type: string;
                                                    description: string;
                                                };
                                            };
                                            required: string[];
                                        };
                                    };
                                };
                            };
                        };
                    };
                    isAction: false;
                };
            } & {
                use: any[];
            };
            path: "/ok";
        };
        error: {
            <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0?: ({
                body?: undefined;
            } & {
                method?: "GET" | undefined;
            } & {
                query?: Record<string, any> | undefined;
            } & {
                params?: Record<string, any>;
            } & {
                request?: Request;
            } & {
                headers?: HeadersInit;
            } & {
                asResponse?: boolean;
                returnHeaders?: boolean;
                use?: better_call.Middleware[];
                path?: string;
            } & {
                asResponse?: AsResponse | undefined;
                returnHeaders?: ReturnHeaders | undefined;
            }) | undefined): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                headers: Headers;
                response: Response;
            } : Response>;
            options: {
                method: "GET";
                metadata: {
                    openapi: {
                        description: string;
                        responses: {
                            "200": {
                                description: string;
                                content: {
                                    "text/html": {
                                        schema: {
                                            type: "string";
                                            description: string;
                                        };
                                    };
                                };
                            };
                        };
                    };
                    isAction: false;
                };
            } & {
                use: any[];
            };
            path: "/error";
        };
        signInSocial: {
            <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                body: {
                    provider: unknown;
                    callbackURL?: string | undefined;
                    newUserCallbackURL?: string | undefined;
                    errorCallbackURL?: string | undefined;
                    disableRedirect?: boolean | undefined;
                    idToken?: {
                        token: string;
                        nonce?: string | undefined;
                        accessToken?: string | undefined;
                        refreshToken?: string | undefined;
                        expiresAt?: number | undefined;
                    } | undefined;
                    scopes?: string[] | undefined;
                    requestSignUp?: boolean | undefined;
                    loginHint?: string | undefined;
                };
            } & {
                method?: "POST" | undefined;
            } & {
                query?: Record<string, any> | undefined;
            } & {
                params?: Record<string, any>;
            } & {
                request?: Request;
            } & {
                headers?: HeadersInit;
            } & {
                asResponse?: boolean;
                returnHeaders?: boolean;
                use?: better_call.Middleware[];
                path?: string;
            } & {
                asResponse?: AsResponse | undefined;
                returnHeaders?: ReturnHeaders | undefined;
            }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                headers: Headers;
                response: {
                    redirect: boolean;
                    token: string;
                    url: undefined;
                    user: {
                        id: string;
                        email: string;
                        name: string;
                        image: string | null | undefined;
                        emailVerified: boolean;
                        createdAt: Date;
                        updatedAt: Date;
                    };
                } | {
                    url: string;
                    redirect: boolean;
                };
            } : {
                redirect: boolean;
                token: string;
                url: undefined;
                user: {
                    id: string;
                    email: string;
                    name: string;
                    image: string | null | undefined;
                    emailVerified: boolean;
                    createdAt: Date;
                    updatedAt: Date;
                };
            } | {
                url: string;
                redirect: boolean;
            }>;
            options: {
                method: "POST";
                body: zod.ZodObject<{
                    callbackURL: zod.ZodOptional<zod.ZodString>;
                    newUserCallbackURL: zod.ZodOptional<zod.ZodString>;
                    errorCallbackURL: zod.ZodOptional<zod.ZodString>;
                    provider: zod.ZodType<"github" | "apple" | "discord" | "facebook" | "microsoft" | "google" | "huggingface" | "slack" | "spotify" | "twitch" | "twitter" | "dropbox" | "kick" | "linear" | "linkedin" | "gitlab" | "tiktok" | "reddit" | "roblox" | "vk" | "zoom" | "notion" | (string & {}), unknown, zod_v4_core.$ZodTypeInternals<"github" | "apple" | "discord" | "facebook" | "microsoft" | "google" | "huggingface" | "slack" | "spotify" | "twitch" | "twitter" | "dropbox" | "kick" | "linear" | "linkedin" | "gitlab" | "tiktok" | "reddit" | "roblox" | "vk" | "zoom" | "notion" | (string & {}), unknown>>;
                    disableRedirect: zod.ZodOptional<zod.ZodBoolean>;
                    idToken: zod.ZodOptional<zod.ZodObject<{
                        token: zod.ZodString;
                        nonce: zod.ZodOptional<zod.ZodString>;
                        accessToken: zod.ZodOptional<zod.ZodString>;
                        refreshToken: zod.ZodOptional<zod.ZodString>;
                        expiresAt: zod.ZodOptional<zod.ZodNumber>;
                    }, zod_v4_core.$strip>>;
                    scopes: zod.ZodOptional<zod.ZodArray<zod.ZodString>>;
                    requestSignUp: zod.ZodOptional<zod.ZodBoolean>;
                    loginHint: zod.ZodOptional<zod.ZodString>;
                }, zod_v4_core.$strip>;
                metadata: {
                    openapi: {
                        description: string;
                        operationId: string;
                        responses: {
                            "200": {
                                description: string;
                                content: {
                                    "application/json": {
                                        schema: {
                                            type: "object";
                                            description: string;
                                            properties: {
                                                redirect: {
                                                    type: string;
                                                    enum: boolean[];
                                                };
                                                token: {
                                                    type: string;
                                                    description: string;
                                                    url: {
                                                        type: string;
                                                        nullable: boolean;
                                                    };
                                                    user: {
                                                        type: string;
                                                        properties: {
                                                            id: {
                                                                type: string;
                                                            };
                                                            email: {
                                                                type: string;
                                                            };
                                                            name: {
                                                                type: string;
                                                                nullable: boolean;
                                                            };
                                                            image: {
                                                                type: string;
                                                                nullable: boolean;
                                                            };
                                                            emailVerified: {
                                                                type: string;
                                                            };
                                                            createdAt: {
                                                                type: string;
                                                                format: string;
                                                            };
                                                            updatedAt: {
                                                                type: string;
                                                                format: string;
                                                            };
                                                        };
                                                        required: string[];
                                                    };
                                                };
                                            };
                                            required: string[];
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            } & {
                use: any[];
            };
            path: "/sign-in/social";
        };
        callbackOAuth: {
            <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                body?: {
                    code?: string | undefined;
                    error?: string | undefined;
                    device_id?: string | undefined;
                    error_description?: string | undefined;
                    state?: string | undefined;
                    user?: string | undefined;
                } | undefined;
            } & {
                method: "GET" | "POST";
            } & {
                query?: {
                    code?: string | undefined;
                    error?: string | undefined;
                    device_id?: string | undefined;
                    error_description?: string | undefined;
                    state?: string | undefined;
                    user?: string | undefined;
                } | undefined;
            } & {
                params: {
                    id: string;
                };
            } & {
                request?: Request;
            } & {
                headers?: HeadersInit;
            } & {
                asResponse?: boolean;
                returnHeaders?: boolean;
                use?: better_call.Middleware[];
                path?: string;
            } & {
                asResponse?: AsResponse | undefined;
                returnHeaders?: ReturnHeaders | undefined;
            }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                headers: Headers;
                response: void;
            } : void>;
            options: {
                method: ("GET" | "POST")[];
                body: zod.ZodOptional<zod.ZodObject<{
                    code: zod.ZodOptional<zod.ZodString>;
                    error: zod.ZodOptional<zod.ZodString>;
                    device_id: zod.ZodOptional<zod.ZodString>;
                    error_description: zod.ZodOptional<zod.ZodString>;
                    state: zod.ZodOptional<zod.ZodString>;
                    user: zod.ZodOptional<zod.ZodString>;
                }, zod_v4_core.$strip>>;
                query: zod.ZodOptional<zod.ZodObject<{
                    code: zod.ZodOptional<zod.ZodString>;
                    error: zod.ZodOptional<zod.ZodString>;
                    device_id: zod.ZodOptional<zod.ZodString>;
                    error_description: zod.ZodOptional<zod.ZodString>;
                    state: zod.ZodOptional<zod.ZodString>;
                    user: zod.ZodOptional<zod.ZodString>;
                }, zod_v4_core.$strip>>;
                metadata: {
                    isAction: false;
                };
            } & {
                use: any[];
            };
            path: "/callback/:id";
        };
        getSession: {
            <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                body?: undefined;
            } & {
                method?: "GET" | undefined;
            } & {
                query?: {
                    disableCookieCache?: unknown;
                    disableRefresh?: unknown;
                } | undefined;
            } & {
                params?: Record<string, any>;
            } & {
                request?: Request;
            } & {
                headers: HeadersInit;
            } & {
                asResponse?: boolean;
                returnHeaders?: boolean;
                use?: better_call.Middleware[];
                path?: string;
            } & {
                asResponse?: AsResponse | undefined;
                returnHeaders?: ReturnHeaders | undefined;
            }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                headers: Headers;
                response: {
                    session: {
                        id: string;
                        userId: string;
                        expiresAt: Date;
                        createdAt: Date;
                        updatedAt: Date;
                        token: string;
                        ipAddress?: string | null | undefined;
                        userAgent?: string | null | undefined;
                    };
                    user: {
                        id: string;
                        email: string;
                        emailVerified: boolean;
                        name: string;
                        createdAt: Date;
                        updatedAt: Date;
                        image?: string | null | undefined;
                    };
                } | null;
            } : {
                session: {
                    id: string;
                    userId: string;
                    expiresAt: Date;
                    createdAt: Date;
                    updatedAt: Date;
                    token: string;
                    ipAddress?: string | null | undefined;
                    userAgent?: string | null | undefined;
                };
                user: {
                    id: string;
                    email: string;
                    emailVerified: boolean;
                    name: string;
                    createdAt: Date;
                    updatedAt: Date;
                    image?: string | null | undefined;
                };
            } | null>;
            options: {
                method: "GET";
                query: zod.ZodOptional<zod.ZodObject<{
                    disableCookieCache: zod.ZodOptional<zod.ZodCoercedBoolean<unknown>>;
                    disableRefresh: zod.ZodOptional<zod.ZodCoercedBoolean<unknown>>;
                }, zod_v4_core.$strip>>;
                requireHeaders: true;
                metadata: {
                    openapi: {
                        description: string;
                        responses: {
                            "200": {
                                description: string;
                                content: {
                                    "application/json": {
                                        schema: {
                                            type: "object";
                                            properties: {
                                                session: {
                                                    $ref: string;
                                                };
                                                user: {
                                                    $ref: string;
                                                };
                                            };
                                            required: string[];
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            } & {
                use: any[];
            };
            path: "/get-session";
        };
        signOut: {
            <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                body?: undefined;
            } & {
                method?: "POST" | undefined;
            } & {
                query?: Record<string, any> | undefined;
            } & {
                params?: Record<string, any>;
            } & {
                request?: Request;
            } & {
                headers: HeadersInit;
            } & {
                asResponse?: boolean;
                returnHeaders?: boolean;
                use?: better_call.Middleware[];
                path?: string;
            } & {
                asResponse?: AsResponse | undefined;
                returnHeaders?: ReturnHeaders | undefined;
            }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                headers: Headers;
                response: {
                    success: boolean;
                };
            } : {
                success: boolean;
            }>;
            options: {
                method: "POST";
                requireHeaders: true;
                metadata: {
                    openapi: {
                        description: string;
                        responses: {
                            "200": {
                                description: string;
                                content: {
                                    "application/json": {
                                        schema: {
                                            type: "object";
                                            properties: {
                                                success: {
                                                    type: string;
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            } & {
                use: any[];
            };
            path: "/sign-out";
        };
        signUpEmail: {
            <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                body: {
                    name: string;
                    email: string;
                    password: string;
                    image?: string;
                    callbackURL?: string;
                    rememberMe?: boolean;
                };
            } & {
                method?: "POST" | undefined;
            } & {
                query?: Record<string, any> | undefined;
            } & {
                params?: Record<string, any>;
            } & {
                request?: Request;
            } & {
                headers?: HeadersInit;
            } & {
                asResponse?: boolean;
                returnHeaders?: boolean;
                use?: better_call.Middleware[];
                path?: string;
            } & {
                asResponse?: AsResponse | undefined;
                returnHeaders?: ReturnHeaders | undefined;
            }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                headers: Headers;
                response: {
                    token: null;
                    user: {
                        id: string;
                        email: string;
                        name: string;
                        image: string | null | undefined;
                        emailVerified: boolean;
                        createdAt: Date;
                        updatedAt: Date;
                    };
                } | {
                    token: string;
                    user: {
                        id: string;
                        email: string;
                        name: string;
                        image: string | null | undefined;
                        emailVerified: boolean;
                        createdAt: Date;
                        updatedAt: Date;
                    };
                };
            } : {
                token: null;
                user: {
                    id: string;
                    email: string;
                    name: string;
                    image: string | null | undefined;
                    emailVerified: boolean;
                    createdAt: Date;
                    updatedAt: Date;
                };
            } | {
                token: string;
                user: {
                    id: string;
                    email: string;
                    name: string;
                    image: string | null | undefined;
                    emailVerified: boolean;
                    createdAt: Date;
                    updatedAt: Date;
                };
            }>;
            options: {
                method: "POST";
                body: zod.ZodRecord<zod.ZodString, zod.ZodAny>;
                metadata: {
                    $Infer: {
                        body: {
                            name: string;
                            email: string;
                            password: string;
                            image?: string;
                            callbackURL?: string;
                            rememberMe?: boolean;
                        };
                    };
                    openapi: {
                        description: string;
                        requestBody: {
                            content: {
                                "application/json": {
                                    schema: {
                                        type: "object";
                                        properties: {
                                            name: {
                                                type: string;
                                                description: string;
                                            };
                                            email: {
                                                type: string;
                                                description: string;
                                            };
                                            password: {
                                                type: string;
                                                description: string;
                                            };
                                            image: {
                                                type: string;
                                                description: string;
                                            };
                                            callbackURL: {
                                                type: string;
                                                description: string;
                                            };
                                            rememberMe: {
                                                type: string;
                                                description: string;
                                            };
                                        };
                                        required: string[];
                                    };
                                };
                            };
                        };
                        responses: {
                            "200": {
                                description: string;
                                content: {
                                    "application/json": {
                                        schema: {
                                            type: "object";
                                            properties: {
                                                token: {
                                                    type: string;
                                                    nullable: boolean;
                                                    description: string;
                                                };
                                                user: {
                                                    type: string;
                                                    properties: {
                                                        id: {
                                                            type: string;
                                                            description: string;
                                                        };
                                                        email: {
                                                            type: string;
                                                            format: string;
                                                            description: string;
                                                        };
                                                        name: {
                                                            type: string;
                                                            description: string;
                                                        };
                                                        image: {
                                                            type: string;
                                                            format: string;
                                                            nullable: boolean;
                                                            description: string;
                                                        };
                                                        emailVerified: {
                                                            type: string;
                                                            description: string;
                                                        };
                                                        createdAt: {
                                                            type: string;
                                                            format: string;
                                                            description: string;
                                                        };
                                                        updatedAt: {
                                                            type: string;
                                                            format: string;
                                                            description: string;
                                                        };
                                                    };
                                                    required: string[];
                                                };
                                            };
                                            required: string[];
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            } & {
                use: any[];
            };
            path: "/sign-up/email";
        };
        signInEmail: {
            <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                body: {
                    email: string;
                    password: string;
                    callbackURL?: string | undefined;
                    rememberMe?: boolean | undefined;
                };
            } & {
                method?: "POST" | undefined;
            } & {
                query?: Record<string, any> | undefined;
            } & {
                params?: Record<string, any>;
            } & {
                request?: Request;
            } & {
                headers?: HeadersInit;
            } & {
                asResponse?: boolean;
                returnHeaders?: boolean;
                use?: better_call.Middleware[];
                path?: string;
            } & {
                asResponse?: AsResponse | undefined;
                returnHeaders?: ReturnHeaders | undefined;
            }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                headers: Headers;
                response: {
                    redirect: boolean;
                    token: string;
                    url: string | undefined;
                    user: {
                        id: string;
                        email: string;
                        name: string;
                        image: string | null | undefined;
                        emailVerified: boolean;
                        createdAt: Date;
                        updatedAt: Date;
                    };
                };
            } : {
                redirect: boolean;
                token: string;
                url: string | undefined;
                user: {
                    id: string;
                    email: string;
                    name: string;
                    image: string | null | undefined;
                    emailVerified: boolean;
                    createdAt: Date;
                    updatedAt: Date;
                };
            }>;
            options: {
                method: "POST";
                body: zod.ZodObject<{
                    email: zod.ZodString;
                    password: zod.ZodString;
                    callbackURL: zod.ZodOptional<zod.ZodString>;
                    rememberMe: zod.ZodOptional<zod.ZodDefault<zod.ZodBoolean>>;
                }, zod_v4_core.$strip>;
                metadata: {
                    openapi: {
                        description: string;
                        responses: {
                            "200": {
                                description: string;
                                content: {
                                    "application/json": {
                                        schema: {
                                            type: "object";
                                            description: string;
                                            properties: {
                                                redirect: {
                                                    type: string;
                                                    enum: boolean[];
                                                };
                                                token: {
                                                    type: string;
                                                    description: string;
                                                };
                                                url: {
                                                    type: string;
                                                    nullable: boolean;
                                                };
                                                user: {
                                                    type: string;
                                                    properties: {
                                                        id: {
                                                            type: string;
                                                        };
                                                        email: {
                                                            type: string;
                                                        };
                                                        name: {
                                                            type: string;
                                                            nullable: boolean;
                                                        };
                                                        image: {
                                                            type: string;
                                                            nullable: boolean;
                                                        };
                                                        emailVerified: {
                                                            type: string;
                                                        };
                                                        createdAt: {
                                                            type: string;
                                                            format: string;
                                                        };
                                                        updatedAt: {
                                                            type: string;
                                                            format: string;
                                                        };
                                                    };
                                                    required: string[];
                                                };
                                            };
                                            required: string[];
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            } & {
                use: any[];
            };
            path: "/sign-in/email";
        };
        forgetPassword: {
            <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                body: {
                    email: string;
                    redirectTo?: string | undefined;
                };
            } & {
                method?: "POST" | undefined;
            } & {
                query?: Record<string, any> | undefined;
            } & {
                params?: Record<string, any>;
            } & {
                request?: Request;
            } & {
                headers?: HeadersInit;
            } & {
                asResponse?: boolean;
                returnHeaders?: boolean;
                use?: better_call.Middleware[];
                path?: string;
            } & {
                asResponse?: AsResponse | undefined;
                returnHeaders?: ReturnHeaders | undefined;
            }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                headers: Headers;
                response: {
                    status: boolean;
                };
            } : {
                status: boolean;
            }>;
            options: {
                method: "POST";
                body: zod.ZodObject<{
                    email: zod.ZodString;
                    redirectTo: zod.ZodOptional<zod.ZodString>;
                }, zod_v4_core.$strip>;
                metadata: {
                    openapi: {
                        description: string;
                        responses: {
                            "200": {
                                description: string;
                                content: {
                                    "application/json": {
                                        schema: {
                                            type: "object";
                                            properties: {
                                                status: {
                                                    type: string;
                                                };
                                                message: {
                                                    type: string;
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            } & {
                use: any[];
            };
            path: "/forget-password";
        };
        resetPassword: {
            <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                body: {
                    newPassword: string;
                    token?: string | undefined;
                };
            } & {
                method?: "POST" | undefined;
            } & {
                query?: {
                    token?: string | undefined;
                } | undefined;
            } & {
                params?: Record<string, any>;
            } & {
                request?: Request;
            } & {
                headers?: HeadersInit;
            } & {
                asResponse?: boolean;
                returnHeaders?: boolean;
                use?: better_call.Middleware[];
                path?: string;
            } & {
                asResponse?: AsResponse | undefined;
                returnHeaders?: ReturnHeaders | undefined;
            }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                headers: Headers;
                response: {
                    status: boolean;
                };
            } : {
                status: boolean;
            }>;
            options: {
                method: "POST";
                query: zod.ZodOptional<zod.ZodObject<{
                    token: zod.ZodOptional<zod.ZodString>;
                }, zod_v4_core.$strip>>;
                body: zod.ZodObject<{
                    newPassword: zod.ZodString;
                    token: zod.ZodOptional<zod.ZodString>;
                }, zod_v4_core.$strip>;
                metadata: {
                    openapi: {
                        description: string;
                        responses: {
                            "200": {
                                description: string;
                                content: {
                                    "application/json": {
                                        schema: {
                                            type: "object";
                                            properties: {
                                                status: {
                                                    type: string;
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            } & {
                use: any[];
            };
            path: "/reset-password";
        };
        verifyEmail: {
            <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                body?: undefined;
            } & {
                method?: "GET" | undefined;
            } & {
                query: {
                    token: string;
                    callbackURL?: string | undefined;
                };
            } & {
                params?: Record<string, any>;
            } & {
                request?: Request;
            } & {
                headers?: HeadersInit;
            } & {
                asResponse?: boolean;
                returnHeaders?: boolean;
                use?: better_call.Middleware[];
                path?: string;
            } & {
                asResponse?: AsResponse | undefined;
                returnHeaders?: ReturnHeaders | undefined;
            }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                headers: Headers;
                response: void | {
                    status: boolean;
                    user: {
                        id: any;
                        email: any;
                        name: any;
                        image: any;
                        emailVerified: any;
                        createdAt: any;
                        updatedAt: any;
                    };
                } | {
                    status: boolean;
                    user: null;
                };
            } : void | {
                status: boolean;
                user: {
                    id: any;
                    email: any;
                    name: any;
                    image: any;
                    emailVerified: any;
                    createdAt: any;
                    updatedAt: any;
                };
            } | {
                status: boolean;
                user: null;
            }>;
            options: {
                method: "GET";
                query: zod.ZodObject<{
                    token: zod.ZodString;
                    callbackURL: zod.ZodOptional<zod.ZodString>;
                }, zod_v4_core.$strip>;
                use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<void>)[];
                metadata: {
                    openapi: {
                        description: string;
                        parameters: ({
                            name: string;
                            in: "query";
                            description: string;
                            required: true;
                            schema: {
                                type: "string";
                            };
                        } | {
                            name: string;
                            in: "query";
                            description: string;
                            required: false;
                            schema: {
                                type: "string";
                            };
                        })[];
                        responses: {
                            "200": {
                                description: string;
                                content: {
                                    "application/json": {
                                        schema: {
                                            type: "object";
                                            properties: {
                                                user: {
                                                    type: string;
                                                    properties: {
                                                        id: {
                                                            type: string;
                                                            description: string;
                                                        };
                                                        email: {
                                                            type: string;
                                                            description: string;
                                                        };
                                                        name: {
                                                            type: string;
                                                            description: string;
                                                        };
                                                        image: {
                                                            type: string;
                                                            description: string;
                                                        };
                                                        emailVerified: {
                                                            type: string;
                                                            description: string;
                                                        };
                                                        createdAt: {
                                                            type: string;
                                                            description: string;
                                                        };
                                                        updatedAt: {
                                                            type: string;
                                                            description: string;
                                                        };
                                                    };
                                                    required: string[];
                                                };
                                                status: {
                                                    type: string;
                                                    description: string;
                                                };
                                            };
                                            required: string[];
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            } & {
                use: any[];
            };
            path: "/verify-email";
        };
        sendVerificationEmail: {
            <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                body: {
                    email: string;
                    callbackURL?: string | undefined;
                };
            } & {
                method?: "POST" | undefined;
            } & {
                query?: Record<string, any> | undefined;
            } & {
                params?: Record<string, any>;
            } & {
                request?: Request;
            } & {
                headers?: HeadersInit;
            } & {
                asResponse?: boolean;
                returnHeaders?: boolean;
                use?: better_call.Middleware[];
                path?: string;
            } & {
                asResponse?: AsResponse | undefined;
                returnHeaders?: ReturnHeaders | undefined;
            }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                headers: Headers;
                response: {
                    status: boolean;
                };
            } : {
                status: boolean;
            }>;
            options: {
                method: "POST";
                body: zod.ZodObject<{
                    email: zod.ZodEmail;
                    callbackURL: zod.ZodOptional<zod.ZodString>;
                }, zod_v4_core.$strip>;
                metadata: {
                    openapi: {
                        description: string;
                        requestBody: {
                            content: {
                                "application/json": {
                                    schema: {
                                        type: "object";
                                        properties: {
                                            email: {
                                                type: string;
                                                description: string;
                                                example: string;
                                            };
                                            callbackURL: {
                                                type: string;
                                                description: string;
                                                example: string;
                                                nullable: boolean;
                                            };
                                        };
                                        required: string[];
                                    };
                                };
                            };
                        };
                        responses: {
                            "200": {
                                description: string;
                                content: {
                                    "application/json": {
                                        schema: {
                                            type: "object";
                                            properties: {
                                                status: {
                                                    type: string;
                                                    description: string;
                                                    example: boolean;
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                            "400": {
                                description: string;
                                content: {
                                    "application/json": {
                                        schema: {
                                            type: "object";
                                            properties: {
                                                message: {
                                                    type: string;
                                                    description: string;
                                                    example: string;
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            } & {
                use: any[];
            };
            path: "/send-verification-email";
        };
        changeEmail: {
            <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                body: {
                    newEmail: string;
                    callbackURL?: string | undefined;
                };
            } & {
                method?: "POST" | undefined;
            } & {
                query?: Record<string, any> | undefined;
            } & {
                params?: Record<string, any>;
            } & {
                request?: Request;
            } & {
                headers?: HeadersInit;
            } & {
                asResponse?: boolean;
                returnHeaders?: boolean;
                use?: better_call.Middleware[];
                path?: string;
            } & {
                asResponse?: AsResponse | undefined;
                returnHeaders?: ReturnHeaders | undefined;
            }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                headers: Headers;
                response: {
                    status: boolean;
                };
            } : {
                status: boolean;
            }>;
            options: {
                method: "POST";
                body: zod.ZodObject<{
                    newEmail: zod.ZodEmail;
                    callbackURL: zod.ZodOptional<zod.ZodString>;
                }, zod_v4_core.$strip>;
                use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<{
                    session: {
                        session: Record<string, any> & {
                            id: string;
                            userId: string;
                            expiresAt: Date;
                            createdAt: Date;
                            updatedAt: Date;
                            token: string;
                            ipAddress?: string | null | undefined;
                            userAgent?: string | null | undefined;
                        };
                        user: Record<string, any> & {
                            id: string;
                            email: string;
                            emailVerified: boolean;
                            name: string;
                            createdAt: Date;
                            updatedAt: Date;
                            image?: string | null | undefined;
                        };
                    };
                }>)[];
                metadata: {
                    openapi: {
                        responses: {
                            "200": {
                                description: string;
                                content: {
                                    "application/json": {
                                        schema: {
                                            type: "object";
                                            properties: {
                                                status: {
                                                    type: string;
                                                    description: string;
                                                };
                                                message: {
                                                    type: string;
                                                    enum: string[];
                                                    description: string;
                                                    nullable: boolean;
                                                };
                                            };
                                            required: string[];
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            } & {
                use: any[];
            };
            path: "/change-email";
        };
        changePassword: {
            <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                body: {
                    newPassword: string;
                    currentPassword: string;
                    revokeOtherSessions?: boolean | undefined;
                };
            } & {
                method?: "POST" | undefined;
            } & {
                query?: Record<string, any> | undefined;
            } & {
                params?: Record<string, any>;
            } & {
                request?: Request;
            } & {
                headers?: HeadersInit;
            } & {
                asResponse?: boolean;
                returnHeaders?: boolean;
                use?: better_call.Middleware[];
                path?: string;
            } & {
                asResponse?: AsResponse | undefined;
                returnHeaders?: ReturnHeaders | undefined;
            }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                headers: Headers;
                response: {
                    token: string | null;
                    user: {
                        id: string;
                        email: string;
                        name: string;
                        image: string | null | undefined;
                        emailVerified: boolean;
                        createdAt: Date;
                        updatedAt: Date;
                    };
                };
            } : {
                token: string | null;
                user: {
                    id: string;
                    email: string;
                    name: string;
                    image: string | null | undefined;
                    emailVerified: boolean;
                    createdAt: Date;
                    updatedAt: Date;
                };
            }>;
            options: {
                method: "POST";
                body: zod.ZodObject<{
                    newPassword: zod.ZodString;
                    currentPassword: zod.ZodString;
                    revokeOtherSessions: zod.ZodOptional<zod.ZodBoolean>;
                }, zod_v4_core.$strip>;
                use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<{
                    session: {
                        session: Record<string, any> & {
                            id: string;
                            userId: string;
                            expiresAt: Date;
                            createdAt: Date;
                            updatedAt: Date;
                            token: string;
                            ipAddress?: string | null | undefined;
                            userAgent?: string | null | undefined;
                        };
                        user: Record<string, any> & {
                            id: string;
                            email: string;
                            emailVerified: boolean;
                            name: string;
                            createdAt: Date;
                            updatedAt: Date;
                            image?: string | null | undefined;
                        };
                    };
                }>)[];
                metadata: {
                    openapi: {
                        description: string;
                        responses: {
                            "200": {
                                description: string;
                                content: {
                                    "application/json": {
                                        schema: {
                                            type: "object";
                                            properties: {
                                                token: {
                                                    type: string;
                                                    nullable: boolean;
                                                    description: string;
                                                };
                                                user: {
                                                    type: string;
                                                    properties: {
                                                        id: {
                                                            type: string;
                                                            description: string;
                                                        };
                                                        email: {
                                                            type: string;
                                                            format: string;
                                                            description: string;
                                                        };
                                                        name: {
                                                            type: string;
                                                            description: string;
                                                        };
                                                        image: {
                                                            type: string;
                                                            format: string;
                                                            nullable: boolean;
                                                            description: string;
                                                        };
                                                        emailVerified: {
                                                            type: string;
                                                            description: string;
                                                        };
                                                        createdAt: {
                                                            type: string;
                                                            format: string;
                                                            description: string;
                                                        };
                                                        updatedAt: {
                                                            type: string;
                                                            format: string;
                                                            description: string;
                                                        };
                                                    };
                                                    required: string[];
                                                };
                                            };
                                            required: string[];
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            } & {
                use: any[];
            };
            path: "/change-password";
        };
        setPassword: {
            <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                body: {
                    newPassword: string;
                };
            } & {
                method?: "POST" | undefined;
            } & {
                query?: Record<string, any> | undefined;
            } & {
                params?: Record<string, any>;
            } & {
                request?: Request;
            } & {
                headers?: HeadersInit;
            } & {
                asResponse?: boolean;
                returnHeaders?: boolean;
                use?: better_call.Middleware[];
                path?: string;
            } & {
                asResponse?: AsResponse | undefined;
                returnHeaders?: ReturnHeaders | undefined;
            }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                headers: Headers;
                response: {
                    status: boolean;
                };
            } : {
                status: boolean;
            }>;
            options: {
                method: "POST";
                body: zod.ZodObject<{
                    newPassword: zod.ZodString;
                }, zod_v4_core.$strip>;
                metadata: {
                    SERVER_ONLY: true;
                };
                use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<{
                    session: {
                        session: Record<string, any> & {
                            id: string;
                            userId: string;
                            expiresAt: Date;
                            createdAt: Date;
                            updatedAt: Date;
                            token: string;
                            ipAddress?: string | null | undefined;
                            userAgent?: string | null | undefined;
                        };
                        user: Record<string, any> & {
                            id: string;
                            email: string;
                            emailVerified: boolean;
                            name: string;
                            createdAt: Date;
                            updatedAt: Date;
                            image?: string | null | undefined;
                        };
                    };
                }>)[];
            } & {
                use: any[];
            };
            path: "/set-password";
        };
        updateUser: {
            <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                body: Partial<{}> & {
                    name?: string;
                    image?: string;
                };
            } & {
                method?: "POST" | undefined;
            } & {
                query?: Record<string, any> | undefined;
            } & {
                params?: Record<string, any>;
            } & {
                request?: Request;
            } & {
                headers?: HeadersInit;
            } & {
                asResponse?: boolean;
                returnHeaders?: boolean;
                use?: better_call.Middleware[];
                path?: string;
            } & {
                asResponse?: AsResponse | undefined;
                returnHeaders?: ReturnHeaders | undefined;
            }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                headers: Headers;
                response: {
                    status: boolean;
                };
            } : {
                status: boolean;
            }>;
            options: {
                method: "POST";
                body: zod.ZodRecord<zod.ZodString, zod.ZodAny>;
                use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<{
                    session: {
                        session: Record<string, any> & {
                            id: string;
                            userId: string;
                            expiresAt: Date;
                            createdAt: Date;
                            updatedAt: Date;
                            token: string;
                            ipAddress?: string | null | undefined;
                            userAgent?: string | null | undefined;
                        };
                        user: Record<string, any> & {
                            id: string;
                            email: string;
                            emailVerified: boolean;
                            name: string;
                            createdAt: Date;
                            updatedAt: Date;
                            image?: string | null | undefined;
                        };
                    };
                }>)[];
                metadata: {
                    $Infer: {
                        body: Partial<{}> & {
                            name?: string;
                            image?: string;
                        };
                    };
                    openapi: {
                        description: string;
                        requestBody: {
                            content: {
                                "application/json": {
                                    schema: {
                                        type: "object";
                                        properties: {
                                            name: {
                                                type: string;
                                                description: string;
                                            };
                                            image: {
                                                type: string;
                                                description: string;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                        responses: {
                            "200": {
                                description: string;
                                content: {
                                    "application/json": {
                                        schema: {
                                            type: "object";
                                            properties: {
                                                status: {
                                                    type: string;
                                                    description: string;
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            } & {
                use: any[];
            };
            path: "/update-user";
        };
        deleteUser: {
            <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                body: {
                    callbackURL?: string | undefined;
                    password?: string | undefined;
                    token?: string | undefined;
                };
            } & {
                method?: "POST" | undefined;
            } & {
                query?: Record<string, any> | undefined;
            } & {
                params?: Record<string, any>;
            } & {
                request?: Request;
            } & {
                headers?: HeadersInit;
            } & {
                asResponse?: boolean;
                returnHeaders?: boolean;
                use?: better_call.Middleware[];
                path?: string;
            } & {
                asResponse?: AsResponse | undefined;
                returnHeaders?: ReturnHeaders | undefined;
            }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                headers: Headers;
                response: {
                    success: boolean;
                    message: string;
                };
            } : {
                success: boolean;
                message: string;
            }>;
            options: {
                method: "POST";
                use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<{
                    session: {
                        session: Record<string, any> & {
                            id: string;
                            userId: string;
                            expiresAt: Date;
                            createdAt: Date;
                            updatedAt: Date;
                            token: string;
                            ipAddress?: string | null | undefined;
                            userAgent?: string | null | undefined;
                        };
                        user: Record<string, any> & {
                            id: string;
                            email: string;
                            emailVerified: boolean;
                            name: string;
                            createdAt: Date;
                            updatedAt: Date;
                            image?: string | null | undefined;
                        };
                    };
                }>)[];
                body: zod.ZodObject<{
                    callbackURL: zod.ZodOptional<zod.ZodString>;
                    password: zod.ZodOptional<zod.ZodString>;
                    token: zod.ZodOptional<zod.ZodString>;
                }, zod_v4_core.$strip>;
                metadata: {
                    openapi: {
                        description: string;
                        responses: {
                            "200": {
                                description: string;
                                content: {
                                    "application/json": {
                                        schema: {
                                            type: "object";
                                            properties: {
                                                success: {
                                                    type: string;
                                                    description: string;
                                                };
                                                message: {
                                                    type: string;
                                                    enum: string[];
                                                    description: string;
                                                };
                                            };
                                            required: string[];
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            } & {
                use: any[];
            };
            path: "/delete-user";
        };
        forgetPasswordCallback: {
            <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                body?: undefined;
            } & {
                method?: "GET" | undefined;
            } & {
                query: {
                    callbackURL: string;
                };
            } & {
                params: {
                    token: string;
                };
            } & {
                request?: Request;
            } & {
                headers?: HeadersInit;
            } & {
                asResponse?: boolean;
                returnHeaders?: boolean;
                use?: better_call.Middleware[];
                path?: string;
            } & {
                asResponse?: AsResponse | undefined;
                returnHeaders?: ReturnHeaders | undefined;
            }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                headers: Headers;
                response: never;
            } : never>;
            options: {
                method: "GET";
                query: zod.ZodObject<{
                    callbackURL: zod.ZodString;
                }, zod_v4_core.$strip>;
                use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<void>)[];
                metadata: {
                    openapi: {
                        description: string;
                        responses: {
                            "200": {
                                description: string;
                                content: {
                                    "application/json": {
                                        schema: {
                                            type: "object";
                                            properties: {
                                                token: {
                                                    type: string;
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            } & {
                use: any[];
            };
            path: "/reset-password/:token";
        };
        requestPasswordReset: {
            <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                body: {
                    email: string;
                    redirectTo?: string | undefined;
                };
            } & {
                method?: "POST" | undefined;
            } & {
                query?: Record<string, any> | undefined;
            } & {
                params?: Record<string, any>;
            } & {
                request?: Request;
            } & {
                headers?: HeadersInit;
            } & {
                asResponse?: boolean;
                returnHeaders?: boolean;
                use?: better_call.Middleware[];
                path?: string;
            } & {
                asResponse?: AsResponse | undefined;
                returnHeaders?: ReturnHeaders | undefined;
            }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                headers: Headers;
                response: {
                    status: boolean;
                };
            } : {
                status: boolean;
            }>;
            options: {
                method: "POST";
                body: zod.ZodObject<{
                    email: zod.ZodEmail;
                    redirectTo: zod.ZodOptional<zod.ZodString>;
                }, zod_v4_core.$strip>;
                metadata: {
                    openapi: {
                        description: string;
                        responses: {
                            "200": {
                                description: string;
                                content: {
                                    "application/json": {
                                        schema: {
                                            type: "object";
                                            properties: {
                                                status: {
                                                    type: string;
                                                };
                                                message: {
                                                    type: string;
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            } & {
                use: any[];
            };
            path: "/request-password-reset";
        };
        requestPasswordResetCallback: {
            <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                body?: undefined;
            } & {
                method?: "GET" | undefined;
            } & {
                query: {
                    callbackURL: string;
                };
            } & {
                params: {
                    token: string;
                };
            } & {
                request?: Request;
            } & {
                headers?: HeadersInit;
            } & {
                asResponse?: boolean;
                returnHeaders?: boolean;
                use?: better_call.Middleware[];
                path?: string;
            } & {
                asResponse?: AsResponse | undefined;
                returnHeaders?: ReturnHeaders | undefined;
            }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                headers: Headers;
                response: never;
            } : never>;
            options: {
                method: "GET";
                query: zod.ZodObject<{
                    callbackURL: zod.ZodString;
                }, zod_v4_core.$strip>;
                use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<void>)[];
                metadata: {
                    openapi: {
                        description: string;
                        responses: {
                            "200": {
                                description: string;
                                content: {
                                    "application/json": {
                                        schema: {
                                            type: "object";
                                            properties: {
                                                token: {
                                                    type: string;
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            } & {
                use: any[];
            };
            path: "/reset-password/:token";
        };
        listSessions: {
            <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                body?: undefined;
            } & {
                method?: "GET" | undefined;
            } & {
                query?: Record<string, any> | undefined;
            } & {
                params?: Record<string, any>;
            } & {
                request?: Request;
            } & {
                headers: HeadersInit;
            } & {
                asResponse?: boolean;
                returnHeaders?: boolean;
                use?: better_call.Middleware[];
                path?: string;
            } & {
                asResponse?: AsResponse | undefined;
                returnHeaders?: ReturnHeaders | undefined;
            }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                headers: Headers;
                response: Prettify<{
                    id: string;
                    userId: string;
                    expiresAt: Date;
                    createdAt: Date;
                    updatedAt: Date;
                    token: string;
                    ipAddress?: string | null | undefined;
                    userAgent?: string | null | undefined;
                }>[];
            } : Prettify<{
                id: string;
                userId: string;
                expiresAt: Date;
                createdAt: Date;
                updatedAt: Date;
                token: string;
                ipAddress?: string | null | undefined;
                userAgent?: string | null | undefined;
            }>[]>;
            options: {
                method: "GET";
                use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<{
                    session: {
                        session: Record<string, any> & {
                            id: string;
                            userId: string;
                            expiresAt: Date;
                            createdAt: Date;
                            updatedAt: Date;
                            token: string;
                            ipAddress?: string | null | undefined;
                            userAgent?: string | null | undefined;
                        };
                        user: Record<string, any> & {
                            id: string;
                            email: string;
                            emailVerified: boolean;
                            name: string;
                            createdAt: Date;
                            updatedAt: Date;
                            image?: string | null | undefined;
                        };
                    };
                }>)[];
                requireHeaders: true;
                metadata: {
                    openapi: {
                        description: string;
                        responses: {
                            "200": {
                                description: string;
                                content: {
                                    "application/json": {
                                        schema: {
                                            type: "array";
                                            items: {
                                                $ref: string;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            } & {
                use: any[];
            };
            path: "/list-sessions";
        };
        revokeSession: {
            <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                body: {
                    token: string;
                };
            } & {
                method?: "POST" | undefined;
            } & {
                query?: Record<string, any> | undefined;
            } & {
                params?: Record<string, any>;
            } & {
                request?: Request;
            } & {
                headers: HeadersInit;
            } & {
                asResponse?: boolean;
                returnHeaders?: boolean;
                use?: better_call.Middleware[];
                path?: string;
            } & {
                asResponse?: AsResponse | undefined;
                returnHeaders?: ReturnHeaders | undefined;
            }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                headers: Headers;
                response: {
                    status: boolean;
                };
            } : {
                status: boolean;
            }>;
            options: {
                method: "POST";
                body: zod.ZodObject<{
                    token: zod.ZodString;
                }, zod_v4_core.$strip>;
                use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<{
                    session: {
                        session: Record<string, any> & {
                            id: string;
                            userId: string;
                            expiresAt: Date;
                            createdAt: Date;
                            updatedAt: Date;
                            token: string;
                            ipAddress?: string | null | undefined;
                            userAgent?: string | null | undefined;
                        };
                        user: Record<string, any> & {
                            id: string;
                            email: string;
                            emailVerified: boolean;
                            name: string;
                            createdAt: Date;
                            updatedAt: Date;
                            image?: string | null | undefined;
                        };
                    };
                }>)[];
                requireHeaders: true;
                metadata: {
                    openapi: {
                        description: string;
                        requestBody: {
                            content: {
                                "application/json": {
                                    schema: {
                                        type: "object";
                                        properties: {
                                            token: {
                                                type: string;
                                                description: string;
                                            };
                                        };
                                        required: string[];
                                    };
                                };
                            };
                        };
                        responses: {
                            "200": {
                                description: string;
                                content: {
                                    "application/json": {
                                        schema: {
                                            type: "object";
                                            properties: {
                                                status: {
                                                    type: string;
                                                    description: string;
                                                };
                                            };
                                            required: string[];
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            } & {
                use: any[];
            };
            path: "/revoke-session";
        };
        revokeSessions: {
            <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                body?: undefined;
            } & {
                method?: "POST" | undefined;
            } & {
                query?: Record<string, any> | undefined;
            } & {
                params?: Record<string, any>;
            } & {
                request?: Request;
            } & {
                headers: HeadersInit;
            } & {
                asResponse?: boolean;
                returnHeaders?: boolean;
                use?: better_call.Middleware[];
                path?: string;
            } & {
                asResponse?: AsResponse | undefined;
                returnHeaders?: ReturnHeaders | undefined;
            }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                headers: Headers;
                response: {
                    status: boolean;
                };
            } : {
                status: boolean;
            }>;
            options: {
                method: "POST";
                use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<{
                    session: {
                        session: Record<string, any> & {
                            id: string;
                            userId: string;
                            expiresAt: Date;
                            createdAt: Date;
                            updatedAt: Date;
                            token: string;
                            ipAddress?: string | null | undefined;
                            userAgent?: string | null | undefined;
                        };
                        user: Record<string, any> & {
                            id: string;
                            email: string;
                            emailVerified: boolean;
                            name: string;
                            createdAt: Date;
                            updatedAt: Date;
                            image?: string | null | undefined;
                        };
                    };
                }>)[];
                requireHeaders: true;
                metadata: {
                    openapi: {
                        description: string;
                        responses: {
                            "200": {
                                description: string;
                                content: {
                                    "application/json": {
                                        schema: {
                                            type: "object";
                                            properties: {
                                                status: {
                                                    type: string;
                                                    description: string;
                                                };
                                            };
                                            required: string[];
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            } & {
                use: any[];
            };
            path: "/revoke-sessions";
        };
        revokeOtherSessions: {
            <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                body?: undefined;
            } & {
                method?: "POST" | undefined;
            } & {
                query?: Record<string, any> | undefined;
            } & {
                params?: Record<string, any>;
            } & {
                request?: Request;
            } & {
                headers: HeadersInit;
            } & {
                asResponse?: boolean;
                returnHeaders?: boolean;
                use?: better_call.Middleware[];
                path?: string;
            } & {
                asResponse?: AsResponse | undefined;
                returnHeaders?: ReturnHeaders | undefined;
            }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                headers: Headers;
                response: {
                    status: boolean;
                };
            } : {
                status: boolean;
            }>;
            options: {
                method: "POST";
                requireHeaders: true;
                use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<{
                    session: {
                        session: Record<string, any> & {
                            id: string;
                            userId: string;
                            expiresAt: Date;
                            createdAt: Date;
                            updatedAt: Date;
                            token: string;
                            ipAddress?: string | null | undefined;
                            userAgent?: string | null | undefined;
                        };
                        user: Record<string, any> & {
                            id: string;
                            email: string;
                            emailVerified: boolean;
                            name: string;
                            createdAt: Date;
                            updatedAt: Date;
                            image?: string | null | undefined;
                        };
                    };
                }>)[];
                metadata: {
                    openapi: {
                        description: string;
                        responses: {
                            "200": {
                                description: string;
                                content: {
                                    "application/json": {
                                        schema: {
                                            type: "object";
                                            properties: {
                                                status: {
                                                    type: string;
                                                    description: string;
                                                };
                                            };
                                            required: string[];
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            } & {
                use: any[];
            };
            path: "/revoke-other-sessions";
        };
        linkSocialAccount: {
            <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                body: {
                    provider: unknown;
                    callbackURL?: string | undefined;
                    idToken?: {
                        token: string;
                        nonce?: string | undefined;
                        accessToken?: string | undefined;
                        refreshToken?: string | undefined;
                        scopes?: string[] | undefined;
                    } | undefined;
                    requestSignUp?: boolean | undefined;
                    scopes?: string[] | undefined;
                    errorCallbackURL?: string | undefined;
                    disableRedirect?: boolean | undefined;
                };
            } & {
                method?: "POST" | undefined;
            } & {
                query?: Record<string, any> | undefined;
            } & {
                params?: Record<string, any>;
            } & {
                request?: Request;
            } & {
                headers: HeadersInit;
            } & {
                asResponse?: boolean;
                returnHeaders?: boolean;
                use?: better_call.Middleware[];
                path?: string;
            } & {
                asResponse?: AsResponse | undefined;
                returnHeaders?: ReturnHeaders | undefined;
            }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                headers: Headers;
                response: {
                    url: string;
                    redirect: boolean;
                };
            } : {
                url: string;
                redirect: boolean;
            }>;
            options: {
                method: "POST";
                requireHeaders: true;
                body: zod.ZodObject<{
                    callbackURL: zod.ZodOptional<zod.ZodString>;
                    provider: zod.ZodType<"github" | "apple" | "discord" | "facebook" | "microsoft" | "google" | "huggingface" | "slack" | "spotify" | "twitch" | "twitter" | "dropbox" | "kick" | "linear" | "linkedin" | "gitlab" | "tiktok" | "reddit" | "roblox" | "vk" | "zoom" | "notion" | (string & {}), unknown, zod_v4_core.$ZodTypeInternals<"github" | "apple" | "discord" | "facebook" | "microsoft" | "google" | "huggingface" | "slack" | "spotify" | "twitch" | "twitter" | "dropbox" | "kick" | "linear" | "linkedin" | "gitlab" | "tiktok" | "reddit" | "roblox" | "vk" | "zoom" | "notion" | (string & {}), unknown>>;
                    idToken: zod.ZodOptional<zod.ZodObject<{
                        token: zod.ZodString;
                        nonce: zod.ZodOptional<zod.ZodString>;
                        accessToken: zod.ZodOptional<zod.ZodString>;
                        refreshToken: zod.ZodOptional<zod.ZodString>;
                        scopes: zod.ZodOptional<zod.ZodArray<zod.ZodString>>;
                    }, zod_v4_core.$strip>>;
                    requestSignUp: zod.ZodOptional<zod.ZodBoolean>;
                    scopes: zod.ZodOptional<zod.ZodArray<zod.ZodString>>;
                    errorCallbackURL: zod.ZodOptional<zod.ZodString>;
                    disableRedirect: zod.ZodOptional<zod.ZodBoolean>;
                }, zod_v4_core.$strip>;
                use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<{
                    session: {
                        session: Record<string, any> & {
                            id: string;
                            userId: string;
                            expiresAt: Date;
                            createdAt: Date;
                            updatedAt: Date;
                            token: string;
                            ipAddress?: string | null | undefined;
                            userAgent?: string | null | undefined;
                        };
                        user: Record<string, any> & {
                            id: string;
                            email: string;
                            emailVerified: boolean;
                            name: string;
                            createdAt: Date;
                            updatedAt: Date;
                            image?: string | null | undefined;
                        };
                    };
                }>)[];
                metadata: {
                    openapi: {
                        description: string;
                        responses: {
                            "200": {
                                description: string;
                                content: {
                                    "application/json": {
                                        schema: {
                                            type: "object";
                                            properties: {
                                                url: {
                                                    type: string;
                                                    description: string;
                                                };
                                                redirect: {
                                                    type: string;
                                                    description: string;
                                                };
                                                status: {
                                                    type: string;
                                                };
                                            };
                                            required: string[];
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            } & {
                use: any[];
            };
            path: "/link-social";
        };
        listUserAccounts: {
            <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0?: ({
                body?: undefined;
            } & {
                method?: "GET" | undefined;
            } & {
                query?: Record<string, any> | undefined;
            } & {
                params?: Record<string, any>;
            } & {
                request?: Request;
            } & {
                headers?: HeadersInit;
            } & {
                asResponse?: boolean;
                returnHeaders?: boolean;
                use?: better_call.Middleware[];
                path?: string;
            } & {
                asResponse?: AsResponse | undefined;
                returnHeaders?: ReturnHeaders | undefined;
            }) | undefined): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                headers: Headers;
                response: {
                    id: string;
                    provider: string;
                    createdAt: Date;
                    updatedAt: Date;
                    accountId: string;
                    scopes: string[];
                }[];
            } : {
                id: string;
                provider: string;
                createdAt: Date;
                updatedAt: Date;
                accountId: string;
                scopes: string[];
            }[]>;
            options: {
                method: "GET";
                use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<{
                    session: {
                        session: Record<string, any> & {
                            id: string;
                            userId: string;
                            expiresAt: Date;
                            createdAt: Date;
                            updatedAt: Date;
                            token: string;
                            ipAddress?: string | null | undefined;
                            userAgent?: string | null | undefined;
                        };
                        user: Record<string, any> & {
                            id: string;
                            email: string;
                            emailVerified: boolean;
                            name: string;
                            createdAt: Date;
                            updatedAt: Date;
                            image?: string | null | undefined;
                        };
                    };
                }>)[];
                metadata: {
                    openapi: {
                        description: string;
                        responses: {
                            "200": {
                                description: string;
                                content: {
                                    "application/json": {
                                        schema: {
                                            type: "array";
                                            items: {
                                                type: string;
                                                properties: {
                                                    id: {
                                                        type: string;
                                                    };
                                                    provider: {
                                                        type: string;
                                                    };
                                                    createdAt: {
                                                        type: string;
                                                        format: string;
                                                    };
                                                    updatedAt: {
                                                        type: string;
                                                        format: string;
                                                    };
                                                };
                                                accountId: {
                                                    type: string;
                                                };
                                                scopes: {
                                                    type: string;
                                                    items: {
                                                        type: string;
                                                    };
                                                };
                                            };
                                            required: string[];
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            } & {
                use: any[];
            };
            path: "/list-accounts";
        };
        deleteUserCallback: {
            <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                body?: undefined;
            } & {
                method?: "GET" | undefined;
            } & {
                query: {
                    token: string;
                    callbackURL?: string | undefined;
                };
            } & {
                params?: Record<string, any>;
            } & {
                request?: Request;
            } & {
                headers?: HeadersInit;
            } & {
                asResponse?: boolean;
                returnHeaders?: boolean;
                use?: better_call.Middleware[];
                path?: string;
            } & {
                asResponse?: AsResponse | undefined;
                returnHeaders?: ReturnHeaders | undefined;
            }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                headers: Headers;
                response: {
                    success: boolean;
                    message: string;
                };
            } : {
                success: boolean;
                message: string;
            }>;
            options: {
                method: "GET";
                query: zod.ZodObject<{
                    token: zod.ZodString;
                    callbackURL: zod.ZodOptional<zod.ZodString>;
                }, zod_v4_core.$strip>;
                use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<void>)[];
                metadata: {
                    openapi: {
                        description: string;
                        responses: {
                            "200": {
                                description: string;
                                content: {
                                    "application/json": {
                                        schema: {
                                            type: "object";
                                            properties: {
                                                success: {
                                                    type: string;
                                                    description: string;
                                                };
                                                message: {
                                                    type: string;
                                                    enum: string[];
                                                    description: string;
                                                };
                                            };
                                            required: string[];
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            } & {
                use: any[];
            };
            path: "/delete-user/callback";
        };
        unlinkAccount: {
            <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                body: {
                    providerId: string;
                    accountId?: string | undefined;
                };
            } & {
                method?: "POST" | undefined;
            } & {
                query?: Record<string, any> | undefined;
            } & {
                params?: Record<string, any>;
            } & {
                request?: Request;
            } & {
                headers?: HeadersInit;
            } & {
                asResponse?: boolean;
                returnHeaders?: boolean;
                use?: better_call.Middleware[];
                path?: string;
            } & {
                asResponse?: AsResponse | undefined;
                returnHeaders?: ReturnHeaders | undefined;
            }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                headers: Headers;
                response: {
                    status: boolean;
                };
            } : {
                status: boolean;
            }>;
            options: {
                method: "POST";
                body: zod.ZodObject<{
                    providerId: zod.ZodString;
                    accountId: zod.ZodOptional<zod.ZodString>;
                }, zod_v4_core.$strip>;
                use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<{
                    session: {
                        session: Record<string, any> & {
                            id: string;
                            userId: string;
                            expiresAt: Date;
                            createdAt: Date;
                            updatedAt: Date;
                            token: string;
                            ipAddress?: string | null | undefined;
                            userAgent?: string | null | undefined;
                        };
                        user: Record<string, any> & {
                            id: string;
                            email: string;
                            emailVerified: boolean;
                            name: string;
                            createdAt: Date;
                            updatedAt: Date;
                            image?: string | null | undefined;
                        };
                    };
                }>)[];
                metadata: {
                    openapi: {
                        description: string;
                        responses: {
                            "200": {
                                description: string;
                                content: {
                                    "application/json": {
                                        schema: {
                                            type: "object";
                                            properties: {
                                                status: {
                                                    type: string;
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            } & {
                use: any[];
            };
            path: "/unlink-account";
        };
        refreshToken: {
            <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                body: {
                    providerId: string;
                    accountId?: string | undefined;
                    userId?: string | undefined;
                };
            } & {
                method?: "POST" | undefined;
            } & {
                query?: Record<string, any> | undefined;
            } & {
                params?: Record<string, any>;
            } & {
                request?: Request;
            } & {
                headers?: HeadersInit;
            } & {
                asResponse?: boolean;
                returnHeaders?: boolean;
                use?: better_call.Middleware[];
                path?: string;
            } & {
                asResponse?: AsResponse | undefined;
                returnHeaders?: ReturnHeaders | undefined;
            }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                headers: Headers;
                response: OAuth2Tokens;
            } : OAuth2Tokens>;
            options: {
                method: "POST";
                body: zod.ZodObject<{
                    providerId: zod.ZodString;
                    accountId: zod.ZodOptional<zod.ZodString>;
                    userId: zod.ZodOptional<zod.ZodString>;
                }, zod_v4_core.$strip>;
                metadata: {
                    openapi: {
                        description: string;
                        responses: {
                            200: {
                                description: string;
                                content: {
                                    "application/json": {
                                        schema: {
                                            type: "object";
                                            properties: {
                                                tokenType: {
                                                    type: string;
                                                };
                                                idToken: {
                                                    type: string;
                                                };
                                                accessToken: {
                                                    type: string;
                                                };
                                                refreshToken: {
                                                    type: string;
                                                };
                                                accessTokenExpiresAt: {
                                                    type: string;
                                                    format: string;
                                                };
                                                refreshTokenExpiresAt: {
                                                    type: string;
                                                    format: string;
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                            400: {
                                description: string;
                            };
                        };
                    };
                };
            } & {
                use: any[];
            };
            path: "/refresh-token";
        };
        getAccessToken: {
            <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                body: {
                    providerId: string;
                    accountId?: string | undefined;
                    userId?: string | undefined;
                };
            } & {
                method?: "POST" | undefined;
            } & {
                query?: Record<string, any> | undefined;
            } & {
                params?: Record<string, any>;
            } & {
                request?: Request;
            } & {
                headers?: HeadersInit;
            } & {
                asResponse?: boolean;
                returnHeaders?: boolean;
                use?: better_call.Middleware[];
                path?: string;
            } & {
                asResponse?: AsResponse | undefined;
                returnHeaders?: ReturnHeaders | undefined;
            }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                headers: Headers;
                response: {
                    accessToken: string;
                    accessTokenExpiresAt: Date | undefined;
                    scopes: string[];
                    idToken: string | undefined;
                };
            } : {
                accessToken: string;
                accessTokenExpiresAt: Date | undefined;
                scopes: string[];
                idToken: string | undefined;
            }>;
            options: {
                method: "POST";
                body: zod.ZodObject<{
                    providerId: zod.ZodString;
                    accountId: zod.ZodOptional<zod.ZodString>;
                    userId: zod.ZodOptional<zod.ZodString>;
                }, zod_v4_core.$strip>;
                metadata: {
                    openapi: {
                        description: string;
                        responses: {
                            200: {
                                description: string;
                                content: {
                                    "application/json": {
                                        schema: {
                                            type: "object";
                                            properties: {
                                                tokenType: {
                                                    type: string;
                                                };
                                                idToken: {
                                                    type: string;
                                                };
                                                accessToken: {
                                                    type: string;
                                                };
                                                refreshToken: {
                                                    type: string;
                                                };
                                                accessTokenExpiresAt: {
                                                    type: string;
                                                    format: string;
                                                };
                                                refreshTokenExpiresAt: {
                                                    type: string;
                                                    format: string;
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                            400: {
                                description: string;
                            };
                        };
                    };
                };
            } & {
                use: any[];
            };
            path: "/get-access-token";
        };
        accountInfo: {
            <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                body: {
                    accountId: string;
                };
            } & {
                method?: "POST" | undefined;
            } & {
                query?: Record<string, any> | undefined;
            } & {
                params?: Record<string, any>;
            } & {
                request?: Request;
            } & {
                headers?: HeadersInit;
            } & {
                asResponse?: boolean;
                returnHeaders?: boolean;
                use?: better_call.Middleware[];
                path?: string;
            } & {
                asResponse?: AsResponse | undefined;
                returnHeaders?: ReturnHeaders | undefined;
            }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                headers: Headers;
                response: {
                    user: {
                        id: string | number;
                        name?: string;
                        email?: string | null;
                        image?: string;
                        emailVerified: boolean;
                    };
                    data: Record<string, any>;
                } | null;
            } : {
                user: {
                    id: string | number;
                    name?: string;
                    email?: string | null;
                    image?: string;
                    emailVerified: boolean;
                };
                data: Record<string, any>;
            } | null>;
            options: {
                method: "POST";
                use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<{
                    session: {
                        session: Record<string, any> & {
                            id: string;
                            userId: string;
                            expiresAt: Date;
                            createdAt: Date;
                            updatedAt: Date;
                            token: string;
                            ipAddress?: string | null | undefined;
                            userAgent?: string | null | undefined;
                        };
                        user: Record<string, any> & {
                            id: string;
                            email: string;
                            emailVerified: boolean;
                            name: string;
                            createdAt: Date;
                            updatedAt: Date;
                            image?: string | null | undefined;
                        };
                    };
                }>)[];
                metadata: {
                    openapi: {
                        description: string;
                        responses: {
                            "200": {
                                description: string;
                                content: {
                                    "application/json": {
                                        schema: {
                                            type: "object";
                                            properties: {
                                                user: {
                                                    type: string;
                                                    properties: {
                                                        id: {
                                                            type: string;
                                                        };
                                                        name: {
                                                            type: string;
                                                        };
                                                        email: {
                                                            type: string;
                                                        };
                                                        image: {
                                                            type: string;
                                                        };
                                                        emailVerified: {
                                                            type: string;
                                                        };
                                                    };
                                                    required: string[];
                                                };
                                                data: {
                                                    type: string;
                                                    properties: {};
                                                    additionalProperties: boolean;
                                                };
                                            };
                                            required: string[];
                                            additionalProperties: boolean;
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
                body: zod.ZodObject<{
                    accountId: zod.ZodString;
                }, zod_v4_core.$strip>;
            } & {
                use: any[];
            };
            path: "/account-info";
        };
    }>, (C extends undefined ? {} : C) & {
        baseURL: string | undefined;
        fetchOptions: {
            customFetchImpl: (url: string | URL | Request, init?: RequestInit) => Promise<Response>;
        };
    }>> & (((C extends undefined ? {} : C) & {
        baseURL: string | undefined;
        fetchOptions: {
            customFetchImpl: (url: string | URL | Request, init?: RequestInit) => Promise<Response>;
        };
    })["plugins"] extends (infer Plugin_1)[] ? UnionToIntersection<Plugin_1 extends BetterAuthClientPlugin ? Plugin_1["getActions"] extends (...args: any) => infer Actions ? Actions : {} : {}> : {}) & UnionToIntersection<InferRoute<((C extends undefined ? {} : C) & {
        baseURL: string | undefined;
        fetchOptions: {
            customFetchImpl: (url: string | URL | Request, init?: RequestInit) => Promise<Response>;
        };
    })["$InferAuth"] extends {
        plugins: infer Plugins;
    } ? Plugins extends (infer Plugin_2)[] ? Plugin_2 extends {
        endpoints: infer Endpoints_1;
    } ? Endpoints_1 : {} : {} : {}, (C extends undefined ? {} : C) & {
        baseURL: string | undefined;
        fetchOptions: {
            customFetchImpl: (url: string | URL | Request, init?: RequestInit) => Promise<Response>;
        };
    }>> & {
        useSession: nanostores.Atom<{
            data: UnionToIntersection<InferRoute<((C extends undefined ? {} : C) & {
                baseURL: string | undefined;
                fetchOptions: {
                    customFetchImpl: (url: string | URL | Request, init?: RequestInit) => Promise<Response>;
                };
            })["plugins"] extends any[] ? FilterActions<{
                ok: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0?: ({
                        body?: undefined;
                    } & {
                        method?: "GET" | undefined;
                    } & {
                        query?: Record<string, any> | undefined;
                    } & {
                        params?: Record<string, any>;
                    } & {
                        request?: Request;
                    } & {
                        headers?: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }) | undefined): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: {
                            ok: boolean;
                        };
                    } : {
                        ok: boolean;
                    }>;
                    options: {
                        method: "GET";
                        metadata: {
                            openapi: {
                                description: string;
                                responses: {
                                    "200": {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "object";
                                                    properties: {
                                                        ok: {
                                                            type: string;
                                                            description: string;
                                                        };
                                                    };
                                                    required: string[];
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                            isAction: false;
                        };
                    } & {
                        use: any[];
                    };
                    path: "/ok";
                };
                error: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0?: ({
                        body?: undefined;
                    } & {
                        method?: "GET" | undefined;
                    } & {
                        query?: Record<string, any> | undefined;
                    } & {
                        params?: Record<string, any>;
                    } & {
                        request?: Request;
                    } & {
                        headers?: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }) | undefined): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: Response;
                    } : Response>;
                    options: {
                        method: "GET";
                        metadata: {
                            openapi: {
                                description: string;
                                responses: {
                                    "200": {
                                        description: string;
                                        content: {
                                            "text/html": {
                                                schema: {
                                                    type: "string";
                                                    description: string;
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                            isAction: false;
                        };
                    } & {
                        use: any[];
                    };
                    path: "/error";
                };
                signInSocial: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                        body: {
                            provider: unknown;
                            callbackURL?: string | undefined;
                            newUserCallbackURL?: string | undefined;
                            errorCallbackURL?: string | undefined;
                            disableRedirect?: boolean | undefined;
                            idToken?: {
                                token: string;
                                nonce?: string | undefined;
                                accessToken?: string | undefined;
                                refreshToken?: string | undefined;
                                expiresAt?: number | undefined;
                            } | undefined;
                            scopes?: string[] | undefined;
                            requestSignUp?: boolean | undefined;
                            loginHint?: string | undefined;
                        };
                    } & {
                        method?: "POST" | undefined;
                    } & {
                        query?: Record<string, any> | undefined;
                    } & {
                        params?: Record<string, any>;
                    } & {
                        request?: Request;
                    } & {
                        headers?: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: {
                            redirect: boolean;
                            token: string;
                            url: undefined;
                            user: {
                                id: string;
                                email: string;
                                name: string;
                                image: string | null | undefined;
                                emailVerified: boolean;
                                createdAt: Date;
                                updatedAt: Date;
                            };
                        } | {
                            url: string;
                            redirect: boolean;
                        };
                    } : {
                        redirect: boolean;
                        token: string;
                        url: undefined;
                        user: {
                            id: string;
                            email: string;
                            name: string;
                            image: string | null | undefined;
                            emailVerified: boolean;
                            createdAt: Date;
                            updatedAt: Date;
                        };
                    } | {
                        url: string;
                        redirect: boolean;
                    }>;
                    options: {
                        method: "POST";
                        body: zod.ZodObject<{
                            callbackURL: zod.ZodOptional<zod.ZodString>;
                            newUserCallbackURL: zod.ZodOptional<zod.ZodString>;
                            errorCallbackURL: zod.ZodOptional<zod.ZodString>;
                            provider: zod.ZodType<"github" | "apple" | "discord" | "facebook" | "microsoft" | "google" | "huggingface" | "slack" | "spotify" | "twitch" | "twitter" | "dropbox" | "kick" | "linear" | "linkedin" | "gitlab" | "tiktok" | "reddit" | "roblox" | "vk" | "zoom" | "notion" | (string & {}), unknown, zod_v4_core.$ZodTypeInternals<"github" | "apple" | "discord" | "facebook" | "microsoft" | "google" | "huggingface" | "slack" | "spotify" | "twitch" | "twitter" | "dropbox" | "kick" | "linear" | "linkedin" | "gitlab" | "tiktok" | "reddit" | "roblox" | "vk" | "zoom" | "notion" | (string & {}), unknown>>;
                            disableRedirect: zod.ZodOptional<zod.ZodBoolean>;
                            idToken: zod.ZodOptional<zod.ZodObject<{
                                token: zod.ZodString;
                                nonce: zod.ZodOptional<zod.ZodString>;
                                accessToken: zod.ZodOptional<zod.ZodString>;
                                refreshToken: zod.ZodOptional<zod.ZodString>;
                                expiresAt: zod.ZodOptional<zod.ZodNumber>;
                            }, zod_v4_core.$strip>>;
                            scopes: zod.ZodOptional<zod.ZodArray<zod.ZodString>>;
                            requestSignUp: zod.ZodOptional<zod.ZodBoolean>;
                            loginHint: zod.ZodOptional<zod.ZodString>;
                        }, zod_v4_core.$strip>;
                        metadata: {
                            openapi: {
                                description: string;
                                operationId: string;
                                responses: {
                                    "200": {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "object";
                                                    description: string;
                                                    properties: {
                                                        redirect: {
                                                            type: string;
                                                            enum: boolean[];
                                                        };
                                                        token: {
                                                            type: string;
                                                            description: string;
                                                            url: {
                                                                type: string;
                                                                nullable: boolean;
                                                            };
                                                            user: {
                                                                type: string;
                                                                properties: {
                                                                    id: {
                                                                        type: string;
                                                                    };
                                                                    email: {
                                                                        type: string;
                                                                    };
                                                                    name: {
                                                                        type: string;
                                                                        nullable: boolean;
                                                                    };
                                                                    image: {
                                                                        type: string;
                                                                        nullable: boolean;
                                                                    };
                                                                    emailVerified: {
                                                                        type: string;
                                                                    };
                                                                    createdAt: {
                                                                        type: string;
                                                                        format: string;
                                                                    };
                                                                    updatedAt: {
                                                                        type: string;
                                                                        format: string;
                                                                    };
                                                                };
                                                                required: string[];
                                                            };
                                                        };
                                                    };
                                                    required: string[];
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    } & {
                        use: any[];
                    };
                    path: "/sign-in/social";
                };
                callbackOAuth: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                        body?: {
                            code?: string | undefined;
                            error?: string | undefined;
                            device_id?: string | undefined;
                            error_description?: string | undefined;
                            state?: string | undefined;
                            user?: string | undefined;
                        } | undefined;
                    } & {
                        method: "GET" | "POST";
                    } & {
                        query?: {
                            code?: string | undefined;
                            error?: string | undefined;
                            device_id?: string | undefined;
                            error_description?: string | undefined;
                            state?: string | undefined;
                            user?: string | undefined;
                        } | undefined;
                    } & {
                        params: {
                            id: string;
                        };
                    } & {
                        request?: Request;
                    } & {
                        headers?: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: void;
                    } : void>;
                    options: {
                        method: ("GET" | "POST")[];
                        body: zod.ZodOptional<zod.ZodObject<{
                            code: zod.ZodOptional<zod.ZodString>;
                            error: zod.ZodOptional<zod.ZodString>;
                            device_id: zod.ZodOptional<zod.ZodString>;
                            error_description: zod.ZodOptional<zod.ZodString>;
                            state: zod.ZodOptional<zod.ZodString>;
                            user: zod.ZodOptional<zod.ZodString>;
                        }, zod_v4_core.$strip>>;
                        query: zod.ZodOptional<zod.ZodObject<{
                            code: zod.ZodOptional<zod.ZodString>;
                            error: zod.ZodOptional<zod.ZodString>;
                            device_id: zod.ZodOptional<zod.ZodString>;
                            error_description: zod.ZodOptional<zod.ZodString>;
                            state: zod.ZodOptional<zod.ZodString>;
                            user: zod.ZodOptional<zod.ZodString>;
                        }, zod_v4_core.$strip>>;
                        metadata: {
                            isAction: false;
                        };
                    } & {
                        use: any[];
                    };
                    path: "/callback/:id";
                };
                getSession: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                        body?: undefined;
                    } & {
                        method?: "GET" | undefined;
                    } & {
                        query?: {
                            disableCookieCache?: unknown;
                            disableRefresh?: unknown;
                        } | undefined;
                    } & {
                        params?: Record<string, any>;
                    } & {
                        request?: Request;
                    } & {
                        headers: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: {
                            session: {
                                id: string;
                                userId: string;
                                expiresAt: Date;
                                createdAt: Date;
                                updatedAt: Date;
                                token: string;
                                ipAddress?: string | null | undefined;
                                userAgent?: string | null | undefined;
                            };
                            user: {
                                id: string;
                                email: string;
                                emailVerified: boolean;
                                name: string;
                                createdAt: Date;
                                updatedAt: Date;
                                image?: string | null | undefined;
                            };
                        } | null;
                    } : {
                        session: {
                            id: string;
                            userId: string;
                            expiresAt: Date;
                            createdAt: Date;
                            updatedAt: Date;
                            token: string;
                            ipAddress?: string | null | undefined;
                            userAgent?: string | null | undefined;
                        };
                        user: {
                            id: string;
                            email: string;
                            emailVerified: boolean;
                            name: string;
                            createdAt: Date;
                            updatedAt: Date;
                            image?: string | null | undefined;
                        };
                    } | null>;
                    options: {
                        method: "GET";
                        query: zod.ZodOptional<zod.ZodObject<{
                            disableCookieCache: zod.ZodOptional<zod.ZodCoercedBoolean<unknown>>;
                            disableRefresh: zod.ZodOptional<zod.ZodCoercedBoolean<unknown>>;
                        }, zod_v4_core.$strip>>;
                        requireHeaders: true;
                        metadata: {
                            openapi: {
                                description: string;
                                responses: {
                                    "200": {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "object";
                                                    properties: {
                                                        session: {
                                                            $ref: string;
                                                        };
                                                        user: {
                                                            $ref: string;
                                                        };
                                                    };
                                                    required: string[];
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    } & {
                        use: any[];
                    };
                    path: "/get-session";
                };
                signOut: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                        body?: undefined;
                    } & {
                        method?: "POST" | undefined;
                    } & {
                        query?: Record<string, any> | undefined;
                    } & {
                        params?: Record<string, any>;
                    } & {
                        request?: Request;
                    } & {
                        headers: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: {
                            success: boolean;
                        };
                    } : {
                        success: boolean;
                    }>;
                    options: {
                        method: "POST";
                        requireHeaders: true;
                        metadata: {
                            openapi: {
                                description: string;
                                responses: {
                                    "200": {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "object";
                                                    properties: {
                                                        success: {
                                                            type: string;
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    } & {
                        use: any[];
                    };
                    path: "/sign-out";
                };
                signUpEmail: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                        body: {
                            name: string;
                            email: string;
                            password: string;
                            image?: string;
                            callbackURL?: string;
                            rememberMe?: boolean;
                        };
                    } & {
                        method?: "POST" | undefined;
                    } & {
                        query?: Record<string, any> | undefined;
                    } & {
                        params?: Record<string, any>;
                    } & {
                        request?: Request;
                    } & {
                        headers?: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: {
                            token: null;
                            user: {
                                id: string;
                                email: string;
                                name: string;
                                image: string | null | undefined;
                                emailVerified: boolean;
                                createdAt: Date;
                                updatedAt: Date;
                            };
                        } | {
                            token: string;
                            user: {
                                id: string;
                                email: string;
                                name: string;
                                image: string | null | undefined;
                                emailVerified: boolean;
                                createdAt: Date;
                                updatedAt: Date;
                            };
                        };
                    } : {
                        token: null;
                        user: {
                            id: string;
                            email: string;
                            name: string;
                            image: string | null | undefined;
                            emailVerified: boolean;
                            createdAt: Date;
                            updatedAt: Date;
                        };
                    } | {
                        token: string;
                        user: {
                            id: string;
                            email: string;
                            name: string;
                            image: string | null | undefined;
                            emailVerified: boolean;
                            createdAt: Date;
                            updatedAt: Date;
                        };
                    }>;
                    options: {
                        method: "POST";
                        body: zod.ZodRecord<zod.ZodString, zod.ZodAny>;
                        metadata: {
                            $Infer: {
                                body: {
                                    name: string;
                                    email: string;
                                    password: string;
                                    image?: string;
                                    callbackURL?: string;
                                    rememberMe?: boolean;
                                };
                            };
                            openapi: {
                                description: string;
                                requestBody: {
                                    content: {
                                        "application/json": {
                                            schema: {
                                                type: "object";
                                                properties: {
                                                    name: {
                                                        type: string;
                                                        description: string;
                                                    };
                                                    email: {
                                                        type: string;
                                                        description: string;
                                                    };
                                                    password: {
                                                        type: string;
                                                        description: string;
                                                    };
                                                    image: {
                                                        type: string;
                                                        description: string;
                                                    };
                                                    callbackURL: {
                                                        type: string;
                                                        description: string;
                                                    };
                                                    rememberMe: {
                                                        type: string;
                                                        description: string;
                                                    };
                                                };
                                                required: string[];
                                            };
                                        };
                                    };
                                };
                                responses: {
                                    "200": {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "object";
                                                    properties: {
                                                        token: {
                                                            type: string;
                                                            nullable: boolean;
                                                            description: string;
                                                        };
                                                        user: {
                                                            type: string;
                                                            properties: {
                                                                id: {
                                                                    type: string;
                                                                    description: string;
                                                                };
                                                                email: {
                                                                    type: string;
                                                                    format: string;
                                                                    description: string;
                                                                };
                                                                name: {
                                                                    type: string;
                                                                    description: string;
                                                                };
                                                                image: {
                                                                    type: string;
                                                                    format: string;
                                                                    nullable: boolean;
                                                                    description: string;
                                                                };
                                                                emailVerified: {
                                                                    type: string;
                                                                    description: string;
                                                                };
                                                                createdAt: {
                                                                    type: string;
                                                                    format: string;
                                                                    description: string;
                                                                };
                                                                updatedAt: {
                                                                    type: string;
                                                                    format: string;
                                                                    description: string;
                                                                };
                                                            };
                                                            required: string[];
                                                        };
                                                    };
                                                    required: string[];
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    } & {
                        use: any[];
                    };
                    path: "/sign-up/email";
                };
                signInEmail: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                        body: {
                            email: string;
                            password: string;
                            callbackURL?: string | undefined;
                            rememberMe?: boolean | undefined;
                        };
                    } & {
                        method?: "POST" | undefined;
                    } & {
                        query?: Record<string, any> | undefined;
                    } & {
                        params?: Record<string, any>;
                    } & {
                        request?: Request;
                    } & {
                        headers?: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: {
                            redirect: boolean;
                            token: string;
                            url: string | undefined;
                            user: {
                                id: string;
                                email: string;
                                name: string;
                                image: string | null | undefined;
                                emailVerified: boolean;
                                createdAt: Date;
                                updatedAt: Date;
                            };
                        };
                    } : {
                        redirect: boolean;
                        token: string;
                        url: string | undefined;
                        user: {
                            id: string;
                            email: string;
                            name: string;
                            image: string | null | undefined;
                            emailVerified: boolean;
                            createdAt: Date;
                            updatedAt: Date;
                        };
                    }>;
                    options: {
                        method: "POST";
                        body: zod.ZodObject<{
                            email: zod.ZodString;
                            password: zod.ZodString;
                            callbackURL: zod.ZodOptional<zod.ZodString>;
                            rememberMe: zod.ZodOptional<zod.ZodDefault<zod.ZodBoolean>>;
                        }, zod_v4_core.$strip>;
                        metadata: {
                            openapi: {
                                description: string;
                                responses: {
                                    "200": {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "object";
                                                    description: string;
                                                    properties: {
                                                        redirect: {
                                                            type: string;
                                                            enum: boolean[];
                                                        };
                                                        token: {
                                                            type: string;
                                                            description: string;
                                                        };
                                                        url: {
                                                            type: string;
                                                            nullable: boolean;
                                                        };
                                                        user: {
                                                            type: string;
                                                            properties: {
                                                                id: {
                                                                    type: string;
                                                                };
                                                                email: {
                                                                    type: string;
                                                                };
                                                                name: {
                                                                    type: string;
                                                                    nullable: boolean;
                                                                };
                                                                image: {
                                                                    type: string;
                                                                    nullable: boolean;
                                                                };
                                                                emailVerified: {
                                                                    type: string;
                                                                };
                                                                createdAt: {
                                                                    type: string;
                                                                    format: string;
                                                                };
                                                                updatedAt: {
                                                                    type: string;
                                                                    format: string;
                                                                };
                                                            };
                                                            required: string[];
                                                        };
                                                    };
                                                    required: string[];
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    } & {
                        use: any[];
                    };
                    path: "/sign-in/email";
                };
                forgetPassword: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                        body: {
                            email: string;
                            redirectTo?: string | undefined;
                        };
                    } & {
                        method?: "POST" | undefined;
                    } & {
                        query?: Record<string, any> | undefined;
                    } & {
                        params?: Record<string, any>;
                    } & {
                        request?: Request;
                    } & {
                        headers?: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: {
                            status: boolean;
                        };
                    } : {
                        status: boolean;
                    }>;
                    options: {
                        method: "POST";
                        body: zod.ZodObject<{
                            email: zod.ZodString;
                            redirectTo: zod.ZodOptional<zod.ZodString>;
                        }, zod_v4_core.$strip>;
                        metadata: {
                            openapi: {
                                description: string;
                                responses: {
                                    "200": {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "object";
                                                    properties: {
                                                        status: {
                                                            type: string;
                                                        };
                                                        message: {
                                                            type: string;
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    } & {
                        use: any[];
                    };
                    path: "/forget-password";
                };
                resetPassword: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                        body: {
                            newPassword: string;
                            token?: string | undefined;
                        };
                    } & {
                        method?: "POST" | undefined;
                    } & {
                        query?: {
                            token?: string | undefined;
                        } | undefined;
                    } & {
                        params?: Record<string, any>;
                    } & {
                        request?: Request;
                    } & {
                        headers?: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: {
                            status: boolean;
                        };
                    } : {
                        status: boolean;
                    }>;
                    options: {
                        method: "POST";
                        query: zod.ZodOptional<zod.ZodObject<{
                            token: zod.ZodOptional<zod.ZodString>;
                        }, zod_v4_core.$strip>>;
                        body: zod.ZodObject<{
                            newPassword: zod.ZodString;
                            token: zod.ZodOptional<zod.ZodString>;
                        }, zod_v4_core.$strip>;
                        metadata: {
                            openapi: {
                                description: string;
                                responses: {
                                    "200": {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "object";
                                                    properties: {
                                                        status: {
                                                            type: string;
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    } & {
                        use: any[];
                    };
                    path: "/reset-password";
                };
                verifyEmail: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                        body?: undefined;
                    } & {
                        method?: "GET" | undefined;
                    } & {
                        query: {
                            token: string;
                            callbackURL?: string | undefined;
                        };
                    } & {
                        params?: Record<string, any>;
                    } & {
                        request?: Request;
                    } & {
                        headers?: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: void | {
                            status: boolean;
                            user: {
                                id: any;
                                email: any;
                                name: any;
                                image: any;
                                emailVerified: any;
                                createdAt: any;
                                updatedAt: any;
                            };
                        } | {
                            status: boolean;
                            user: null;
                        };
                    } : void | {
                        status: boolean;
                        user: {
                            id: any;
                            email: any;
                            name: any;
                            image: any;
                            emailVerified: any;
                            createdAt: any;
                            updatedAt: any;
                        };
                    } | {
                        status: boolean;
                        user: null;
                    }>;
                    options: {
                        method: "GET";
                        query: zod.ZodObject<{
                            token: zod.ZodString;
                            callbackURL: zod.ZodOptional<zod.ZodString>;
                        }, zod_v4_core.$strip>;
                        use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<void>)[];
                        metadata: {
                            openapi: {
                                description: string;
                                parameters: ({
                                    name: string;
                                    in: "query";
                                    description: string;
                                    required: true;
                                    schema: {
                                        type: "string";
                                    };
                                } | {
                                    name: string;
                                    in: "query";
                                    description: string;
                                    required: false;
                                    schema: {
                                        type: "string";
                                    };
                                })[];
                                responses: {
                                    "200": {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "object";
                                                    properties: {
                                                        user: {
                                                            type: string;
                                                            properties: {
                                                                id: {
                                                                    type: string;
                                                                    description: string;
                                                                };
                                                                email: {
                                                                    type: string;
                                                                    description: string;
                                                                };
                                                                name: {
                                                                    type: string;
                                                                    description: string;
                                                                };
                                                                image: {
                                                                    type: string;
                                                                    description: string;
                                                                };
                                                                emailVerified: {
                                                                    type: string;
                                                                    description: string;
                                                                };
                                                                createdAt: {
                                                                    type: string;
                                                                    description: string;
                                                                };
                                                                updatedAt: {
                                                                    type: string;
                                                                    description: string;
                                                                };
                                                            };
                                                            required: string[];
                                                        };
                                                        status: {
                                                            type: string;
                                                            description: string;
                                                        };
                                                    };
                                                    required: string[];
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    } & {
                        use: any[];
                    };
                    path: "/verify-email";
                };
                sendVerificationEmail: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                        body: {
                            email: string;
                            callbackURL?: string | undefined;
                        };
                    } & {
                        method?: "POST" | undefined;
                    } & {
                        query?: Record<string, any> | undefined;
                    } & {
                        params?: Record<string, any>;
                    } & {
                        request?: Request;
                    } & {
                        headers?: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: {
                            status: boolean;
                        };
                    } : {
                        status: boolean;
                    }>;
                    options: {
                        method: "POST";
                        body: zod.ZodObject<{
                            email: zod.ZodEmail;
                            callbackURL: zod.ZodOptional<zod.ZodString>;
                        }, zod_v4_core.$strip>;
                        metadata: {
                            openapi: {
                                description: string;
                                requestBody: {
                                    content: {
                                        "application/json": {
                                            schema: {
                                                type: "object";
                                                properties: {
                                                    email: {
                                                        type: string;
                                                        description: string;
                                                        example: string;
                                                    };
                                                    callbackURL: {
                                                        type: string;
                                                        description: string;
                                                        example: string;
                                                        nullable: boolean;
                                                    };
                                                };
                                                required: string[];
                                            };
                                        };
                                    };
                                };
                                responses: {
                                    "200": {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "object";
                                                    properties: {
                                                        status: {
                                                            type: string;
                                                            description: string;
                                                            example: boolean;
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                    "400": {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "object";
                                                    properties: {
                                                        message: {
                                                            type: string;
                                                            description: string;
                                                            example: string;
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    } & {
                        use: any[];
                    };
                    path: "/send-verification-email";
                };
                changeEmail: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                        body: {
                            newEmail: string;
                            callbackURL?: string | undefined;
                        };
                    } & {
                        method?: "POST" | undefined;
                    } & {
                        query?: Record<string, any> | undefined;
                    } & {
                        params?: Record<string, any>;
                    } & {
                        request?: Request;
                    } & {
                        headers?: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: {
                            status: boolean;
                        };
                    } : {
                        status: boolean;
                    }>;
                    options: {
                        method: "POST";
                        body: zod.ZodObject<{
                            newEmail: zod.ZodEmail;
                            callbackURL: zod.ZodOptional<zod.ZodString>;
                        }, zod_v4_core.$strip>;
                        use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<{
                            session: {
                                session: Record<string, any> & {
                                    id: string;
                                    userId: string;
                                    expiresAt: Date;
                                    createdAt: Date;
                                    updatedAt: Date;
                                    token: string;
                                    ipAddress?: string | null | undefined;
                                    userAgent?: string | null | undefined;
                                };
                                user: Record<string, any> & {
                                    id: string;
                                    email: string;
                                    emailVerified: boolean;
                                    name: string;
                                    createdAt: Date;
                                    updatedAt: Date;
                                    image?: string | null | undefined;
                                };
                            };
                        }>)[];
                        metadata: {
                            openapi: {
                                responses: {
                                    "200": {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "object";
                                                    properties: {
                                                        status: {
                                                            type: string;
                                                            description: string;
                                                        };
                                                        message: {
                                                            type: string;
                                                            enum: string[];
                                                            description: string;
                                                            nullable: boolean;
                                                        };
                                                    };
                                                    required: string[];
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    } & {
                        use: any[];
                    };
                    path: "/change-email";
                };
                changePassword: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                        body: {
                            newPassword: string;
                            currentPassword: string;
                            revokeOtherSessions?: boolean | undefined;
                        };
                    } & {
                        method?: "POST" | undefined;
                    } & {
                        query?: Record<string, any> | undefined;
                    } & {
                        params?: Record<string, any>;
                    } & {
                        request?: Request;
                    } & {
                        headers?: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: {
                            token: string | null;
                            user: {
                                id: string;
                                email: string;
                                name: string;
                                image: string | null | undefined;
                                emailVerified: boolean;
                                createdAt: Date;
                                updatedAt: Date;
                            };
                        };
                    } : {
                        token: string | null;
                        user: {
                            id: string;
                            email: string;
                            name: string;
                            image: string | null | undefined;
                            emailVerified: boolean;
                            createdAt: Date;
                            updatedAt: Date;
                        };
                    }>;
                    options: {
                        method: "POST";
                        body: zod.ZodObject<{
                            newPassword: zod.ZodString;
                            currentPassword: zod.ZodString;
                            revokeOtherSessions: zod.ZodOptional<zod.ZodBoolean>;
                        }, zod_v4_core.$strip>;
                        use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<{
                            session: {
                                session: Record<string, any> & {
                                    id: string;
                                    userId: string;
                                    expiresAt: Date;
                                    createdAt: Date;
                                    updatedAt: Date;
                                    token: string;
                                    ipAddress?: string | null | undefined;
                                    userAgent?: string | null | undefined;
                                };
                                user: Record<string, any> & {
                                    id: string;
                                    email: string;
                                    emailVerified: boolean;
                                    name: string;
                                    createdAt: Date;
                                    updatedAt: Date;
                                    image?: string | null | undefined;
                                };
                            };
                        }>)[];
                        metadata: {
                            openapi: {
                                description: string;
                                responses: {
                                    "200": {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "object";
                                                    properties: {
                                                        token: {
                                                            type: string;
                                                            nullable: boolean;
                                                            description: string;
                                                        };
                                                        user: {
                                                            type: string;
                                                            properties: {
                                                                id: {
                                                                    type: string;
                                                                    description: string;
                                                                };
                                                                email: {
                                                                    type: string;
                                                                    format: string;
                                                                    description: string;
                                                                };
                                                                name: {
                                                                    type: string;
                                                                    description: string;
                                                                };
                                                                image: {
                                                                    type: string;
                                                                    format: string;
                                                                    nullable: boolean;
                                                                    description: string;
                                                                };
                                                                emailVerified: {
                                                                    type: string;
                                                                    description: string;
                                                                };
                                                                createdAt: {
                                                                    type: string;
                                                                    format: string;
                                                                    description: string;
                                                                };
                                                                updatedAt: {
                                                                    type: string;
                                                                    format: string;
                                                                    description: string;
                                                                };
                                                            };
                                                            required: string[];
                                                        };
                                                    };
                                                    required: string[];
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    } & {
                        use: any[];
                    };
                    path: "/change-password";
                };
                setPassword: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                        body: {
                            newPassword: string;
                        };
                    } & {
                        method?: "POST" | undefined;
                    } & {
                        query?: Record<string, any> | undefined;
                    } & {
                        params?: Record<string, any>;
                    } & {
                        request?: Request;
                    } & {
                        headers?: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: {
                            status: boolean;
                        };
                    } : {
                        status: boolean;
                    }>;
                    options: {
                        method: "POST";
                        body: zod.ZodObject<{
                            newPassword: zod.ZodString;
                        }, zod_v4_core.$strip>;
                        metadata: {
                            SERVER_ONLY: true;
                        };
                        use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<{
                            session: {
                                session: Record<string, any> & {
                                    id: string;
                                    userId: string;
                                    expiresAt: Date;
                                    createdAt: Date;
                                    updatedAt: Date;
                                    token: string;
                                    ipAddress?: string | null | undefined;
                                    userAgent?: string | null | undefined;
                                };
                                user: Record<string, any> & {
                                    id: string;
                                    email: string;
                                    emailVerified: boolean;
                                    name: string;
                                    createdAt: Date;
                                    updatedAt: Date;
                                    image?: string | null | undefined;
                                };
                            };
                        }>)[];
                    } & {
                        use: any[];
                    };
                    path: "/set-password";
                };
                updateUser: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                        body: Partial<{}> & {
                            name?: string;
                            image?: string;
                        };
                    } & {
                        method?: "POST" | undefined;
                    } & {
                        query?: Record<string, any> | undefined;
                    } & {
                        params?: Record<string, any>;
                    } & {
                        request?: Request;
                    } & {
                        headers?: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: {
                            status: boolean;
                        };
                    } : {
                        status: boolean;
                    }>;
                    options: {
                        method: "POST";
                        body: zod.ZodRecord<zod.ZodString, zod.ZodAny>;
                        use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<{
                            session: {
                                session: Record<string, any> & {
                                    id: string;
                                    userId: string;
                                    expiresAt: Date;
                                    createdAt: Date;
                                    updatedAt: Date;
                                    token: string;
                                    ipAddress?: string | null | undefined;
                                    userAgent?: string | null | undefined;
                                };
                                user: Record<string, any> & {
                                    id: string;
                                    email: string;
                                    emailVerified: boolean;
                                    name: string;
                                    createdAt: Date;
                                    updatedAt: Date;
                                    image?: string | null | undefined;
                                };
                            };
                        }>)[];
                        metadata: {
                            $Infer: {
                                body: Partial<{}> & {
                                    name?: string;
                                    image?: string;
                                };
                            };
                            openapi: {
                                description: string;
                                requestBody: {
                                    content: {
                                        "application/json": {
                                            schema: {
                                                type: "object";
                                                properties: {
                                                    name: {
                                                        type: string;
                                                        description: string;
                                                    };
                                                    image: {
                                                        type: string;
                                                        description: string;
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                                responses: {
                                    "200": {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "object";
                                                    properties: {
                                                        status: {
                                                            type: string;
                                                            description: string;
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    } & {
                        use: any[];
                    };
                    path: "/update-user";
                };
                deleteUser: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                        body: {
                            callbackURL?: string | undefined;
                            password?: string | undefined;
                            token?: string | undefined;
                        };
                    } & {
                        method?: "POST" | undefined;
                    } & {
                        query?: Record<string, any> | undefined;
                    } & {
                        params?: Record<string, any>;
                    } & {
                        request?: Request;
                    } & {
                        headers?: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: {
                            success: boolean;
                            message: string;
                        };
                    } : {
                        success: boolean;
                        message: string;
                    }>;
                    options: {
                        method: "POST";
                        use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<{
                            session: {
                                session: Record<string, any> & {
                                    id: string;
                                    userId: string;
                                    expiresAt: Date;
                                    createdAt: Date;
                                    updatedAt: Date;
                                    token: string;
                                    ipAddress?: string | null | undefined;
                                    userAgent?: string | null | undefined;
                                };
                                user: Record<string, any> & {
                                    id: string;
                                    email: string;
                                    emailVerified: boolean;
                                    name: string;
                                    createdAt: Date;
                                    updatedAt: Date;
                                    image?: string | null | undefined;
                                };
                            };
                        }>)[];
                        body: zod.ZodObject<{
                            callbackURL: zod.ZodOptional<zod.ZodString>;
                            password: zod.ZodOptional<zod.ZodString>;
                            token: zod.ZodOptional<zod.ZodString>;
                        }, zod_v4_core.$strip>;
                        metadata: {
                            openapi: {
                                description: string;
                                responses: {
                                    "200": {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "object";
                                                    properties: {
                                                        success: {
                                                            type: string;
                                                            description: string;
                                                        };
                                                        message: {
                                                            type: string;
                                                            enum: string[];
                                                            description: string;
                                                        };
                                                    };
                                                    required: string[];
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    } & {
                        use: any[];
                    };
                    path: "/delete-user";
                };
                forgetPasswordCallback: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                        body?: undefined;
                    } & {
                        method?: "GET" | undefined;
                    } & {
                        query: {
                            callbackURL: string;
                        };
                    } & {
                        params: {
                            token: string;
                        };
                    } & {
                        request?: Request;
                    } & {
                        headers?: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: never;
                    } : never>;
                    options: {
                        method: "GET";
                        query: zod.ZodObject<{
                            callbackURL: zod.ZodString;
                        }, zod_v4_core.$strip>;
                        use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<void>)[];
                        metadata: {
                            openapi: {
                                description: string;
                                responses: {
                                    "200": {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "object";
                                                    properties: {
                                                        token: {
                                                            type: string;
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    } & {
                        use: any[];
                    };
                    path: "/reset-password/:token";
                };
                requestPasswordReset: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                        body: {
                            email: string;
                            redirectTo?: string | undefined;
                        };
                    } & {
                        method?: "POST" | undefined;
                    } & {
                        query?: Record<string, any> | undefined;
                    } & {
                        params?: Record<string, any>;
                    } & {
                        request?: Request;
                    } & {
                        headers?: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: {
                            status: boolean;
                        };
                    } : {
                        status: boolean;
                    }>;
                    options: {
                        method: "POST";
                        body: zod.ZodObject<{
                            email: zod.ZodEmail;
                            redirectTo: zod.ZodOptional<zod.ZodString>;
                        }, zod_v4_core.$strip>;
                        metadata: {
                            openapi: {
                                description: string;
                                responses: {
                                    "200": {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "object";
                                                    properties: {
                                                        status: {
                                                            type: string;
                                                        };
                                                        message: {
                                                            type: string;
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    } & {
                        use: any[];
                    };
                    path: "/request-password-reset";
                };
                requestPasswordResetCallback: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                        body?: undefined;
                    } & {
                        method?: "GET" | undefined;
                    } & {
                        query: {
                            callbackURL: string;
                        };
                    } & {
                        params: {
                            token: string;
                        };
                    } & {
                        request?: Request;
                    } & {
                        headers?: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: never;
                    } : never>;
                    options: {
                        method: "GET";
                        query: zod.ZodObject<{
                            callbackURL: zod.ZodString;
                        }, zod_v4_core.$strip>;
                        use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<void>)[];
                        metadata: {
                            openapi: {
                                description: string;
                                responses: {
                                    "200": {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "object";
                                                    properties: {
                                                        token: {
                                                            type: string;
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    } & {
                        use: any[];
                    };
                    path: "/reset-password/:token";
                };
                listSessions: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                        body?: undefined;
                    } & {
                        method?: "GET" | undefined;
                    } & {
                        query?: Record<string, any> | undefined;
                    } & {
                        params?: Record<string, any>;
                    } & {
                        request?: Request;
                    } & {
                        headers: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: Prettify<{
                            id: string;
                            userId: string;
                            expiresAt: Date;
                            createdAt: Date;
                            updatedAt: Date;
                            token: string;
                            ipAddress?: string | null | undefined;
                            userAgent?: string | null | undefined;
                        }>[];
                    } : Prettify<{
                        id: string;
                        userId: string;
                        expiresAt: Date;
                        createdAt: Date;
                        updatedAt: Date;
                        token: string;
                        ipAddress?: string | null | undefined;
                        userAgent?: string | null | undefined;
                    }>[]>;
                    options: {
                        method: "GET";
                        use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<{
                            session: {
                                session: Record<string, any> & {
                                    id: string;
                                    userId: string;
                                    expiresAt: Date;
                                    createdAt: Date;
                                    updatedAt: Date;
                                    token: string;
                                    ipAddress?: string | null | undefined;
                                    userAgent?: string | null | undefined;
                                };
                                user: Record<string, any> & {
                                    id: string;
                                    email: string;
                                    emailVerified: boolean;
                                    name: string;
                                    createdAt: Date;
                                    updatedAt: Date;
                                    image?: string | null | undefined;
                                };
                            };
                        }>)[];
                        requireHeaders: true;
                        metadata: {
                            openapi: {
                                description: string;
                                responses: {
                                    "200": {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "array";
                                                    items: {
                                                        $ref: string;
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    } & {
                        use: any[];
                    };
                    path: "/list-sessions";
                };
                revokeSession: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                        body: {
                            token: string;
                        };
                    } & {
                        method?: "POST" | undefined;
                    } & {
                        query?: Record<string, any> | undefined;
                    } & {
                        params?: Record<string, any>;
                    } & {
                        request?: Request;
                    } & {
                        headers: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: {
                            status: boolean;
                        };
                    } : {
                        status: boolean;
                    }>;
                    options: {
                        method: "POST";
                        body: zod.ZodObject<{
                            token: zod.ZodString;
                        }, zod_v4_core.$strip>;
                        use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<{
                            session: {
                                session: Record<string, any> & {
                                    id: string;
                                    userId: string;
                                    expiresAt: Date;
                                    createdAt: Date;
                                    updatedAt: Date;
                                    token: string;
                                    ipAddress?: string | null | undefined;
                                    userAgent?: string | null | undefined;
                                };
                                user: Record<string, any> & {
                                    id: string;
                                    email: string;
                                    emailVerified: boolean;
                                    name: string;
                                    createdAt: Date;
                                    updatedAt: Date;
                                    image?: string | null | undefined;
                                };
                            };
                        }>)[];
                        requireHeaders: true;
                        metadata: {
                            openapi: {
                                description: string;
                                requestBody: {
                                    content: {
                                        "application/json": {
                                            schema: {
                                                type: "object";
                                                properties: {
                                                    token: {
                                                        type: string;
                                                        description: string;
                                                    };
                                                };
                                                required: string[];
                                            };
                                        };
                                    };
                                };
                                responses: {
                                    "200": {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "object";
                                                    properties: {
                                                        status: {
                                                            type: string;
                                                            description: string;
                                                        };
                                                    };
                                                    required: string[];
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    } & {
                        use: any[];
                    };
                    path: "/revoke-session";
                };
                revokeSessions: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                        body?: undefined;
                    } & {
                        method?: "POST" | undefined;
                    } & {
                        query?: Record<string, any> | undefined;
                    } & {
                        params?: Record<string, any>;
                    } & {
                        request?: Request;
                    } & {
                        headers: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: {
                            status: boolean;
                        };
                    } : {
                        status: boolean;
                    }>;
                    options: {
                        method: "POST";
                        use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<{
                            session: {
                                session: Record<string, any> & {
                                    id: string;
                                    userId: string;
                                    expiresAt: Date;
                                    createdAt: Date;
                                    updatedAt: Date;
                                    token: string;
                                    ipAddress?: string | null | undefined;
                                    userAgent?: string | null | undefined;
                                };
                                user: Record<string, any> & {
                                    id: string;
                                    email: string;
                                    emailVerified: boolean;
                                    name: string;
                                    createdAt: Date;
                                    updatedAt: Date;
                                    image?: string | null | undefined;
                                };
                            };
                        }>)[];
                        requireHeaders: true;
                        metadata: {
                            openapi: {
                                description: string;
                                responses: {
                                    "200": {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "object";
                                                    properties: {
                                                        status: {
                                                            type: string;
                                                            description: string;
                                                        };
                                                    };
                                                    required: string[];
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    } & {
                        use: any[];
                    };
                    path: "/revoke-sessions";
                };
                revokeOtherSessions: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                        body?: undefined;
                    } & {
                        method?: "POST" | undefined;
                    } & {
                        query?: Record<string, any> | undefined;
                    } & {
                        params?: Record<string, any>;
                    } & {
                        request?: Request;
                    } & {
                        headers: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: {
                            status: boolean;
                        };
                    } : {
                        status: boolean;
                    }>;
                    options: {
                        method: "POST";
                        requireHeaders: true;
                        use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<{
                            session: {
                                session: Record<string, any> & {
                                    id: string;
                                    userId: string;
                                    expiresAt: Date;
                                    createdAt: Date;
                                    updatedAt: Date;
                                    token: string;
                                    ipAddress?: string | null | undefined;
                                    userAgent?: string | null | undefined;
                                };
                                user: Record<string, any> & {
                                    id: string;
                                    email: string;
                                    emailVerified: boolean;
                                    name: string;
                                    createdAt: Date;
                                    updatedAt: Date;
                                    image?: string | null | undefined;
                                };
                            };
                        }>)[];
                        metadata: {
                            openapi: {
                                description: string;
                                responses: {
                                    "200": {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "object";
                                                    properties: {
                                                        status: {
                                                            type: string;
                                                            description: string;
                                                        };
                                                    };
                                                    required: string[];
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    } & {
                        use: any[];
                    };
                    path: "/revoke-other-sessions";
                };
                linkSocialAccount: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                        body: {
                            provider: unknown;
                            callbackURL?: string | undefined;
                            idToken?: {
                                token: string;
                                nonce?: string | undefined;
                                accessToken?: string | undefined;
                                refreshToken?: string | undefined;
                                scopes?: string[] | undefined;
                            } | undefined;
                            requestSignUp?: boolean | undefined;
                            scopes?: string[] | undefined;
                            errorCallbackURL?: string | undefined;
                            disableRedirect?: boolean | undefined;
                        };
                    } & {
                        method?: "POST" | undefined;
                    } & {
                        query?: Record<string, any> | undefined;
                    } & {
                        params?: Record<string, any>;
                    } & {
                        request?: Request;
                    } & {
                        headers: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: {
                            url: string;
                            redirect: boolean;
                        };
                    } : {
                        url: string;
                        redirect: boolean;
                    }>;
                    options: {
                        method: "POST";
                        requireHeaders: true;
                        body: zod.ZodObject<{
                            callbackURL: zod.ZodOptional<zod.ZodString>;
                            provider: zod.ZodType<"github" | "apple" | "discord" | "facebook" | "microsoft" | "google" | "huggingface" | "slack" | "spotify" | "twitch" | "twitter" | "dropbox" | "kick" | "linear" | "linkedin" | "gitlab" | "tiktok" | "reddit" | "roblox" | "vk" | "zoom" | "notion" | (string & {}), unknown, zod_v4_core.$ZodTypeInternals<"github" | "apple" | "discord" | "facebook" | "microsoft" | "google" | "huggingface" | "slack" | "spotify" | "twitch" | "twitter" | "dropbox" | "kick" | "linear" | "linkedin" | "gitlab" | "tiktok" | "reddit" | "roblox" | "vk" | "zoom" | "notion" | (string & {}), unknown>>;
                            idToken: zod.ZodOptional<zod.ZodObject<{
                                token: zod.ZodString;
                                nonce: zod.ZodOptional<zod.ZodString>;
                                accessToken: zod.ZodOptional<zod.ZodString>;
                                refreshToken: zod.ZodOptional<zod.ZodString>;
                                scopes: zod.ZodOptional<zod.ZodArray<zod.ZodString>>;
                            }, zod_v4_core.$strip>>;
                            requestSignUp: zod.ZodOptional<zod.ZodBoolean>;
                            scopes: zod.ZodOptional<zod.ZodArray<zod.ZodString>>;
                            errorCallbackURL: zod.ZodOptional<zod.ZodString>;
                            disableRedirect: zod.ZodOptional<zod.ZodBoolean>;
                        }, zod_v4_core.$strip>;
                        use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<{
                            session: {
                                session: Record<string, any> & {
                                    id: string;
                                    userId: string;
                                    expiresAt: Date;
                                    createdAt: Date;
                                    updatedAt: Date;
                                    token: string;
                                    ipAddress?: string | null | undefined;
                                    userAgent?: string | null | undefined;
                                };
                                user: Record<string, any> & {
                                    id: string;
                                    email: string;
                                    emailVerified: boolean;
                                    name: string;
                                    createdAt: Date;
                                    updatedAt: Date;
                                    image?: string | null | undefined;
                                };
                            };
                        }>)[];
                        metadata: {
                            openapi: {
                                description: string;
                                responses: {
                                    "200": {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "object";
                                                    properties: {
                                                        url: {
                                                            type: string;
                                                            description: string;
                                                        };
                                                        redirect: {
                                                            type: string;
                                                            description: string;
                                                        };
                                                        status: {
                                                            type: string;
                                                        };
                                                    };
                                                    required: string[];
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    } & {
                        use: any[];
                    };
                    path: "/link-social";
                };
                listUserAccounts: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0?: ({
                        body?: undefined;
                    } & {
                        method?: "GET" | undefined;
                    } & {
                        query?: Record<string, any> | undefined;
                    } & {
                        params?: Record<string, any>;
                    } & {
                        request?: Request;
                    } & {
                        headers?: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }) | undefined): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: {
                            id: string;
                            provider: string;
                            createdAt: Date;
                            updatedAt: Date;
                            accountId: string;
                            scopes: string[];
                        }[];
                    } : {
                        id: string;
                        provider: string;
                        createdAt: Date;
                        updatedAt: Date;
                        accountId: string;
                        scopes: string[];
                    }[]>;
                    options: {
                        method: "GET";
                        use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<{
                            session: {
                                session: Record<string, any> & {
                                    id: string;
                                    userId: string;
                                    expiresAt: Date;
                                    createdAt: Date;
                                    updatedAt: Date;
                                    token: string;
                                    ipAddress?: string | null | undefined;
                                    userAgent?: string | null | undefined;
                                };
                                user: Record<string, any> & {
                                    id: string;
                                    email: string;
                                    emailVerified: boolean;
                                    name: string;
                                    createdAt: Date;
                                    updatedAt: Date;
                                    image?: string | null | undefined;
                                };
                            };
                        }>)[];
                        metadata: {
                            openapi: {
                                description: string;
                                responses: {
                                    "200": {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "array";
                                                    items: {
                                                        type: string;
                                                        properties: {
                                                            id: {
                                                                type: string;
                                                            };
                                                            provider: {
                                                                type: string;
                                                            };
                                                            createdAt: {
                                                                type: string;
                                                                format: string;
                                                            };
                                                            updatedAt: {
                                                                type: string;
                                                                format: string;
                                                            };
                                                        };
                                                        accountId: {
                                                            type: string;
                                                        };
                                                        scopes: {
                                                            type: string;
                                                            items: {
                                                                type: string;
                                                            };
                                                        };
                                                    };
                                                    required: string[];
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    } & {
                        use: any[];
                    };
                    path: "/list-accounts";
                };
                deleteUserCallback: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                        body?: undefined;
                    } & {
                        method?: "GET" | undefined;
                    } & {
                        query: {
                            token: string;
                            callbackURL?: string | undefined;
                        };
                    } & {
                        params?: Record<string, any>;
                    } & {
                        request?: Request;
                    } & {
                        headers?: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: {
                            success: boolean;
                            message: string;
                        };
                    } : {
                        success: boolean;
                        message: string;
                    }>;
                    options: {
                        method: "GET";
                        query: zod.ZodObject<{
                            token: zod.ZodString;
                            callbackURL: zod.ZodOptional<zod.ZodString>;
                        }, zod_v4_core.$strip>;
                        use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<void>)[];
                        metadata: {
                            openapi: {
                                description: string;
                                responses: {
                                    "200": {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "object";
                                                    properties: {
                                                        success: {
                                                            type: string;
                                                            description: string;
                                                        };
                                                        message: {
                                                            type: string;
                                                            enum: string[];
                                                            description: string;
                                                        };
                                                    };
                                                    required: string[];
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    } & {
                        use: any[];
                    };
                    path: "/delete-user/callback";
                };
                unlinkAccount: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                        body: {
                            providerId: string;
                            accountId?: string | undefined;
                        };
                    } & {
                        method?: "POST" | undefined;
                    } & {
                        query?: Record<string, any> | undefined;
                    } & {
                        params?: Record<string, any>;
                    } & {
                        request?: Request;
                    } & {
                        headers?: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: {
                            status: boolean;
                        };
                    } : {
                        status: boolean;
                    }>;
                    options: {
                        method: "POST";
                        body: zod.ZodObject<{
                            providerId: zod.ZodString;
                            accountId: zod.ZodOptional<zod.ZodString>;
                        }, zod_v4_core.$strip>;
                        use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<{
                            session: {
                                session: Record<string, any> & {
                                    id: string;
                                    userId: string;
                                    expiresAt: Date;
                                    createdAt: Date;
                                    updatedAt: Date;
                                    token: string;
                                    ipAddress?: string | null | undefined;
                                    userAgent?: string | null | undefined;
                                };
                                user: Record<string, any> & {
                                    id: string;
                                    email: string;
                                    emailVerified: boolean;
                                    name: string;
                                    createdAt: Date;
                                    updatedAt: Date;
                                    image?: string | null | undefined;
                                };
                            };
                        }>)[];
                        metadata: {
                            openapi: {
                                description: string;
                                responses: {
                                    "200": {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "object";
                                                    properties: {
                                                        status: {
                                                            type: string;
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    } & {
                        use: any[];
                    };
                    path: "/unlink-account";
                };
                refreshToken: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                        body: {
                            providerId: string;
                            accountId?: string | undefined;
                            userId?: string | undefined;
                        };
                    } & {
                        method?: "POST" | undefined;
                    } & {
                        query?: Record<string, any> | undefined;
                    } & {
                        params?: Record<string, any>;
                    } & {
                        request?: Request;
                    } & {
                        headers?: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: OAuth2Tokens;
                    } : OAuth2Tokens>;
                    options: {
                        method: "POST";
                        body: zod.ZodObject<{
                            providerId: zod.ZodString;
                            accountId: zod.ZodOptional<zod.ZodString>;
                            userId: zod.ZodOptional<zod.ZodString>;
                        }, zod_v4_core.$strip>;
                        metadata: {
                            openapi: {
                                description: string;
                                responses: {
                                    200: {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "object";
                                                    properties: {
                                                        tokenType: {
                                                            type: string;
                                                        };
                                                        idToken: {
                                                            type: string;
                                                        };
                                                        accessToken: {
                                                            type: string;
                                                        };
                                                        refreshToken: {
                                                            type: string;
                                                        };
                                                        accessTokenExpiresAt: {
                                                            type: string;
                                                            format: string;
                                                        };
                                                        refreshTokenExpiresAt: {
                                                            type: string;
                                                            format: string;
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                    400: {
                                        description: string;
                                    };
                                };
                            };
                        };
                    } & {
                        use: any[];
                    };
                    path: "/refresh-token";
                };
                getAccessToken: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                        body: {
                            providerId: string;
                            accountId?: string | undefined;
                            userId?: string | undefined;
                        };
                    } & {
                        method?: "POST" | undefined;
                    } & {
                        query?: Record<string, any> | undefined;
                    } & {
                        params?: Record<string, any>;
                    } & {
                        request?: Request;
                    } & {
                        headers?: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: {
                            accessToken: string;
                            accessTokenExpiresAt: Date | undefined;
                            scopes: string[];
                            idToken: string | undefined;
                        };
                    } : {
                        accessToken: string;
                        accessTokenExpiresAt: Date | undefined;
                        scopes: string[];
                        idToken: string | undefined;
                    }>;
                    options: {
                        method: "POST";
                        body: zod.ZodObject<{
                            providerId: zod.ZodString;
                            accountId: zod.ZodOptional<zod.ZodString>;
                            userId: zod.ZodOptional<zod.ZodString>;
                        }, zod_v4_core.$strip>;
                        metadata: {
                            openapi: {
                                description: string;
                                responses: {
                                    200: {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "object";
                                                    properties: {
                                                        tokenType: {
                                                            type: string;
                                                        };
                                                        idToken: {
                                                            type: string;
                                                        };
                                                        accessToken: {
                                                            type: string;
                                                        };
                                                        refreshToken: {
                                                            type: string;
                                                        };
                                                        accessTokenExpiresAt: {
                                                            type: string;
                                                            format: string;
                                                        };
                                                        refreshTokenExpiresAt: {
                                                            type: string;
                                                            format: string;
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                    400: {
                                        description: string;
                                    };
                                };
                            };
                        };
                    } & {
                        use: any[];
                    };
                    path: "/get-access-token";
                };
                accountInfo: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                        body: {
                            accountId: string;
                        };
                    } & {
                        method?: "POST" | undefined;
                    } & {
                        query?: Record<string, any> | undefined;
                    } & {
                        params?: Record<string, any>;
                    } & {
                        request?: Request;
                    } & {
                        headers?: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: {
                            user: {
                                id: string | number;
                                name?: string;
                                email?: string | null;
                                image?: string;
                                emailVerified: boolean;
                            };
                            data: Record<string, any>;
                        } | null;
                    } : {
                        user: {
                            id: string | number;
                            name?: string;
                            email?: string | null;
                            image?: string;
                            emailVerified: boolean;
                        };
                        data: Record<string, any>;
                    } | null>;
                    options: {
                        method: "POST";
                        use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<{
                            session: {
                                session: Record<string, any> & {
                                    id: string;
                                    userId: string;
                                    expiresAt: Date;
                                    createdAt: Date;
                                    updatedAt: Date;
                                    token: string;
                                    ipAddress?: string | null | undefined;
                                    userAgent?: string | null | undefined;
                                };
                                user: Record<string, any> & {
                                    id: string;
                                    email: string;
                                    emailVerified: boolean;
                                    name: string;
                                    createdAt: Date;
                                    updatedAt: Date;
                                    image?: string | null | undefined;
                                };
                            };
                        }>)[];
                        metadata: {
                            openapi: {
                                description: string;
                                responses: {
                                    "200": {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "object";
                                                    properties: {
                                                        user: {
                                                            type: string;
                                                            properties: {
                                                                id: {
                                                                    type: string;
                                                                };
                                                                name: {
                                                                    type: string;
                                                                };
                                                                email: {
                                                                    type: string;
                                                                };
                                                                image: {
                                                                    type: string;
                                                                };
                                                                emailVerified: {
                                                                    type: string;
                                                                };
                                                            };
                                                            required: string[];
                                                        };
                                                        data: {
                                                            type: string;
                                                            properties: {};
                                                            additionalProperties: boolean;
                                                        };
                                                    };
                                                    required: string[];
                                                    additionalProperties: boolean;
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                        body: zod.ZodObject<{
                            accountId: zod.ZodString;
                        }, zod_v4_core.$strip>;
                    } & {
                        use: any[];
                    };
                    path: "/account-info";
                };
            }> & (((C extends undefined ? {} : C) & {
                baseURL: string | undefined;
                fetchOptions: {
                    customFetchImpl: (url: string | URL | Request, init?: RequestInit) => Promise<Response>;
                };
            })["plugins"] extends (infer Pl)[] ? UnionToIntersection<Pl extends {
                $InferServerPlugin: infer Plug;
            } ? Plug extends {
                endpoints: infer Endpoints;
            } ? Endpoints : {} : {}> : {}) : FilterActions<{
                ok: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0?: ({
                        body?: undefined;
                    } & {
                        method?: "GET" | undefined;
                    } & {
                        query?: Record<string, any> | undefined;
                    } & {
                        params?: Record<string, any>;
                    } & {
                        request?: Request;
                    } & {
                        headers?: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }) | undefined): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: {
                            ok: boolean;
                        };
                    } : {
                        ok: boolean;
                    }>;
                    options: {
                        method: "GET";
                        metadata: {
                            openapi: {
                                description: string;
                                responses: {
                                    "200": {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "object";
                                                    properties: {
                                                        ok: {
                                                            type: string;
                                                            description: string;
                                                        };
                                                    };
                                                    required: string[];
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                            isAction: false;
                        };
                    } & {
                        use: any[];
                    };
                    path: "/ok";
                };
                error: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0?: ({
                        body?: undefined;
                    } & {
                        method?: "GET" | undefined;
                    } & {
                        query?: Record<string, any> | undefined;
                    } & {
                        params?: Record<string, any>;
                    } & {
                        request?: Request;
                    } & {
                        headers?: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }) | undefined): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: Response;
                    } : Response>;
                    options: {
                        method: "GET";
                        metadata: {
                            openapi: {
                                description: string;
                                responses: {
                                    "200": {
                                        description: string;
                                        content: {
                                            "text/html": {
                                                schema: {
                                                    type: "string";
                                                    description: string;
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                            isAction: false;
                        };
                    } & {
                        use: any[];
                    };
                    path: "/error";
                };
                signInSocial: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                        body: {
                            provider: unknown;
                            callbackURL?: string | undefined;
                            newUserCallbackURL?: string | undefined;
                            errorCallbackURL?: string | undefined;
                            disableRedirect?: boolean | undefined;
                            idToken?: {
                                token: string;
                                nonce?: string | undefined;
                                accessToken?: string | undefined;
                                refreshToken?: string | undefined;
                                expiresAt?: number | undefined;
                            } | undefined;
                            scopes?: string[] | undefined;
                            requestSignUp?: boolean | undefined;
                            loginHint?: string | undefined;
                        };
                    } & {
                        method?: "POST" | undefined;
                    } & {
                        query?: Record<string, any> | undefined;
                    } & {
                        params?: Record<string, any>;
                    } & {
                        request?: Request;
                    } & {
                        headers?: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: {
                            redirect: boolean;
                            token: string;
                            url: undefined;
                            user: {
                                id: string;
                                email: string;
                                name: string;
                                image: string | null | undefined;
                                emailVerified: boolean;
                                createdAt: Date;
                                updatedAt: Date;
                            };
                        } | {
                            url: string;
                            redirect: boolean;
                        };
                    } : {
                        redirect: boolean;
                        token: string;
                        url: undefined;
                        user: {
                            id: string;
                            email: string;
                            name: string;
                            image: string | null | undefined;
                            emailVerified: boolean;
                            createdAt: Date;
                            updatedAt: Date;
                        };
                    } | {
                        url: string;
                        redirect: boolean;
                    }>;
                    options: {
                        method: "POST";
                        body: zod.ZodObject<{
                            callbackURL: zod.ZodOptional<zod.ZodString>;
                            newUserCallbackURL: zod.ZodOptional<zod.ZodString>;
                            errorCallbackURL: zod.ZodOptional<zod.ZodString>;
                            provider: zod.ZodType<"github" | "apple" | "discord" | "facebook" | "microsoft" | "google" | "huggingface" | "slack" | "spotify" | "twitch" | "twitter" | "dropbox" | "kick" | "linear" | "linkedin" | "gitlab" | "tiktok" | "reddit" | "roblox" | "vk" | "zoom" | "notion" | (string & {}), unknown, zod_v4_core.$ZodTypeInternals<"github" | "apple" | "discord" | "facebook" | "microsoft" | "google" | "huggingface" | "slack" | "spotify" | "twitch" | "twitter" | "dropbox" | "kick" | "linear" | "linkedin" | "gitlab" | "tiktok" | "reddit" | "roblox" | "vk" | "zoom" | "notion" | (string & {}), unknown>>;
                            disableRedirect: zod.ZodOptional<zod.ZodBoolean>;
                            idToken: zod.ZodOptional<zod.ZodObject<{
                                token: zod.ZodString;
                                nonce: zod.ZodOptional<zod.ZodString>;
                                accessToken: zod.ZodOptional<zod.ZodString>;
                                refreshToken: zod.ZodOptional<zod.ZodString>;
                                expiresAt: zod.ZodOptional<zod.ZodNumber>;
                            }, zod_v4_core.$strip>>;
                            scopes: zod.ZodOptional<zod.ZodArray<zod.ZodString>>;
                            requestSignUp: zod.ZodOptional<zod.ZodBoolean>;
                            loginHint: zod.ZodOptional<zod.ZodString>;
                        }, zod_v4_core.$strip>;
                        metadata: {
                            openapi: {
                                description: string;
                                operationId: string;
                                responses: {
                                    "200": {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "object";
                                                    description: string;
                                                    properties: {
                                                        redirect: {
                                                            type: string;
                                                            enum: boolean[];
                                                        };
                                                        token: {
                                                            type: string;
                                                            description: string;
                                                            url: {
                                                                type: string;
                                                                nullable: boolean;
                                                            };
                                                            user: {
                                                                type: string;
                                                                properties: {
                                                                    id: {
                                                                        type: string;
                                                                    };
                                                                    email: {
                                                                        type: string;
                                                                    };
                                                                    name: {
                                                                        type: string;
                                                                        nullable: boolean;
                                                                    };
                                                                    image: {
                                                                        type: string;
                                                                        nullable: boolean;
                                                                    };
                                                                    emailVerified: {
                                                                        type: string;
                                                                    };
                                                                    createdAt: {
                                                                        type: string;
                                                                        format: string;
                                                                    };
                                                                    updatedAt: {
                                                                        type: string;
                                                                        format: string;
                                                                    };
                                                                };
                                                                required: string[];
                                                            };
                                                        };
                                                    };
                                                    required: string[];
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    } & {
                        use: any[];
                    };
                    path: "/sign-in/social";
                };
                callbackOAuth: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                        body?: {
                            code?: string | undefined;
                            error?: string | undefined;
                            device_id?: string | undefined;
                            error_description?: string | undefined;
                            state?: string | undefined;
                            user?: string | undefined;
                        } | undefined;
                    } & {
                        method: "GET" | "POST";
                    } & {
                        query?: {
                            code?: string | undefined;
                            error?: string | undefined;
                            device_id?: string | undefined;
                            error_description?: string | undefined;
                            state?: string | undefined;
                            user?: string | undefined;
                        } | undefined;
                    } & {
                        params: {
                            id: string;
                        };
                    } & {
                        request?: Request;
                    } & {
                        headers?: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: void;
                    } : void>;
                    options: {
                        method: ("GET" | "POST")[];
                        body: zod.ZodOptional<zod.ZodObject<{
                            code: zod.ZodOptional<zod.ZodString>;
                            error: zod.ZodOptional<zod.ZodString>;
                            device_id: zod.ZodOptional<zod.ZodString>;
                            error_description: zod.ZodOptional<zod.ZodString>;
                            state: zod.ZodOptional<zod.ZodString>;
                            user: zod.ZodOptional<zod.ZodString>;
                        }, zod_v4_core.$strip>>;
                        query: zod.ZodOptional<zod.ZodObject<{
                            code: zod.ZodOptional<zod.ZodString>;
                            error: zod.ZodOptional<zod.ZodString>;
                            device_id: zod.ZodOptional<zod.ZodString>;
                            error_description: zod.ZodOptional<zod.ZodString>;
                            state: zod.ZodOptional<zod.ZodString>;
                            user: zod.ZodOptional<zod.ZodString>;
                        }, zod_v4_core.$strip>>;
                        metadata: {
                            isAction: false;
                        };
                    } & {
                        use: any[];
                    };
                    path: "/callback/:id";
                };
                getSession: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                        body?: undefined;
                    } & {
                        method?: "GET" | undefined;
                    } & {
                        query?: {
                            disableCookieCache?: unknown;
                            disableRefresh?: unknown;
                        } | undefined;
                    } & {
                        params?: Record<string, any>;
                    } & {
                        request?: Request;
                    } & {
                        headers: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: {
                            session: {
                                id: string;
                                userId: string;
                                expiresAt: Date;
                                createdAt: Date;
                                updatedAt: Date;
                                token: string;
                                ipAddress?: string | null | undefined;
                                userAgent?: string | null | undefined;
                            };
                            user: {
                                id: string;
                                email: string;
                                emailVerified: boolean;
                                name: string;
                                createdAt: Date;
                                updatedAt: Date;
                                image?: string | null | undefined;
                            };
                        } | null;
                    } : {
                        session: {
                            id: string;
                            userId: string;
                            expiresAt: Date;
                            createdAt: Date;
                            updatedAt: Date;
                            token: string;
                            ipAddress?: string | null | undefined;
                            userAgent?: string | null | undefined;
                        };
                        user: {
                            id: string;
                            email: string;
                            emailVerified: boolean;
                            name: string;
                            createdAt: Date;
                            updatedAt: Date;
                            image?: string | null | undefined;
                        };
                    } | null>;
                    options: {
                        method: "GET";
                        query: zod.ZodOptional<zod.ZodObject<{
                            disableCookieCache: zod.ZodOptional<zod.ZodCoercedBoolean<unknown>>;
                            disableRefresh: zod.ZodOptional<zod.ZodCoercedBoolean<unknown>>;
                        }, zod_v4_core.$strip>>;
                        requireHeaders: true;
                        metadata: {
                            openapi: {
                                description: string;
                                responses: {
                                    "200": {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "object";
                                                    properties: {
                                                        session: {
                                                            $ref: string;
                                                        };
                                                        user: {
                                                            $ref: string;
                                                        };
                                                    };
                                                    required: string[];
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    } & {
                        use: any[];
                    };
                    path: "/get-session";
                };
                signOut: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                        body?: undefined;
                    } & {
                        method?: "POST" | undefined;
                    } & {
                        query?: Record<string, any> | undefined;
                    } & {
                        params?: Record<string, any>;
                    } & {
                        request?: Request;
                    } & {
                        headers: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: {
                            success: boolean;
                        };
                    } : {
                        success: boolean;
                    }>;
                    options: {
                        method: "POST";
                        requireHeaders: true;
                        metadata: {
                            openapi: {
                                description: string;
                                responses: {
                                    "200": {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "object";
                                                    properties: {
                                                        success: {
                                                            type: string;
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    } & {
                        use: any[];
                    };
                    path: "/sign-out";
                };
                signUpEmail: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                        body: {
                            name: string;
                            email: string;
                            password: string;
                            image?: string;
                            callbackURL?: string;
                            rememberMe?: boolean;
                        };
                    } & {
                        method?: "POST" | undefined;
                    } & {
                        query?: Record<string, any> | undefined;
                    } & {
                        params?: Record<string, any>;
                    } & {
                        request?: Request;
                    } & {
                        headers?: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: {
                            token: null;
                            user: {
                                id: string;
                                email: string;
                                name: string;
                                image: string | null | undefined;
                                emailVerified: boolean;
                                createdAt: Date;
                                updatedAt: Date;
                            };
                        } | {
                            token: string;
                            user: {
                                id: string;
                                email: string;
                                name: string;
                                image: string | null | undefined;
                                emailVerified: boolean;
                                createdAt: Date;
                                updatedAt: Date;
                            };
                        };
                    } : {
                        token: null;
                        user: {
                            id: string;
                            email: string;
                            name: string;
                            image: string | null | undefined;
                            emailVerified: boolean;
                            createdAt: Date;
                            updatedAt: Date;
                        };
                    } | {
                        token: string;
                        user: {
                            id: string;
                            email: string;
                            name: string;
                            image: string | null | undefined;
                            emailVerified: boolean;
                            createdAt: Date;
                            updatedAt: Date;
                        };
                    }>;
                    options: {
                        method: "POST";
                        body: zod.ZodRecord<zod.ZodString, zod.ZodAny>;
                        metadata: {
                            $Infer: {
                                body: {
                                    name: string;
                                    email: string;
                                    password: string;
                                    image?: string;
                                    callbackURL?: string;
                                    rememberMe?: boolean;
                                };
                            };
                            openapi: {
                                description: string;
                                requestBody: {
                                    content: {
                                        "application/json": {
                                            schema: {
                                                type: "object";
                                                properties: {
                                                    name: {
                                                        type: string;
                                                        description: string;
                                                    };
                                                    email: {
                                                        type: string;
                                                        description: string;
                                                    };
                                                    password: {
                                                        type: string;
                                                        description: string;
                                                    };
                                                    image: {
                                                        type: string;
                                                        description: string;
                                                    };
                                                    callbackURL: {
                                                        type: string;
                                                        description: string;
                                                    };
                                                    rememberMe: {
                                                        type: string;
                                                        description: string;
                                                    };
                                                };
                                                required: string[];
                                            };
                                        };
                                    };
                                };
                                responses: {
                                    "200": {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "object";
                                                    properties: {
                                                        token: {
                                                            type: string;
                                                            nullable: boolean;
                                                            description: string;
                                                        };
                                                        user: {
                                                            type: string;
                                                            properties: {
                                                                id: {
                                                                    type: string;
                                                                    description: string;
                                                                };
                                                                email: {
                                                                    type: string;
                                                                    format: string;
                                                                    description: string;
                                                                };
                                                                name: {
                                                                    type: string;
                                                                    description: string;
                                                                };
                                                                image: {
                                                                    type: string;
                                                                    format: string;
                                                                    nullable: boolean;
                                                                    description: string;
                                                                };
                                                                emailVerified: {
                                                                    type: string;
                                                                    description: string;
                                                                };
                                                                createdAt: {
                                                                    type: string;
                                                                    format: string;
                                                                    description: string;
                                                                };
                                                                updatedAt: {
                                                                    type: string;
                                                                    format: string;
                                                                    description: string;
                                                                };
                                                            };
                                                            required: string[];
                                                        };
                                                    };
                                                    required: string[];
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    } & {
                        use: any[];
                    };
                    path: "/sign-up/email";
                };
                signInEmail: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                        body: {
                            email: string;
                            password: string;
                            callbackURL?: string | undefined;
                            rememberMe?: boolean | undefined;
                        };
                    } & {
                        method?: "POST" | undefined;
                    } & {
                        query?: Record<string, any> | undefined;
                    } & {
                        params?: Record<string, any>;
                    } & {
                        request?: Request;
                    } & {
                        headers?: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: {
                            redirect: boolean;
                            token: string;
                            url: string | undefined;
                            user: {
                                id: string;
                                email: string;
                                name: string;
                                image: string | null | undefined;
                                emailVerified: boolean;
                                createdAt: Date;
                                updatedAt: Date;
                            };
                        };
                    } : {
                        redirect: boolean;
                        token: string;
                        url: string | undefined;
                        user: {
                            id: string;
                            email: string;
                            name: string;
                            image: string | null | undefined;
                            emailVerified: boolean;
                            createdAt: Date;
                            updatedAt: Date;
                        };
                    }>;
                    options: {
                        method: "POST";
                        body: zod.ZodObject<{
                            email: zod.ZodString;
                            password: zod.ZodString;
                            callbackURL: zod.ZodOptional<zod.ZodString>;
                            rememberMe: zod.ZodOptional<zod.ZodDefault<zod.ZodBoolean>>;
                        }, zod_v4_core.$strip>;
                        metadata: {
                            openapi: {
                                description: string;
                                responses: {
                                    "200": {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "object";
                                                    description: string;
                                                    properties: {
                                                        redirect: {
                                                            type: string;
                                                            enum: boolean[];
                                                        };
                                                        token: {
                                                            type: string;
                                                            description: string;
                                                        };
                                                        url: {
                                                            type: string;
                                                            nullable: boolean;
                                                        };
                                                        user: {
                                                            type: string;
                                                            properties: {
                                                                id: {
                                                                    type: string;
                                                                };
                                                                email: {
                                                                    type: string;
                                                                };
                                                                name: {
                                                                    type: string;
                                                                    nullable: boolean;
                                                                };
                                                                image: {
                                                                    type: string;
                                                                    nullable: boolean;
                                                                };
                                                                emailVerified: {
                                                                    type: string;
                                                                };
                                                                createdAt: {
                                                                    type: string;
                                                                    format: string;
                                                                };
                                                                updatedAt: {
                                                                    type: string;
                                                                    format: string;
                                                                };
                                                            };
                                                            required: string[];
                                                        };
                                                    };
                                                    required: string[];
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    } & {
                        use: any[];
                    };
                    path: "/sign-in/email";
                };
                forgetPassword: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                        body: {
                            email: string;
                            redirectTo?: string | undefined;
                        };
                    } & {
                        method?: "POST" | undefined;
                    } & {
                        query?: Record<string, any> | undefined;
                    } & {
                        params?: Record<string, any>;
                    } & {
                        request?: Request;
                    } & {
                        headers?: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: {
                            status: boolean;
                        };
                    } : {
                        status: boolean;
                    }>;
                    options: {
                        method: "POST";
                        body: zod.ZodObject<{
                            email: zod.ZodString;
                            redirectTo: zod.ZodOptional<zod.ZodString>;
                        }, zod_v4_core.$strip>;
                        metadata: {
                            openapi: {
                                description: string;
                                responses: {
                                    "200": {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "object";
                                                    properties: {
                                                        status: {
                                                            type: string;
                                                        };
                                                        message: {
                                                            type: string;
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    } & {
                        use: any[];
                    };
                    path: "/forget-password";
                };
                resetPassword: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                        body: {
                            newPassword: string;
                            token?: string | undefined;
                        };
                    } & {
                        method?: "POST" | undefined;
                    } & {
                        query?: {
                            token?: string | undefined;
                        } | undefined;
                    } & {
                        params?: Record<string, any>;
                    } & {
                        request?: Request;
                    } & {
                        headers?: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: {
                            status: boolean;
                        };
                    } : {
                        status: boolean;
                    }>;
                    options: {
                        method: "POST";
                        query: zod.ZodOptional<zod.ZodObject<{
                            token: zod.ZodOptional<zod.ZodString>;
                        }, zod_v4_core.$strip>>;
                        body: zod.ZodObject<{
                            newPassword: zod.ZodString;
                            token: zod.ZodOptional<zod.ZodString>;
                        }, zod_v4_core.$strip>;
                        metadata: {
                            openapi: {
                                description: string;
                                responses: {
                                    "200": {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "object";
                                                    properties: {
                                                        status: {
                                                            type: string;
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    } & {
                        use: any[];
                    };
                    path: "/reset-password";
                };
                verifyEmail: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                        body?: undefined;
                    } & {
                        method?: "GET" | undefined;
                    } & {
                        query: {
                            token: string;
                            callbackURL?: string | undefined;
                        };
                    } & {
                        params?: Record<string, any>;
                    } & {
                        request?: Request;
                    } & {
                        headers?: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: void | {
                            status: boolean;
                            user: {
                                id: any;
                                email: any;
                                name: any;
                                image: any;
                                emailVerified: any;
                                createdAt: any;
                                updatedAt: any;
                            };
                        } | {
                            status: boolean;
                            user: null;
                        };
                    } : void | {
                        status: boolean;
                        user: {
                            id: any;
                            email: any;
                            name: any;
                            image: any;
                            emailVerified: any;
                            createdAt: any;
                            updatedAt: any;
                        };
                    } | {
                        status: boolean;
                        user: null;
                    }>;
                    options: {
                        method: "GET";
                        query: zod.ZodObject<{
                            token: zod.ZodString;
                            callbackURL: zod.ZodOptional<zod.ZodString>;
                        }, zod_v4_core.$strip>;
                        use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<void>)[];
                        metadata: {
                            openapi: {
                                description: string;
                                parameters: ({
                                    name: string;
                                    in: "query";
                                    description: string;
                                    required: true;
                                    schema: {
                                        type: "string";
                                    };
                                } | {
                                    name: string;
                                    in: "query";
                                    description: string;
                                    required: false;
                                    schema: {
                                        type: "string";
                                    };
                                })[];
                                responses: {
                                    "200": {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "object";
                                                    properties: {
                                                        user: {
                                                            type: string;
                                                            properties: {
                                                                id: {
                                                                    type: string;
                                                                    description: string;
                                                                };
                                                                email: {
                                                                    type: string;
                                                                    description: string;
                                                                };
                                                                name: {
                                                                    type: string;
                                                                    description: string;
                                                                };
                                                                image: {
                                                                    type: string;
                                                                    description: string;
                                                                };
                                                                emailVerified: {
                                                                    type: string;
                                                                    description: string;
                                                                };
                                                                createdAt: {
                                                                    type: string;
                                                                    description: string;
                                                                };
                                                                updatedAt: {
                                                                    type: string;
                                                                    description: string;
                                                                };
                                                            };
                                                            required: string[];
                                                        };
                                                        status: {
                                                            type: string;
                                                            description: string;
                                                        };
                                                    };
                                                    required: string[];
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    } & {
                        use: any[];
                    };
                    path: "/verify-email";
                };
                sendVerificationEmail: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                        body: {
                            email: string;
                            callbackURL?: string | undefined;
                        };
                    } & {
                        method?: "POST" | undefined;
                    } & {
                        query?: Record<string, any> | undefined;
                    } & {
                        params?: Record<string, any>;
                    } & {
                        request?: Request;
                    } & {
                        headers?: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: {
                            status: boolean;
                        };
                    } : {
                        status: boolean;
                    }>;
                    options: {
                        method: "POST";
                        body: zod.ZodObject<{
                            email: zod.ZodEmail;
                            callbackURL: zod.ZodOptional<zod.ZodString>;
                        }, zod_v4_core.$strip>;
                        metadata: {
                            openapi: {
                                description: string;
                                requestBody: {
                                    content: {
                                        "application/json": {
                                            schema: {
                                                type: "object";
                                                properties: {
                                                    email: {
                                                        type: string;
                                                        description: string;
                                                        example: string;
                                                    };
                                                    callbackURL: {
                                                        type: string;
                                                        description: string;
                                                        example: string;
                                                        nullable: boolean;
                                                    };
                                                };
                                                required: string[];
                                            };
                                        };
                                    };
                                };
                                responses: {
                                    "200": {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "object";
                                                    properties: {
                                                        status: {
                                                            type: string;
                                                            description: string;
                                                            example: boolean;
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                    "400": {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "object";
                                                    properties: {
                                                        message: {
                                                            type: string;
                                                            description: string;
                                                            example: string;
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    } & {
                        use: any[];
                    };
                    path: "/send-verification-email";
                };
                changeEmail: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                        body: {
                            newEmail: string;
                            callbackURL?: string | undefined;
                        };
                    } & {
                        method?: "POST" | undefined;
                    } & {
                        query?: Record<string, any> | undefined;
                    } & {
                        params?: Record<string, any>;
                    } & {
                        request?: Request;
                    } & {
                        headers?: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: {
                            status: boolean;
                        };
                    } : {
                        status: boolean;
                    }>;
                    options: {
                        method: "POST";
                        body: zod.ZodObject<{
                            newEmail: zod.ZodEmail;
                            callbackURL: zod.ZodOptional<zod.ZodString>;
                        }, zod_v4_core.$strip>;
                        use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<{
                            session: {
                                session: Record<string, any> & {
                                    id: string;
                                    userId: string;
                                    expiresAt: Date;
                                    createdAt: Date;
                                    updatedAt: Date;
                                    token: string;
                                    ipAddress?: string | null | undefined;
                                    userAgent?: string | null | undefined;
                                };
                                user: Record<string, any> & {
                                    id: string;
                                    email: string;
                                    emailVerified: boolean;
                                    name: string;
                                    createdAt: Date;
                                    updatedAt: Date;
                                    image?: string | null | undefined;
                                };
                            };
                        }>)[];
                        metadata: {
                            openapi: {
                                responses: {
                                    "200": {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "object";
                                                    properties: {
                                                        status: {
                                                            type: string;
                                                            description: string;
                                                        };
                                                        message: {
                                                            type: string;
                                                            enum: string[];
                                                            description: string;
                                                            nullable: boolean;
                                                        };
                                                    };
                                                    required: string[];
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    } & {
                        use: any[];
                    };
                    path: "/change-email";
                };
                changePassword: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                        body: {
                            newPassword: string;
                            currentPassword: string;
                            revokeOtherSessions?: boolean | undefined;
                        };
                    } & {
                        method?: "POST" | undefined;
                    } & {
                        query?: Record<string, any> | undefined;
                    } & {
                        params?: Record<string, any>;
                    } & {
                        request?: Request;
                    } & {
                        headers?: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: {
                            token: string | null;
                            user: {
                                id: string;
                                email: string;
                                name: string;
                                image: string | null | undefined;
                                emailVerified: boolean;
                                createdAt: Date;
                                updatedAt: Date;
                            };
                        };
                    } : {
                        token: string | null;
                        user: {
                            id: string;
                            email: string;
                            name: string;
                            image: string | null | undefined;
                            emailVerified: boolean;
                            createdAt: Date;
                            updatedAt: Date;
                        };
                    }>;
                    options: {
                        method: "POST";
                        body: zod.ZodObject<{
                            newPassword: zod.ZodString;
                            currentPassword: zod.ZodString;
                            revokeOtherSessions: zod.ZodOptional<zod.ZodBoolean>;
                        }, zod_v4_core.$strip>;
                        use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<{
                            session: {
                                session: Record<string, any> & {
                                    id: string;
                                    userId: string;
                                    expiresAt: Date;
                                    createdAt: Date;
                                    updatedAt: Date;
                                    token: string;
                                    ipAddress?: string | null | undefined;
                                    userAgent?: string | null | undefined;
                                };
                                user: Record<string, any> & {
                                    id: string;
                                    email: string;
                                    emailVerified: boolean;
                                    name: string;
                                    createdAt: Date;
                                    updatedAt: Date;
                                    image?: string | null | undefined;
                                };
                            };
                        }>)[];
                        metadata: {
                            openapi: {
                                description: string;
                                responses: {
                                    "200": {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "object";
                                                    properties: {
                                                        token: {
                                                            type: string;
                                                            nullable: boolean;
                                                            description: string;
                                                        };
                                                        user: {
                                                            type: string;
                                                            properties: {
                                                                id: {
                                                                    type: string;
                                                                    description: string;
                                                                };
                                                                email: {
                                                                    type: string;
                                                                    format: string;
                                                                    description: string;
                                                                };
                                                                name: {
                                                                    type: string;
                                                                    description: string;
                                                                };
                                                                image: {
                                                                    type: string;
                                                                    format: string;
                                                                    nullable: boolean;
                                                                    description: string;
                                                                };
                                                                emailVerified: {
                                                                    type: string;
                                                                    description: string;
                                                                };
                                                                createdAt: {
                                                                    type: string;
                                                                    format: string;
                                                                    description: string;
                                                                };
                                                                updatedAt: {
                                                                    type: string;
                                                                    format: string;
                                                                    description: string;
                                                                };
                                                            };
                                                            required: string[];
                                                        };
                                                    };
                                                    required: string[];
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    } & {
                        use: any[];
                    };
                    path: "/change-password";
                };
                setPassword: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                        body: {
                            newPassword: string;
                        };
                    } & {
                        method?: "POST" | undefined;
                    } & {
                        query?: Record<string, any> | undefined;
                    } & {
                        params?: Record<string, any>;
                    } & {
                        request?: Request;
                    } & {
                        headers?: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: {
                            status: boolean;
                        };
                    } : {
                        status: boolean;
                    }>;
                    options: {
                        method: "POST";
                        body: zod.ZodObject<{
                            newPassword: zod.ZodString;
                        }, zod_v4_core.$strip>;
                        metadata: {
                            SERVER_ONLY: true;
                        };
                        use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<{
                            session: {
                                session: Record<string, any> & {
                                    id: string;
                                    userId: string;
                                    expiresAt: Date;
                                    createdAt: Date;
                                    updatedAt: Date;
                                    token: string;
                                    ipAddress?: string | null | undefined;
                                    userAgent?: string | null | undefined;
                                };
                                user: Record<string, any> & {
                                    id: string;
                                    email: string;
                                    emailVerified: boolean;
                                    name: string;
                                    createdAt: Date;
                                    updatedAt: Date;
                                    image?: string | null | undefined;
                                };
                            };
                        }>)[];
                    } & {
                        use: any[];
                    };
                    path: "/set-password";
                };
                updateUser: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                        body: Partial<{}> & {
                            name?: string;
                            image?: string;
                        };
                    } & {
                        method?: "POST" | undefined;
                    } & {
                        query?: Record<string, any> | undefined;
                    } & {
                        params?: Record<string, any>;
                    } & {
                        request?: Request;
                    } & {
                        headers?: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: {
                            status: boolean;
                        };
                    } : {
                        status: boolean;
                    }>;
                    options: {
                        method: "POST";
                        body: zod.ZodRecord<zod.ZodString, zod.ZodAny>;
                        use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<{
                            session: {
                                session: Record<string, any> & {
                                    id: string;
                                    userId: string;
                                    expiresAt: Date;
                                    createdAt: Date;
                                    updatedAt: Date;
                                    token: string;
                                    ipAddress?: string | null | undefined;
                                    userAgent?: string | null | undefined;
                                };
                                user: Record<string, any> & {
                                    id: string;
                                    email: string;
                                    emailVerified: boolean;
                                    name: string;
                                    createdAt: Date;
                                    updatedAt: Date;
                                    image?: string | null | undefined;
                                };
                            };
                        }>)[];
                        metadata: {
                            $Infer: {
                                body: Partial<{}> & {
                                    name?: string;
                                    image?: string;
                                };
                            };
                            openapi: {
                                description: string;
                                requestBody: {
                                    content: {
                                        "application/json": {
                                            schema: {
                                                type: "object";
                                                properties: {
                                                    name: {
                                                        type: string;
                                                        description: string;
                                                    };
                                                    image: {
                                                        type: string;
                                                        description: string;
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                                responses: {
                                    "200": {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "object";
                                                    properties: {
                                                        status: {
                                                            type: string;
                                                            description: string;
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    } & {
                        use: any[];
                    };
                    path: "/update-user";
                };
                deleteUser: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                        body: {
                            callbackURL?: string | undefined;
                            password?: string | undefined;
                            token?: string | undefined;
                        };
                    } & {
                        method?: "POST" | undefined;
                    } & {
                        query?: Record<string, any> | undefined;
                    } & {
                        params?: Record<string, any>;
                    } & {
                        request?: Request;
                    } & {
                        headers?: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: {
                            success: boolean;
                            message: string;
                        };
                    } : {
                        success: boolean;
                        message: string;
                    }>;
                    options: {
                        method: "POST";
                        use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<{
                            session: {
                                session: Record<string, any> & {
                                    id: string;
                                    userId: string;
                                    expiresAt: Date;
                                    createdAt: Date;
                                    updatedAt: Date;
                                    token: string;
                                    ipAddress?: string | null | undefined;
                                    userAgent?: string | null | undefined;
                                };
                                user: Record<string, any> & {
                                    id: string;
                                    email: string;
                                    emailVerified: boolean;
                                    name: string;
                                    createdAt: Date;
                                    updatedAt: Date;
                                    image?: string | null | undefined;
                                };
                            };
                        }>)[];
                        body: zod.ZodObject<{
                            callbackURL: zod.ZodOptional<zod.ZodString>;
                            password: zod.ZodOptional<zod.ZodString>;
                            token: zod.ZodOptional<zod.ZodString>;
                        }, zod_v4_core.$strip>;
                        metadata: {
                            openapi: {
                                description: string;
                                responses: {
                                    "200": {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "object";
                                                    properties: {
                                                        success: {
                                                            type: string;
                                                            description: string;
                                                        };
                                                        message: {
                                                            type: string;
                                                            enum: string[];
                                                            description: string;
                                                        };
                                                    };
                                                    required: string[];
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    } & {
                        use: any[];
                    };
                    path: "/delete-user";
                };
                forgetPasswordCallback: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                        body?: undefined;
                    } & {
                        method?: "GET" | undefined;
                    } & {
                        query: {
                            callbackURL: string;
                        };
                    } & {
                        params: {
                            token: string;
                        };
                    } & {
                        request?: Request;
                    } & {
                        headers?: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: never;
                    } : never>;
                    options: {
                        method: "GET";
                        query: zod.ZodObject<{
                            callbackURL: zod.ZodString;
                        }, zod_v4_core.$strip>;
                        use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<void>)[];
                        metadata: {
                            openapi: {
                                description: string;
                                responses: {
                                    "200": {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "object";
                                                    properties: {
                                                        token: {
                                                            type: string;
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    } & {
                        use: any[];
                    };
                    path: "/reset-password/:token";
                };
                requestPasswordReset: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                        body: {
                            email: string;
                            redirectTo?: string | undefined;
                        };
                    } & {
                        method?: "POST" | undefined;
                    } & {
                        query?: Record<string, any> | undefined;
                    } & {
                        params?: Record<string, any>;
                    } & {
                        request?: Request;
                    } & {
                        headers?: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: {
                            status: boolean;
                        };
                    } : {
                        status: boolean;
                    }>;
                    options: {
                        method: "POST";
                        body: zod.ZodObject<{
                            email: zod.ZodEmail;
                            redirectTo: zod.ZodOptional<zod.ZodString>;
                        }, zod_v4_core.$strip>;
                        metadata: {
                            openapi: {
                                description: string;
                                responses: {
                                    "200": {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "object";
                                                    properties: {
                                                        status: {
                                                            type: string;
                                                        };
                                                        message: {
                                                            type: string;
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    } & {
                        use: any[];
                    };
                    path: "/request-password-reset";
                };
                requestPasswordResetCallback: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                        body?: undefined;
                    } & {
                        method?: "GET" | undefined;
                    } & {
                        query: {
                            callbackURL: string;
                        };
                    } & {
                        params: {
                            token: string;
                        };
                    } & {
                        request?: Request;
                    } & {
                        headers?: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: never;
                    } : never>;
                    options: {
                        method: "GET";
                        query: zod.ZodObject<{
                            callbackURL: zod.ZodString;
                        }, zod_v4_core.$strip>;
                        use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<void>)[];
                        metadata: {
                            openapi: {
                                description: string;
                                responses: {
                                    "200": {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "object";
                                                    properties: {
                                                        token: {
                                                            type: string;
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    } & {
                        use: any[];
                    };
                    path: "/reset-password/:token";
                };
                listSessions: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                        body?: undefined;
                    } & {
                        method?: "GET" | undefined;
                    } & {
                        query?: Record<string, any> | undefined;
                    } & {
                        params?: Record<string, any>;
                    } & {
                        request?: Request;
                    } & {
                        headers: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: Prettify<{
                            id: string;
                            userId: string;
                            expiresAt: Date;
                            createdAt: Date;
                            updatedAt: Date;
                            token: string;
                            ipAddress?: string | null | undefined;
                            userAgent?: string | null | undefined;
                        }>[];
                    } : Prettify<{
                        id: string;
                        userId: string;
                        expiresAt: Date;
                        createdAt: Date;
                        updatedAt: Date;
                        token: string;
                        ipAddress?: string | null | undefined;
                        userAgent?: string | null | undefined;
                    }>[]>;
                    options: {
                        method: "GET";
                        use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<{
                            session: {
                                session: Record<string, any> & {
                                    id: string;
                                    userId: string;
                                    expiresAt: Date;
                                    createdAt: Date;
                                    updatedAt: Date;
                                    token: string;
                                    ipAddress?: string | null | undefined;
                                    userAgent?: string | null | undefined;
                                };
                                user: Record<string, any> & {
                                    id: string;
                                    email: string;
                                    emailVerified: boolean;
                                    name: string;
                                    createdAt: Date;
                                    updatedAt: Date;
                                    image?: string | null | undefined;
                                };
                            };
                        }>)[];
                        requireHeaders: true;
                        metadata: {
                            openapi: {
                                description: string;
                                responses: {
                                    "200": {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "array";
                                                    items: {
                                                        $ref: string;
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    } & {
                        use: any[];
                    };
                    path: "/list-sessions";
                };
                revokeSession: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                        body: {
                            token: string;
                        };
                    } & {
                        method?: "POST" | undefined;
                    } & {
                        query?: Record<string, any> | undefined;
                    } & {
                        params?: Record<string, any>;
                    } & {
                        request?: Request;
                    } & {
                        headers: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: {
                            status: boolean;
                        };
                    } : {
                        status: boolean;
                    }>;
                    options: {
                        method: "POST";
                        body: zod.ZodObject<{
                            token: zod.ZodString;
                        }, zod_v4_core.$strip>;
                        use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<{
                            session: {
                                session: Record<string, any> & {
                                    id: string;
                                    userId: string;
                                    expiresAt: Date;
                                    createdAt: Date;
                                    updatedAt: Date;
                                    token: string;
                                    ipAddress?: string | null | undefined;
                                    userAgent?: string | null | undefined;
                                };
                                user: Record<string, any> & {
                                    id: string;
                                    email: string;
                                    emailVerified: boolean;
                                    name: string;
                                    createdAt: Date;
                                    updatedAt: Date;
                                    image?: string | null | undefined;
                                };
                            };
                        }>)[];
                        requireHeaders: true;
                        metadata: {
                            openapi: {
                                description: string;
                                requestBody: {
                                    content: {
                                        "application/json": {
                                            schema: {
                                                type: "object";
                                                properties: {
                                                    token: {
                                                        type: string;
                                                        description: string;
                                                    };
                                                };
                                                required: string[];
                                            };
                                        };
                                    };
                                };
                                responses: {
                                    "200": {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "object";
                                                    properties: {
                                                        status: {
                                                            type: string;
                                                            description: string;
                                                        };
                                                    };
                                                    required: string[];
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    } & {
                        use: any[];
                    };
                    path: "/revoke-session";
                };
                revokeSessions: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                        body?: undefined;
                    } & {
                        method?: "POST" | undefined;
                    } & {
                        query?: Record<string, any> | undefined;
                    } & {
                        params?: Record<string, any>;
                    } & {
                        request?: Request;
                    } & {
                        headers: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: {
                            status: boolean;
                        };
                    } : {
                        status: boolean;
                    }>;
                    options: {
                        method: "POST";
                        use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<{
                            session: {
                                session: Record<string, any> & {
                                    id: string;
                                    userId: string;
                                    expiresAt: Date;
                                    createdAt: Date;
                                    updatedAt: Date;
                                    token: string;
                                    ipAddress?: string | null | undefined;
                                    userAgent?: string | null | undefined;
                                };
                                user: Record<string, any> & {
                                    id: string;
                                    email: string;
                                    emailVerified: boolean;
                                    name: string;
                                    createdAt: Date;
                                    updatedAt: Date;
                                    image?: string | null | undefined;
                                };
                            };
                        }>)[];
                        requireHeaders: true;
                        metadata: {
                            openapi: {
                                description: string;
                                responses: {
                                    "200": {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "object";
                                                    properties: {
                                                        status: {
                                                            type: string;
                                                            description: string;
                                                        };
                                                    };
                                                    required: string[];
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    } & {
                        use: any[];
                    };
                    path: "/revoke-sessions";
                };
                revokeOtherSessions: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                        body?: undefined;
                    } & {
                        method?: "POST" | undefined;
                    } & {
                        query?: Record<string, any> | undefined;
                    } & {
                        params?: Record<string, any>;
                    } & {
                        request?: Request;
                    } & {
                        headers: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: {
                            status: boolean;
                        };
                    } : {
                        status: boolean;
                    }>;
                    options: {
                        method: "POST";
                        requireHeaders: true;
                        use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<{
                            session: {
                                session: Record<string, any> & {
                                    id: string;
                                    userId: string;
                                    expiresAt: Date;
                                    createdAt: Date;
                                    updatedAt: Date;
                                    token: string;
                                    ipAddress?: string | null | undefined;
                                    userAgent?: string | null | undefined;
                                };
                                user: Record<string, any> & {
                                    id: string;
                                    email: string;
                                    emailVerified: boolean;
                                    name: string;
                                    createdAt: Date;
                                    updatedAt: Date;
                                    image?: string | null | undefined;
                                };
                            };
                        }>)[];
                        metadata: {
                            openapi: {
                                description: string;
                                responses: {
                                    "200": {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "object";
                                                    properties: {
                                                        status: {
                                                            type: string;
                                                            description: string;
                                                        };
                                                    };
                                                    required: string[];
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    } & {
                        use: any[];
                    };
                    path: "/revoke-other-sessions";
                };
                linkSocialAccount: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                        body: {
                            provider: unknown;
                            callbackURL?: string | undefined;
                            idToken?: {
                                token: string;
                                nonce?: string | undefined;
                                accessToken?: string | undefined;
                                refreshToken?: string | undefined;
                                scopes?: string[] | undefined;
                            } | undefined;
                            requestSignUp?: boolean | undefined;
                            scopes?: string[] | undefined;
                            errorCallbackURL?: string | undefined;
                            disableRedirect?: boolean | undefined;
                        };
                    } & {
                        method?: "POST" | undefined;
                    } & {
                        query?: Record<string, any> | undefined;
                    } & {
                        params?: Record<string, any>;
                    } & {
                        request?: Request;
                    } & {
                        headers: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: {
                            url: string;
                            redirect: boolean;
                        };
                    } : {
                        url: string;
                        redirect: boolean;
                    }>;
                    options: {
                        method: "POST";
                        requireHeaders: true;
                        body: zod.ZodObject<{
                            callbackURL: zod.ZodOptional<zod.ZodString>;
                            provider: zod.ZodType<"github" | "apple" | "discord" | "facebook" | "microsoft" | "google" | "huggingface" | "slack" | "spotify" | "twitch" | "twitter" | "dropbox" | "kick" | "linear" | "linkedin" | "gitlab" | "tiktok" | "reddit" | "roblox" | "vk" | "zoom" | "notion" | (string & {}), unknown, zod_v4_core.$ZodTypeInternals<"github" | "apple" | "discord" | "facebook" | "microsoft" | "google" | "huggingface" | "slack" | "spotify" | "twitch" | "twitter" | "dropbox" | "kick" | "linear" | "linkedin" | "gitlab" | "tiktok" | "reddit" | "roblox" | "vk" | "zoom" | "notion" | (string & {}), unknown>>;
                            idToken: zod.ZodOptional<zod.ZodObject<{
                                token: zod.ZodString;
                                nonce: zod.ZodOptional<zod.ZodString>;
                                accessToken: zod.ZodOptional<zod.ZodString>;
                                refreshToken: zod.ZodOptional<zod.ZodString>;
                                scopes: zod.ZodOptional<zod.ZodArray<zod.ZodString>>;
                            }, zod_v4_core.$strip>>;
                            requestSignUp: zod.ZodOptional<zod.ZodBoolean>;
                            scopes: zod.ZodOptional<zod.ZodArray<zod.ZodString>>;
                            errorCallbackURL: zod.ZodOptional<zod.ZodString>;
                            disableRedirect: zod.ZodOptional<zod.ZodBoolean>;
                        }, zod_v4_core.$strip>;
                        use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<{
                            session: {
                                session: Record<string, any> & {
                                    id: string;
                                    userId: string;
                                    expiresAt: Date;
                                    createdAt: Date;
                                    updatedAt: Date;
                                    token: string;
                                    ipAddress?: string | null | undefined;
                                    userAgent?: string | null | undefined;
                                };
                                user: Record<string, any> & {
                                    id: string;
                                    email: string;
                                    emailVerified: boolean;
                                    name: string;
                                    createdAt: Date;
                                    updatedAt: Date;
                                    image?: string | null | undefined;
                                };
                            };
                        }>)[];
                        metadata: {
                            openapi: {
                                description: string;
                                responses: {
                                    "200": {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "object";
                                                    properties: {
                                                        url: {
                                                            type: string;
                                                            description: string;
                                                        };
                                                        redirect: {
                                                            type: string;
                                                            description: string;
                                                        };
                                                        status: {
                                                            type: string;
                                                        };
                                                    };
                                                    required: string[];
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    } & {
                        use: any[];
                    };
                    path: "/link-social";
                };
                listUserAccounts: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0?: ({
                        body?: undefined;
                    } & {
                        method?: "GET" | undefined;
                    } & {
                        query?: Record<string, any> | undefined;
                    } & {
                        params?: Record<string, any>;
                    } & {
                        request?: Request;
                    } & {
                        headers?: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }) | undefined): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: {
                            id: string;
                            provider: string;
                            createdAt: Date;
                            updatedAt: Date;
                            accountId: string;
                            scopes: string[];
                        }[];
                    } : {
                        id: string;
                        provider: string;
                        createdAt: Date;
                        updatedAt: Date;
                        accountId: string;
                        scopes: string[];
                    }[]>;
                    options: {
                        method: "GET";
                        use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<{
                            session: {
                                session: Record<string, any> & {
                                    id: string;
                                    userId: string;
                                    expiresAt: Date;
                                    createdAt: Date;
                                    updatedAt: Date;
                                    token: string;
                                    ipAddress?: string | null | undefined;
                                    userAgent?: string | null | undefined;
                                };
                                user: Record<string, any> & {
                                    id: string;
                                    email: string;
                                    emailVerified: boolean;
                                    name: string;
                                    createdAt: Date;
                                    updatedAt: Date;
                                    image?: string | null | undefined;
                                };
                            };
                        }>)[];
                        metadata: {
                            openapi: {
                                description: string;
                                responses: {
                                    "200": {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "array";
                                                    items: {
                                                        type: string;
                                                        properties: {
                                                            id: {
                                                                type: string;
                                                            };
                                                            provider: {
                                                                type: string;
                                                            };
                                                            createdAt: {
                                                                type: string;
                                                                format: string;
                                                            };
                                                            updatedAt: {
                                                                type: string;
                                                                format: string;
                                                            };
                                                        };
                                                        accountId: {
                                                            type: string;
                                                        };
                                                        scopes: {
                                                            type: string;
                                                            items: {
                                                                type: string;
                                                            };
                                                        };
                                                    };
                                                    required: string[];
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    } & {
                        use: any[];
                    };
                    path: "/list-accounts";
                };
                deleteUserCallback: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                        body?: undefined;
                    } & {
                        method?: "GET" | undefined;
                    } & {
                        query: {
                            token: string;
                            callbackURL?: string | undefined;
                        };
                    } & {
                        params?: Record<string, any>;
                    } & {
                        request?: Request;
                    } & {
                        headers?: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: {
                            success: boolean;
                            message: string;
                        };
                    } : {
                        success: boolean;
                        message: string;
                    }>;
                    options: {
                        method: "GET";
                        query: zod.ZodObject<{
                            token: zod.ZodString;
                            callbackURL: zod.ZodOptional<zod.ZodString>;
                        }, zod_v4_core.$strip>;
                        use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<void>)[];
                        metadata: {
                            openapi: {
                                description: string;
                                responses: {
                                    "200": {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "object";
                                                    properties: {
                                                        success: {
                                                            type: string;
                                                            description: string;
                                                        };
                                                        message: {
                                                            type: string;
                                                            enum: string[];
                                                            description: string;
                                                        };
                                                    };
                                                    required: string[];
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    } & {
                        use: any[];
                    };
                    path: "/delete-user/callback";
                };
                unlinkAccount: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                        body: {
                            providerId: string;
                            accountId?: string | undefined;
                        };
                    } & {
                        method?: "POST" | undefined;
                    } & {
                        query?: Record<string, any> | undefined;
                    } & {
                        params?: Record<string, any>;
                    } & {
                        request?: Request;
                    } & {
                        headers?: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: {
                            status: boolean;
                        };
                    } : {
                        status: boolean;
                    }>;
                    options: {
                        method: "POST";
                        body: zod.ZodObject<{
                            providerId: zod.ZodString;
                            accountId: zod.ZodOptional<zod.ZodString>;
                        }, zod_v4_core.$strip>;
                        use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<{
                            session: {
                                session: Record<string, any> & {
                                    id: string;
                                    userId: string;
                                    expiresAt: Date;
                                    createdAt: Date;
                                    updatedAt: Date;
                                    token: string;
                                    ipAddress?: string | null | undefined;
                                    userAgent?: string | null | undefined;
                                };
                                user: Record<string, any> & {
                                    id: string;
                                    email: string;
                                    emailVerified: boolean;
                                    name: string;
                                    createdAt: Date;
                                    updatedAt: Date;
                                    image?: string | null | undefined;
                                };
                            };
                        }>)[];
                        metadata: {
                            openapi: {
                                description: string;
                                responses: {
                                    "200": {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "object";
                                                    properties: {
                                                        status: {
                                                            type: string;
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    } & {
                        use: any[];
                    };
                    path: "/unlink-account";
                };
                refreshToken: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                        body: {
                            providerId: string;
                            accountId?: string | undefined;
                            userId?: string | undefined;
                        };
                    } & {
                        method?: "POST" | undefined;
                    } & {
                        query?: Record<string, any> | undefined;
                    } & {
                        params?: Record<string, any>;
                    } & {
                        request?: Request;
                    } & {
                        headers?: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: OAuth2Tokens;
                    } : OAuth2Tokens>;
                    options: {
                        method: "POST";
                        body: zod.ZodObject<{
                            providerId: zod.ZodString;
                            accountId: zod.ZodOptional<zod.ZodString>;
                            userId: zod.ZodOptional<zod.ZodString>;
                        }, zod_v4_core.$strip>;
                        metadata: {
                            openapi: {
                                description: string;
                                responses: {
                                    200: {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "object";
                                                    properties: {
                                                        tokenType: {
                                                            type: string;
                                                        };
                                                        idToken: {
                                                            type: string;
                                                        };
                                                        accessToken: {
                                                            type: string;
                                                        };
                                                        refreshToken: {
                                                            type: string;
                                                        };
                                                        accessTokenExpiresAt: {
                                                            type: string;
                                                            format: string;
                                                        };
                                                        refreshTokenExpiresAt: {
                                                            type: string;
                                                            format: string;
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                    400: {
                                        description: string;
                                    };
                                };
                            };
                        };
                    } & {
                        use: any[];
                    };
                    path: "/refresh-token";
                };
                getAccessToken: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                        body: {
                            providerId: string;
                            accountId?: string | undefined;
                            userId?: string | undefined;
                        };
                    } & {
                        method?: "POST" | undefined;
                    } & {
                        query?: Record<string, any> | undefined;
                    } & {
                        params?: Record<string, any>;
                    } & {
                        request?: Request;
                    } & {
                        headers?: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: {
                            accessToken: string;
                            accessTokenExpiresAt: Date | undefined;
                            scopes: string[];
                            idToken: string | undefined;
                        };
                    } : {
                        accessToken: string;
                        accessTokenExpiresAt: Date | undefined;
                        scopes: string[];
                        idToken: string | undefined;
                    }>;
                    options: {
                        method: "POST";
                        body: zod.ZodObject<{
                            providerId: zod.ZodString;
                            accountId: zod.ZodOptional<zod.ZodString>;
                            userId: zod.ZodOptional<zod.ZodString>;
                        }, zod_v4_core.$strip>;
                        metadata: {
                            openapi: {
                                description: string;
                                responses: {
                                    200: {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "object";
                                                    properties: {
                                                        tokenType: {
                                                            type: string;
                                                        };
                                                        idToken: {
                                                            type: string;
                                                        };
                                                        accessToken: {
                                                            type: string;
                                                        };
                                                        refreshToken: {
                                                            type: string;
                                                        };
                                                        accessTokenExpiresAt: {
                                                            type: string;
                                                            format: string;
                                                        };
                                                        refreshTokenExpiresAt: {
                                                            type: string;
                                                            format: string;
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                    400: {
                                        description: string;
                                    };
                                };
                            };
                        };
                    } & {
                        use: any[];
                    };
                    path: "/get-access-token";
                };
                accountInfo: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                        body: {
                            accountId: string;
                        };
                    } & {
                        method?: "POST" | undefined;
                    } & {
                        query?: Record<string, any> | undefined;
                    } & {
                        params?: Record<string, any>;
                    } & {
                        request?: Request;
                    } & {
                        headers?: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: {
                            user: {
                                id: string | number;
                                name?: string;
                                email?: string | null;
                                image?: string;
                                emailVerified: boolean;
                            };
                            data: Record<string, any>;
                        } | null;
                    } : {
                        user: {
                            id: string | number;
                            name?: string;
                            email?: string | null;
                            image?: string;
                            emailVerified: boolean;
                        };
                        data: Record<string, any>;
                    } | null>;
                    options: {
                        method: "POST";
                        use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<{
                            session: {
                                session: Record<string, any> & {
                                    id: string;
                                    userId: string;
                                    expiresAt: Date;
                                    createdAt: Date;
                                    updatedAt: Date;
                                    token: string;
                                    ipAddress?: string | null | undefined;
                                    userAgent?: string | null | undefined;
                                };
                                user: Record<string, any> & {
                                    id: string;
                                    email: string;
                                    emailVerified: boolean;
                                    name: string;
                                    createdAt: Date;
                                    updatedAt: Date;
                                    image?: string | null | undefined;
                                };
                            };
                        }>)[];
                        metadata: {
                            openapi: {
                                description: string;
                                responses: {
                                    "200": {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "object";
                                                    properties: {
                                                        user: {
                                                            type: string;
                                                            properties: {
                                                                id: {
                                                                    type: string;
                                                                };
                                                                name: {
                                                                    type: string;
                                                                };
                                                                email: {
                                                                    type: string;
                                                                };
                                                                image: {
                                                                    type: string;
                                                                };
                                                                emailVerified: {
                                                                    type: string;
                                                                };
                                                            };
                                                            required: string[];
                                                        };
                                                        data: {
                                                            type: string;
                                                            properties: {};
                                                            additionalProperties: boolean;
                                                        };
                                                    };
                                                    required: string[];
                                                    additionalProperties: boolean;
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                        body: zod.ZodObject<{
                            accountId: zod.ZodString;
                        }, zod_v4_core.$strip>;
                    } & {
                        use: any[];
                    };
                    path: "/account-info";
                };
            }>, (C extends undefined ? {} : C) & {
                baseURL: string | undefined;
                fetchOptions: {
                    customFetchImpl: (url: string | URL | Request, init?: RequestInit) => Promise<Response>;
                };
            }>> extends {
                getSession: () => Promise<infer Res>;
            } ? Res extends {
                data: infer S;
                error: null;
            } | {
                data: null;
                error: {
                    message?: string | undefined;
                    status: number;
                    statusText: string;
                };
            } ? S : Res extends Record<string, any> ? Res : never : never;
            error: _better_fetch_fetch.BetterFetchError | null;
            isPending: boolean;
        }>;
        $fetch: _better_fetch_fetch.BetterFetch<{
            plugins: (_better_fetch_fetch.BetterFetchPlugin | {
                id: string;
                name: string;
                hooks: {
                    onSuccess: ((context: SuccessContext<any>) => Promise<void> | void) | undefined;
                    onError: ((context: _better_fetch_fetch.ErrorContext) => Promise<void> | void) | undefined;
                    onRequest: (<T_5 extends Record<string, any>>(context: _better_fetch_fetch.RequestContext<T_5>) => Promise<_better_fetch_fetch.RequestContext | void> | _better_fetch_fetch.RequestContext | void) | undefined;
                    onResponse: ((context: _better_fetch_fetch.ResponseContext) => Promise<Response | void | _better_fetch_fetch.ResponseContext> | Response | _better_fetch_fetch.ResponseContext | void) | undefined;
                };
            } | {
                id: string;
                name: string;
                hooks: {
                    onSuccess(context: SuccessContext<any>): void;
                };
            })[];
            method: string;
            headers?: (HeadersInit & (HeadersInit | {
                accept: "application/json" | "text/plain" | "application/octet-stream";
                "content-type": "application/json" | "text/plain" | "application/x-www-form-urlencoded" | "multipart/form-data" | "application/octet-stream";
                authorization: "Bearer" | "Basic";
            })) | undefined;
            redirect?: RequestRedirect | undefined;
            cache?: RequestCache | undefined;
            credentials?: RequestCredentials;
            integrity?: string | undefined;
            keepalive?: boolean | undefined;
            mode?: RequestMode | undefined;
            priority?: RequestPriority | undefined;
            referrer?: string | undefined;
            referrerPolicy?: ReferrerPolicy | undefined;
            signal?: (AbortSignal | null) | undefined;
            window?: null | undefined;
            onRetry?: ((response: _better_fetch_fetch.ResponseContext) => Promise<void> | void) | undefined;
            hookOptions?: {
                cloneResponse?: boolean;
            } | undefined;
            timeout?: number | undefined;
            customFetchImpl: _better_fetch_fetch.FetchEsque;
            baseURL: string;
            throw?: boolean | undefined;
            auth?: ({
                type: "Bearer";
                token: string | Promise<string | undefined> | (() => string | Promise<string | undefined> | undefined) | undefined;
            } | {
                type: "Basic";
                username: string | (() => string | undefined) | undefined;
                password: string | (() => string | undefined) | undefined;
            } | {
                type: "Custom";
                prefix: string | (() => string | undefined) | undefined;
                value: string | (() => string | undefined) | undefined;
            }) | undefined;
            body?: any;
            query?: any;
            params?: any;
            duplex?: "full" | "half" | undefined;
            jsonParser: (text: string) => Promise<any> | any;
            retry?: _better_fetch_fetch.RetryOptions | undefined;
            retryAttempt?: number | undefined;
            output?: (_better_fetch_fetch.StandardSchemaV1 | typeof Blob | typeof File) | undefined;
            errorSchema?: _better_fetch_fetch.StandardSchemaV1 | undefined;
            disableValidation?: boolean | undefined;
        }, unknown, unknown, {}>;
        $store: {
            notify: (signal?: Omit<string, "$sessionSignal"> | "$sessionSignal") => void;
            listen: (signal: Omit<string, "$sessionSignal"> | "$sessionSignal", listener: (value: boolean, oldValue?: boolean | undefined) => void) => void;
            atoms: Record<string, nanostores.WritableAtom<any>>;
        };
        $Infer: {
            Session: NonNullable<UnionToIntersection<InferRoute<((C extends undefined ? {} : C) & {
                baseURL: string | undefined;
                fetchOptions: {
                    customFetchImpl: (url: string | URL | Request, init?: RequestInit) => Promise<Response>;
                };
            })["plugins"] extends any[] ? FilterActions<{
                ok: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0?: ({
                        body?: undefined;
                    } & {
                        method?: "GET" | undefined;
                    } & {
                        query?: Record<string, any> | undefined;
                    } & {
                        params?: Record<string, any>;
                    } & {
                        request?: Request;
                    } & {
                        headers?: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }) | undefined): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: {
                            ok: boolean;
                        };
                    } : {
                        ok: boolean;
                    }>;
                    options: {
                        method: "GET";
                        metadata: {
                            openapi: {
                                description: string;
                                responses: {
                                    "200": {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "object";
                                                    properties: {
                                                        ok: {
                                                            type: string;
                                                            description: string;
                                                        };
                                                    };
                                                    required: string[];
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                            isAction: false;
                        };
                    } & {
                        use: any[];
                    };
                    path: "/ok";
                };
                error: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0?: ({
                        body?: undefined;
                    } & {
                        method?: "GET" | undefined;
                    } & {
                        query?: Record<string, any> | undefined;
                    } & {
                        params?: Record<string, any>;
                    } & {
                        request?: Request;
                    } & {
                        headers?: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }) | undefined): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: Response;
                    } : Response>;
                    options: {
                        method: "GET";
                        metadata: {
                            openapi: {
                                description: string;
                                responses: {
                                    "200": {
                                        description: string;
                                        content: {
                                            "text/html": {
                                                schema: {
                                                    type: "string";
                                                    description: string;
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                            isAction: false;
                        };
                    } & {
                        use: any[];
                    };
                    path: "/error";
                };
                signInSocial: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                        body: {
                            provider: unknown;
                            callbackURL?: string | undefined;
                            newUserCallbackURL?: string | undefined;
                            errorCallbackURL?: string | undefined;
                            disableRedirect?: boolean | undefined;
                            idToken?: {
                                token: string;
                                nonce?: string | undefined;
                                accessToken?: string | undefined;
                                refreshToken?: string | undefined;
                                expiresAt?: number | undefined;
                            } | undefined;
                            scopes?: string[] | undefined;
                            requestSignUp?: boolean | undefined;
                            loginHint?: string | undefined;
                        };
                    } & {
                        method?: "POST" | undefined;
                    } & {
                        query?: Record<string, any> | undefined;
                    } & {
                        params?: Record<string, any>;
                    } & {
                        request?: Request;
                    } & {
                        headers?: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: {
                            redirect: boolean;
                            token: string;
                            url: undefined;
                            user: {
                                id: string;
                                email: string;
                                name: string;
                                image: string | null | undefined;
                                emailVerified: boolean;
                                createdAt: Date;
                                updatedAt: Date;
                            };
                        } | {
                            url: string;
                            redirect: boolean;
                        };
                    } : {
                        redirect: boolean;
                        token: string;
                        url: undefined;
                        user: {
                            id: string;
                            email: string;
                            name: string;
                            image: string | null | undefined;
                            emailVerified: boolean;
                            createdAt: Date;
                            updatedAt: Date;
                        };
                    } | {
                        url: string;
                        redirect: boolean;
                    }>;
                    options: {
                        method: "POST";
                        body: zod.ZodObject<{
                            callbackURL: zod.ZodOptional<zod.ZodString>;
                            newUserCallbackURL: zod.ZodOptional<zod.ZodString>;
                            errorCallbackURL: zod.ZodOptional<zod.ZodString>;
                            provider: zod.ZodType<"github" | "apple" | "discord" | "facebook" | "microsoft" | "google" | "huggingface" | "slack" | "spotify" | "twitch" | "twitter" | "dropbox" | "kick" | "linear" | "linkedin" | "gitlab" | "tiktok" | "reddit" | "roblox" | "vk" | "zoom" | "notion" | (string & {}), unknown, zod_v4_core.$ZodTypeInternals<"github" | "apple" | "discord" | "facebook" | "microsoft" | "google" | "huggingface" | "slack" | "spotify" | "twitch" | "twitter" | "dropbox" | "kick" | "linear" | "linkedin" | "gitlab" | "tiktok" | "reddit" | "roblox" | "vk" | "zoom" | "notion" | (string & {}), unknown>>;
                            disableRedirect: zod.ZodOptional<zod.ZodBoolean>;
                            idToken: zod.ZodOptional<zod.ZodObject<{
                                token: zod.ZodString;
                                nonce: zod.ZodOptional<zod.ZodString>;
                                accessToken: zod.ZodOptional<zod.ZodString>;
                                refreshToken: zod.ZodOptional<zod.ZodString>;
                                expiresAt: zod.ZodOptional<zod.ZodNumber>;
                            }, zod_v4_core.$strip>>;
                            scopes: zod.ZodOptional<zod.ZodArray<zod.ZodString>>;
                            requestSignUp: zod.ZodOptional<zod.ZodBoolean>;
                            loginHint: zod.ZodOptional<zod.ZodString>;
                        }, zod_v4_core.$strip>;
                        metadata: {
                            openapi: {
                                description: string;
                                operationId: string;
                                responses: {
                                    "200": {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "object";
                                                    description: string;
                                                    properties: {
                                                        redirect: {
                                                            type: string;
                                                            enum: boolean[];
                                                        };
                                                        token: {
                                                            type: string;
                                                            description: string;
                                                            url: {
                                                                type: string;
                                                                nullable: boolean;
                                                            };
                                                            user: {
                                                                type: string;
                                                                properties: {
                                                                    id: {
                                                                        type: string;
                                                                    };
                                                                    email: {
                                                                        type: string;
                                                                    };
                                                                    name: {
                                                                        type: string;
                                                                        nullable: boolean;
                                                                    };
                                                                    image: {
                                                                        type: string;
                                                                        nullable: boolean;
                                                                    };
                                                                    emailVerified: {
                                                                        type: string;
                                                                    };
                                                                    createdAt: {
                                                                        type: string;
                                                                        format: string;
                                                                    };
                                                                    updatedAt: {
                                                                        type: string;
                                                                        format: string;
                                                                    };
                                                                };
                                                                required: string[];
                                                            };
                                                        };
                                                    };
                                                    required: string[];
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    } & {
                        use: any[];
                    };
                    path: "/sign-in/social";
                };
                callbackOAuth: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                        body?: {
                            code?: string | undefined;
                            error?: string | undefined;
                            device_id?: string | undefined;
                            error_description?: string | undefined;
                            state?: string | undefined;
                            user?: string | undefined;
                        } | undefined;
                    } & {
                        method: "GET" | "POST";
                    } & {
                        query?: {
                            code?: string | undefined;
                            error?: string | undefined;
                            device_id?: string | undefined;
                            error_description?: string | undefined;
                            state?: string | undefined;
                            user?: string | undefined;
                        } | undefined;
                    } & {
                        params: {
                            id: string;
                        };
                    } & {
                        request?: Request;
                    } & {
                        headers?: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: void;
                    } : void>;
                    options: {
                        method: ("GET" | "POST")[];
                        body: zod.ZodOptional<zod.ZodObject<{
                            code: zod.ZodOptional<zod.ZodString>;
                            error: zod.ZodOptional<zod.ZodString>;
                            device_id: zod.ZodOptional<zod.ZodString>;
                            error_description: zod.ZodOptional<zod.ZodString>;
                            state: zod.ZodOptional<zod.ZodString>;
                            user: zod.ZodOptional<zod.ZodString>;
                        }, zod_v4_core.$strip>>;
                        query: zod.ZodOptional<zod.ZodObject<{
                            code: zod.ZodOptional<zod.ZodString>;
                            error: zod.ZodOptional<zod.ZodString>;
                            device_id: zod.ZodOptional<zod.ZodString>;
                            error_description: zod.ZodOptional<zod.ZodString>;
                            state: zod.ZodOptional<zod.ZodString>;
                            user: zod.ZodOptional<zod.ZodString>;
                        }, zod_v4_core.$strip>>;
                        metadata: {
                            isAction: false;
                        };
                    } & {
                        use: any[];
                    };
                    path: "/callback/:id";
                };
                getSession: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                        body?: undefined;
                    } & {
                        method?: "GET" | undefined;
                    } & {
                        query?: {
                            disableCookieCache?: unknown;
                            disableRefresh?: unknown;
                        } | undefined;
                    } & {
                        params?: Record<string, any>;
                    } & {
                        request?: Request;
                    } & {
                        headers: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: {
                            session: {
                                id: string;
                                userId: string;
                                expiresAt: Date;
                                createdAt: Date;
                                updatedAt: Date;
                                token: string;
                                ipAddress?: string | null | undefined;
                                userAgent?: string | null | undefined;
                            };
                            user: {
                                id: string;
                                email: string;
                                emailVerified: boolean;
                                name: string;
                                createdAt: Date;
                                updatedAt: Date;
                                image?: string | null | undefined;
                            };
                        } | null;
                    } : {
                        session: {
                            id: string;
                            userId: string;
                            expiresAt: Date;
                            createdAt: Date;
                            updatedAt: Date;
                            token: string;
                            ipAddress?: string | null | undefined;
                            userAgent?: string | null | undefined;
                        };
                        user: {
                            id: string;
                            email: string;
                            emailVerified: boolean;
                            name: string;
                            createdAt: Date;
                            updatedAt: Date;
                            image?: string | null | undefined;
                        };
                    } | null>;
                    options: {
                        method: "GET";
                        query: zod.ZodOptional<zod.ZodObject<{
                            disableCookieCache: zod.ZodOptional<zod.ZodCoercedBoolean<unknown>>;
                            disableRefresh: zod.ZodOptional<zod.ZodCoercedBoolean<unknown>>;
                        }, zod_v4_core.$strip>>;
                        requireHeaders: true;
                        metadata: {
                            openapi: {
                                description: string;
                                responses: {
                                    "200": {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "object";
                                                    properties: {
                                                        session: {
                                                            $ref: string;
                                                        };
                                                        user: {
                                                            $ref: string;
                                                        };
                                                    };
                                                    required: string[];
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    } & {
                        use: any[];
                    };
                    path: "/get-session";
                };
                signOut: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                        body?: undefined;
                    } & {
                        method?: "POST" | undefined;
                    } & {
                        query?: Record<string, any> | undefined;
                    } & {
                        params?: Record<string, any>;
                    } & {
                        request?: Request;
                    } & {
                        headers: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: {
                            success: boolean;
                        };
                    } : {
                        success: boolean;
                    }>;
                    options: {
                        method: "POST";
                        requireHeaders: true;
                        metadata: {
                            openapi: {
                                description: string;
                                responses: {
                                    "200": {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "object";
                                                    properties: {
                                                        success: {
                                                            type: string;
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    } & {
                        use: any[];
                    };
                    path: "/sign-out";
                };
                signUpEmail: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                        body: {
                            name: string;
                            email: string;
                            password: string;
                            image?: string;
                            callbackURL?: string;
                            rememberMe?: boolean;
                        };
                    } & {
                        method?: "POST" | undefined;
                    } & {
                        query?: Record<string, any> | undefined;
                    } & {
                        params?: Record<string, any>;
                    } & {
                        request?: Request;
                    } & {
                        headers?: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: {
                            token: null;
                            user: {
                                id: string;
                                email: string;
                                name: string;
                                image: string | null | undefined;
                                emailVerified: boolean;
                                createdAt: Date;
                                updatedAt: Date;
                            };
                        } | {
                            token: string;
                            user: {
                                id: string;
                                email: string;
                                name: string;
                                image: string | null | undefined;
                                emailVerified: boolean;
                                createdAt: Date;
                                updatedAt: Date;
                            };
                        };
                    } : {
                        token: null;
                        user: {
                            id: string;
                            email: string;
                            name: string;
                            image: string | null | undefined;
                            emailVerified: boolean;
                            createdAt: Date;
                            updatedAt: Date;
                        };
                    } | {
                        token: string;
                        user: {
                            id: string;
                            email: string;
                            name: string;
                            image: string | null | undefined;
                            emailVerified: boolean;
                            createdAt: Date;
                            updatedAt: Date;
                        };
                    }>;
                    options: {
                        method: "POST";
                        body: zod.ZodRecord<zod.ZodString, zod.ZodAny>;
                        metadata: {
                            $Infer: {
                                body: {
                                    name: string;
                                    email: string;
                                    password: string;
                                    image?: string;
                                    callbackURL?: string;
                                    rememberMe?: boolean;
                                };
                            };
                            openapi: {
                                description: string;
                                requestBody: {
                                    content: {
                                        "application/json": {
                                            schema: {
                                                type: "object";
                                                properties: {
                                                    name: {
                                                        type: string;
                                                        description: string;
                                                    };
                                                    email: {
                                                        type: string;
                                                        description: string;
                                                    };
                                                    password: {
                                                        type: string;
                                                        description: string;
                                                    };
                                                    image: {
                                                        type: string;
                                                        description: string;
                                                    };
                                                    callbackURL: {
                                                        type: string;
                                                        description: string;
                                                    };
                                                    rememberMe: {
                                                        type: string;
                                                        description: string;
                                                    };
                                                };
                                                required: string[];
                                            };
                                        };
                                    };
                                };
                                responses: {
                                    "200": {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "object";
                                                    properties: {
                                                        token: {
                                                            type: string;
                                                            nullable: boolean;
                                                            description: string;
                                                        };
                                                        user: {
                                                            type: string;
                                                            properties: {
                                                                id: {
                                                                    type: string;
                                                                    description: string;
                                                                };
                                                                email: {
                                                                    type: string;
                                                                    format: string;
                                                                    description: string;
                                                                };
                                                                name: {
                                                                    type: string;
                                                                    description: string;
                                                                };
                                                                image: {
                                                                    type: string;
                                                                    format: string;
                                                                    nullable: boolean;
                                                                    description: string;
                                                                };
                                                                emailVerified: {
                                                                    type: string;
                                                                    description: string;
                                                                };
                                                                createdAt: {
                                                                    type: string;
                                                                    format: string;
                                                                    description: string;
                                                                };
                                                                updatedAt: {
                                                                    type: string;
                                                                    format: string;
                                                                    description: string;
                                                                };
                                                            };
                                                            required: string[];
                                                        };
                                                    };
                                                    required: string[];
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    } & {
                        use: any[];
                    };
                    path: "/sign-up/email";
                };
                signInEmail: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                        body: {
                            email: string;
                            password: string;
                            callbackURL?: string | undefined;
                            rememberMe?: boolean | undefined;
                        };
                    } & {
                        method?: "POST" | undefined;
                    } & {
                        query?: Record<string, any> | undefined;
                    } & {
                        params?: Record<string, any>;
                    } & {
                        request?: Request;
                    } & {
                        headers?: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: {
                            redirect: boolean;
                            token: string;
                            url: string | undefined;
                            user: {
                                id: string;
                                email: string;
                                name: string;
                                image: string | null | undefined;
                                emailVerified: boolean;
                                createdAt: Date;
                                updatedAt: Date;
                            };
                        };
                    } : {
                        redirect: boolean;
                        token: string;
                        url: string | undefined;
                        user: {
                            id: string;
                            email: string;
                            name: string;
                            image: string | null | undefined;
                            emailVerified: boolean;
                            createdAt: Date;
                            updatedAt: Date;
                        };
                    }>;
                    options: {
                        method: "POST";
                        body: zod.ZodObject<{
                            email: zod.ZodString;
                            password: zod.ZodString;
                            callbackURL: zod.ZodOptional<zod.ZodString>;
                            rememberMe: zod.ZodOptional<zod.ZodDefault<zod.ZodBoolean>>;
                        }, zod_v4_core.$strip>;
                        metadata: {
                            openapi: {
                                description: string;
                                responses: {
                                    "200": {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "object";
                                                    description: string;
                                                    properties: {
                                                        redirect: {
                                                            type: string;
                                                            enum: boolean[];
                                                        };
                                                        token: {
                                                            type: string;
                                                            description: string;
                                                        };
                                                        url: {
                                                            type: string;
                                                            nullable: boolean;
                                                        };
                                                        user: {
                                                            type: string;
                                                            properties: {
                                                                id: {
                                                                    type: string;
                                                                };
                                                                email: {
                                                                    type: string;
                                                                };
                                                                name: {
                                                                    type: string;
                                                                    nullable: boolean;
                                                                };
                                                                image: {
                                                                    type: string;
                                                                    nullable: boolean;
                                                                };
                                                                emailVerified: {
                                                                    type: string;
                                                                };
                                                                createdAt: {
                                                                    type: string;
                                                                    format: string;
                                                                };
                                                                updatedAt: {
                                                                    type: string;
                                                                    format: string;
                                                                };
                                                            };
                                                            required: string[];
                                                        };
                                                    };
                                                    required: string[];
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    } & {
                        use: any[];
                    };
                    path: "/sign-in/email";
                };
                forgetPassword: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                        body: {
                            email: string;
                            redirectTo?: string | undefined;
                        };
                    } & {
                        method?: "POST" | undefined;
                    } & {
                        query?: Record<string, any> | undefined;
                    } & {
                        params?: Record<string, any>;
                    } & {
                        request?: Request;
                    } & {
                        headers?: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: {
                            status: boolean;
                        };
                    } : {
                        status: boolean;
                    }>;
                    options: {
                        method: "POST";
                        body: zod.ZodObject<{
                            email: zod.ZodString;
                            redirectTo: zod.ZodOptional<zod.ZodString>;
                        }, zod_v4_core.$strip>;
                        metadata: {
                            openapi: {
                                description: string;
                                responses: {
                                    "200": {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "object";
                                                    properties: {
                                                        status: {
                                                            type: string;
                                                        };
                                                        message: {
                                                            type: string;
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    } & {
                        use: any[];
                    };
                    path: "/forget-password";
                };
                resetPassword: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                        body: {
                            newPassword: string;
                            token?: string | undefined;
                        };
                    } & {
                        method?: "POST" | undefined;
                    } & {
                        query?: {
                            token?: string | undefined;
                        } | undefined;
                    } & {
                        params?: Record<string, any>;
                    } & {
                        request?: Request;
                    } & {
                        headers?: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: {
                            status: boolean;
                        };
                    } : {
                        status: boolean;
                    }>;
                    options: {
                        method: "POST";
                        query: zod.ZodOptional<zod.ZodObject<{
                            token: zod.ZodOptional<zod.ZodString>;
                        }, zod_v4_core.$strip>>;
                        body: zod.ZodObject<{
                            newPassword: zod.ZodString;
                            token: zod.ZodOptional<zod.ZodString>;
                        }, zod_v4_core.$strip>;
                        metadata: {
                            openapi: {
                                description: string;
                                responses: {
                                    "200": {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "object";
                                                    properties: {
                                                        status: {
                                                            type: string;
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    } & {
                        use: any[];
                    };
                    path: "/reset-password";
                };
                verifyEmail: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                        body?: undefined;
                    } & {
                        method?: "GET" | undefined;
                    } & {
                        query: {
                            token: string;
                            callbackURL?: string | undefined;
                        };
                    } & {
                        params?: Record<string, any>;
                    } & {
                        request?: Request;
                    } & {
                        headers?: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: void | {
                            status: boolean;
                            user: {
                                id: any;
                                email: any;
                                name: any;
                                image: any;
                                emailVerified: any;
                                createdAt: any;
                                updatedAt: any;
                            };
                        } | {
                            status: boolean;
                            user: null;
                        };
                    } : void | {
                        status: boolean;
                        user: {
                            id: any;
                            email: any;
                            name: any;
                            image: any;
                            emailVerified: any;
                            createdAt: any;
                            updatedAt: any;
                        };
                    } | {
                        status: boolean;
                        user: null;
                    }>;
                    options: {
                        method: "GET";
                        query: zod.ZodObject<{
                            token: zod.ZodString;
                            callbackURL: zod.ZodOptional<zod.ZodString>;
                        }, zod_v4_core.$strip>;
                        use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<void>)[];
                        metadata: {
                            openapi: {
                                description: string;
                                parameters: ({
                                    name: string;
                                    in: "query";
                                    description: string;
                                    required: true;
                                    schema: {
                                        type: "string";
                                    };
                                } | {
                                    name: string;
                                    in: "query";
                                    description: string;
                                    required: false;
                                    schema: {
                                        type: "string";
                                    };
                                })[];
                                responses: {
                                    "200": {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "object";
                                                    properties: {
                                                        user: {
                                                            type: string;
                                                            properties: {
                                                                id: {
                                                                    type: string;
                                                                    description: string;
                                                                };
                                                                email: {
                                                                    type: string;
                                                                    description: string;
                                                                };
                                                                name: {
                                                                    type: string;
                                                                    description: string;
                                                                };
                                                                image: {
                                                                    type: string;
                                                                    description: string;
                                                                };
                                                                emailVerified: {
                                                                    type: string;
                                                                    description: string;
                                                                };
                                                                createdAt: {
                                                                    type: string;
                                                                    description: string;
                                                                };
                                                                updatedAt: {
                                                                    type: string;
                                                                    description: string;
                                                                };
                                                            };
                                                            required: string[];
                                                        };
                                                        status: {
                                                            type: string;
                                                            description: string;
                                                        };
                                                    };
                                                    required: string[];
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    } & {
                        use: any[];
                    };
                    path: "/verify-email";
                };
                sendVerificationEmail: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                        body: {
                            email: string;
                            callbackURL?: string | undefined;
                        };
                    } & {
                        method?: "POST" | undefined;
                    } & {
                        query?: Record<string, any> | undefined;
                    } & {
                        params?: Record<string, any>;
                    } & {
                        request?: Request;
                    } & {
                        headers?: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: {
                            status: boolean;
                        };
                    } : {
                        status: boolean;
                    }>;
                    options: {
                        method: "POST";
                        body: zod.ZodObject<{
                            email: zod.ZodEmail;
                            callbackURL: zod.ZodOptional<zod.ZodString>;
                        }, zod_v4_core.$strip>;
                        metadata: {
                            openapi: {
                                description: string;
                                requestBody: {
                                    content: {
                                        "application/json": {
                                            schema: {
                                                type: "object";
                                                properties: {
                                                    email: {
                                                        type: string;
                                                        description: string;
                                                        example: string;
                                                    };
                                                    callbackURL: {
                                                        type: string;
                                                        description: string;
                                                        example: string;
                                                        nullable: boolean;
                                                    };
                                                };
                                                required: string[];
                                            };
                                        };
                                    };
                                };
                                responses: {
                                    "200": {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "object";
                                                    properties: {
                                                        status: {
                                                            type: string;
                                                            description: string;
                                                            example: boolean;
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                    "400": {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "object";
                                                    properties: {
                                                        message: {
                                                            type: string;
                                                            description: string;
                                                            example: string;
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    } & {
                        use: any[];
                    };
                    path: "/send-verification-email";
                };
                changeEmail: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                        body: {
                            newEmail: string;
                            callbackURL?: string | undefined;
                        };
                    } & {
                        method?: "POST" | undefined;
                    } & {
                        query?: Record<string, any> | undefined;
                    } & {
                        params?: Record<string, any>;
                    } & {
                        request?: Request;
                    } & {
                        headers?: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: {
                            status: boolean;
                        };
                    } : {
                        status: boolean;
                    }>;
                    options: {
                        method: "POST";
                        body: zod.ZodObject<{
                            newEmail: zod.ZodEmail;
                            callbackURL: zod.ZodOptional<zod.ZodString>;
                        }, zod_v4_core.$strip>;
                        use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<{
                            session: {
                                session: Record<string, any> & {
                                    id: string;
                                    userId: string;
                                    expiresAt: Date;
                                    createdAt: Date;
                                    updatedAt: Date;
                                    token: string;
                                    ipAddress?: string | null | undefined;
                                    userAgent?: string | null | undefined;
                                };
                                user: Record<string, any> & {
                                    id: string;
                                    email: string;
                                    emailVerified: boolean;
                                    name: string;
                                    createdAt: Date;
                                    updatedAt: Date;
                                    image?: string | null | undefined;
                                };
                            };
                        }>)[];
                        metadata: {
                            openapi: {
                                responses: {
                                    "200": {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "object";
                                                    properties: {
                                                        status: {
                                                            type: string;
                                                            description: string;
                                                        };
                                                        message: {
                                                            type: string;
                                                            enum: string[];
                                                            description: string;
                                                            nullable: boolean;
                                                        };
                                                    };
                                                    required: string[];
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    } & {
                        use: any[];
                    };
                    path: "/change-email";
                };
                changePassword: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                        body: {
                            newPassword: string;
                            currentPassword: string;
                            revokeOtherSessions?: boolean | undefined;
                        };
                    } & {
                        method?: "POST" | undefined;
                    } & {
                        query?: Record<string, any> | undefined;
                    } & {
                        params?: Record<string, any>;
                    } & {
                        request?: Request;
                    } & {
                        headers?: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: {
                            token: string | null;
                            user: {
                                id: string;
                                email: string;
                                name: string;
                                image: string | null | undefined;
                                emailVerified: boolean;
                                createdAt: Date;
                                updatedAt: Date;
                            };
                        };
                    } : {
                        token: string | null;
                        user: {
                            id: string;
                            email: string;
                            name: string;
                            image: string | null | undefined;
                            emailVerified: boolean;
                            createdAt: Date;
                            updatedAt: Date;
                        };
                    }>;
                    options: {
                        method: "POST";
                        body: zod.ZodObject<{
                            newPassword: zod.ZodString;
                            currentPassword: zod.ZodString;
                            revokeOtherSessions: zod.ZodOptional<zod.ZodBoolean>;
                        }, zod_v4_core.$strip>;
                        use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<{
                            session: {
                                session: Record<string, any> & {
                                    id: string;
                                    userId: string;
                                    expiresAt: Date;
                                    createdAt: Date;
                                    updatedAt: Date;
                                    token: string;
                                    ipAddress?: string | null | undefined;
                                    userAgent?: string | null | undefined;
                                };
                                user: Record<string, any> & {
                                    id: string;
                                    email: string;
                                    emailVerified: boolean;
                                    name: string;
                                    createdAt: Date;
                                    updatedAt: Date;
                                    image?: string | null | undefined;
                                };
                            };
                        }>)[];
                        metadata: {
                            openapi: {
                                description: string;
                                responses: {
                                    "200": {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "object";
                                                    properties: {
                                                        token: {
                                                            type: string;
                                                            nullable: boolean;
                                                            description: string;
                                                        };
                                                        user: {
                                                            type: string;
                                                            properties: {
                                                                id: {
                                                                    type: string;
                                                                    description: string;
                                                                };
                                                                email: {
                                                                    type: string;
                                                                    format: string;
                                                                    description: string;
                                                                };
                                                                name: {
                                                                    type: string;
                                                                    description: string;
                                                                };
                                                                image: {
                                                                    type: string;
                                                                    format: string;
                                                                    nullable: boolean;
                                                                    description: string;
                                                                };
                                                                emailVerified: {
                                                                    type: string;
                                                                    description: string;
                                                                };
                                                                createdAt: {
                                                                    type: string;
                                                                    format: string;
                                                                    description: string;
                                                                };
                                                                updatedAt: {
                                                                    type: string;
                                                                    format: string;
                                                                    description: string;
                                                                };
                                                            };
                                                            required: string[];
                                                        };
                                                    };
                                                    required: string[];
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    } & {
                        use: any[];
                    };
                    path: "/change-password";
                };
                setPassword: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                        body: {
                            newPassword: string;
                        };
                    } & {
                        method?: "POST" | undefined;
                    } & {
                        query?: Record<string, any> | undefined;
                    } & {
                        params?: Record<string, any>;
                    } & {
                        request?: Request;
                    } & {
                        headers?: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: {
                            status: boolean;
                        };
                    } : {
                        status: boolean;
                    }>;
                    options: {
                        method: "POST";
                        body: zod.ZodObject<{
                            newPassword: zod.ZodString;
                        }, zod_v4_core.$strip>;
                        metadata: {
                            SERVER_ONLY: true;
                        };
                        use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<{
                            session: {
                                session: Record<string, any> & {
                                    id: string;
                                    userId: string;
                                    expiresAt: Date;
                                    createdAt: Date;
                                    updatedAt: Date;
                                    token: string;
                                    ipAddress?: string | null | undefined;
                                    userAgent?: string | null | undefined;
                                };
                                user: Record<string, any> & {
                                    id: string;
                                    email: string;
                                    emailVerified: boolean;
                                    name: string;
                                    createdAt: Date;
                                    updatedAt: Date;
                                    image?: string | null | undefined;
                                };
                            };
                        }>)[];
                    } & {
                        use: any[];
                    };
                    path: "/set-password";
                };
                updateUser: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                        body: Partial<{}> & {
                            name?: string;
                            image?: string;
                        };
                    } & {
                        method?: "POST" | undefined;
                    } & {
                        query?: Record<string, any> | undefined;
                    } & {
                        params?: Record<string, any>;
                    } & {
                        request?: Request;
                    } & {
                        headers?: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: {
                            status: boolean;
                        };
                    } : {
                        status: boolean;
                    }>;
                    options: {
                        method: "POST";
                        body: zod.ZodRecord<zod.ZodString, zod.ZodAny>;
                        use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<{
                            session: {
                                session: Record<string, any> & {
                                    id: string;
                                    userId: string;
                                    expiresAt: Date;
                                    createdAt: Date;
                                    updatedAt: Date;
                                    token: string;
                                    ipAddress?: string | null | undefined;
                                    userAgent?: string | null | undefined;
                                };
                                user: Record<string, any> & {
                                    id: string;
                                    email: string;
                                    emailVerified: boolean;
                                    name: string;
                                    createdAt: Date;
                                    updatedAt: Date;
                                    image?: string | null | undefined;
                                };
                            };
                        }>)[];
                        metadata: {
                            $Infer: {
                                body: Partial<{}> & {
                                    name?: string;
                                    image?: string;
                                };
                            };
                            openapi: {
                                description: string;
                                requestBody: {
                                    content: {
                                        "application/json": {
                                            schema: {
                                                type: "object";
                                                properties: {
                                                    name: {
                                                        type: string;
                                                        description: string;
                                                    };
                                                    image: {
                                                        type: string;
                                                        description: string;
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                                responses: {
                                    "200": {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "object";
                                                    properties: {
                                                        status: {
                                                            type: string;
                                                            description: string;
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    } & {
                        use: any[];
                    };
                    path: "/update-user";
                };
                deleteUser: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                        body: {
                            callbackURL?: string | undefined;
                            password?: string | undefined;
                            token?: string | undefined;
                        };
                    } & {
                        method?: "POST" | undefined;
                    } & {
                        query?: Record<string, any> | undefined;
                    } & {
                        params?: Record<string, any>;
                    } & {
                        request?: Request;
                    } & {
                        headers?: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: {
                            success: boolean;
                            message: string;
                        };
                    } : {
                        success: boolean;
                        message: string;
                    }>;
                    options: {
                        method: "POST";
                        use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<{
                            session: {
                                session: Record<string, any> & {
                                    id: string;
                                    userId: string;
                                    expiresAt: Date;
                                    createdAt: Date;
                                    updatedAt: Date;
                                    token: string;
                                    ipAddress?: string | null | undefined;
                                    userAgent?: string | null | undefined;
                                };
                                user: Record<string, any> & {
                                    id: string;
                                    email: string;
                                    emailVerified: boolean;
                                    name: string;
                                    createdAt: Date;
                                    updatedAt: Date;
                                    image?: string | null | undefined;
                                };
                            };
                        }>)[];
                        body: zod.ZodObject<{
                            callbackURL: zod.ZodOptional<zod.ZodString>;
                            password: zod.ZodOptional<zod.ZodString>;
                            token: zod.ZodOptional<zod.ZodString>;
                        }, zod_v4_core.$strip>;
                        metadata: {
                            openapi: {
                                description: string;
                                responses: {
                                    "200": {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "object";
                                                    properties: {
                                                        success: {
                                                            type: string;
                                                            description: string;
                                                        };
                                                        message: {
                                                            type: string;
                                                            enum: string[];
                                                            description: string;
                                                        };
                                                    };
                                                    required: string[];
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    } & {
                        use: any[];
                    };
                    path: "/delete-user";
                };
                forgetPasswordCallback: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                        body?: undefined;
                    } & {
                        method?: "GET" | undefined;
                    } & {
                        query: {
                            callbackURL: string;
                        };
                    } & {
                        params: {
                            token: string;
                        };
                    } & {
                        request?: Request;
                    } & {
                        headers?: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: never;
                    } : never>;
                    options: {
                        method: "GET";
                        query: zod.ZodObject<{
                            callbackURL: zod.ZodString;
                        }, zod_v4_core.$strip>;
                        use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<void>)[];
                        metadata: {
                            openapi: {
                                description: string;
                                responses: {
                                    "200": {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "object";
                                                    properties: {
                                                        token: {
                                                            type: string;
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    } & {
                        use: any[];
                    };
                    path: "/reset-password/:token";
                };
                requestPasswordReset: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                        body: {
                            email: string;
                            redirectTo?: string | undefined;
                        };
                    } & {
                        method?: "POST" | undefined;
                    } & {
                        query?: Record<string, any> | undefined;
                    } & {
                        params?: Record<string, any>;
                    } & {
                        request?: Request;
                    } & {
                        headers?: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: {
                            status: boolean;
                        };
                    } : {
                        status: boolean;
                    }>;
                    options: {
                        method: "POST";
                        body: zod.ZodObject<{
                            email: zod.ZodEmail;
                            redirectTo: zod.ZodOptional<zod.ZodString>;
                        }, zod_v4_core.$strip>;
                        metadata: {
                            openapi: {
                                description: string;
                                responses: {
                                    "200": {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "object";
                                                    properties: {
                                                        status: {
                                                            type: string;
                                                        };
                                                        message: {
                                                            type: string;
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    } & {
                        use: any[];
                    };
                    path: "/request-password-reset";
                };
                requestPasswordResetCallback: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                        body?: undefined;
                    } & {
                        method?: "GET" | undefined;
                    } & {
                        query: {
                            callbackURL: string;
                        };
                    } & {
                        params: {
                            token: string;
                        };
                    } & {
                        request?: Request;
                    } & {
                        headers?: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: never;
                    } : never>;
                    options: {
                        method: "GET";
                        query: zod.ZodObject<{
                            callbackURL: zod.ZodString;
                        }, zod_v4_core.$strip>;
                        use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<void>)[];
                        metadata: {
                            openapi: {
                                description: string;
                                responses: {
                                    "200": {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "object";
                                                    properties: {
                                                        token: {
                                                            type: string;
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    } & {
                        use: any[];
                    };
                    path: "/reset-password/:token";
                };
                listSessions: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                        body?: undefined;
                    } & {
                        method?: "GET" | undefined;
                    } & {
                        query?: Record<string, any> | undefined;
                    } & {
                        params?: Record<string, any>;
                    } & {
                        request?: Request;
                    } & {
                        headers: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: Prettify<{
                            id: string;
                            userId: string;
                            expiresAt: Date;
                            createdAt: Date;
                            updatedAt: Date;
                            token: string;
                            ipAddress?: string | null | undefined;
                            userAgent?: string | null | undefined;
                        }>[];
                    } : Prettify<{
                        id: string;
                        userId: string;
                        expiresAt: Date;
                        createdAt: Date;
                        updatedAt: Date;
                        token: string;
                        ipAddress?: string | null | undefined;
                        userAgent?: string | null | undefined;
                    }>[]>;
                    options: {
                        method: "GET";
                        use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<{
                            session: {
                                session: Record<string, any> & {
                                    id: string;
                                    userId: string;
                                    expiresAt: Date;
                                    createdAt: Date;
                                    updatedAt: Date;
                                    token: string;
                                    ipAddress?: string | null | undefined;
                                    userAgent?: string | null | undefined;
                                };
                                user: Record<string, any> & {
                                    id: string;
                                    email: string;
                                    emailVerified: boolean;
                                    name: string;
                                    createdAt: Date;
                                    updatedAt: Date;
                                    image?: string | null | undefined;
                                };
                            };
                        }>)[];
                        requireHeaders: true;
                        metadata: {
                            openapi: {
                                description: string;
                                responses: {
                                    "200": {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "array";
                                                    items: {
                                                        $ref: string;
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    } & {
                        use: any[];
                    };
                    path: "/list-sessions";
                };
                revokeSession: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                        body: {
                            token: string;
                        };
                    } & {
                        method?: "POST" | undefined;
                    } & {
                        query?: Record<string, any> | undefined;
                    } & {
                        params?: Record<string, any>;
                    } & {
                        request?: Request;
                    } & {
                        headers: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: {
                            status: boolean;
                        };
                    } : {
                        status: boolean;
                    }>;
                    options: {
                        method: "POST";
                        body: zod.ZodObject<{
                            token: zod.ZodString;
                        }, zod_v4_core.$strip>;
                        use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<{
                            session: {
                                session: Record<string, any> & {
                                    id: string;
                                    userId: string;
                                    expiresAt: Date;
                                    createdAt: Date;
                                    updatedAt: Date;
                                    token: string;
                                    ipAddress?: string | null | undefined;
                                    userAgent?: string | null | undefined;
                                };
                                user: Record<string, any> & {
                                    id: string;
                                    email: string;
                                    emailVerified: boolean;
                                    name: string;
                                    createdAt: Date;
                                    updatedAt: Date;
                                    image?: string | null | undefined;
                                };
                            };
                        }>)[];
                        requireHeaders: true;
                        metadata: {
                            openapi: {
                                description: string;
                                requestBody: {
                                    content: {
                                        "application/json": {
                                            schema: {
                                                type: "object";
                                                properties: {
                                                    token: {
                                                        type: string;
                                                        description: string;
                                                    };
                                                };
                                                required: string[];
                                            };
                                        };
                                    };
                                };
                                responses: {
                                    "200": {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "object";
                                                    properties: {
                                                        status: {
                                                            type: string;
                                                            description: string;
                                                        };
                                                    };
                                                    required: string[];
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    } & {
                        use: any[];
                    };
                    path: "/revoke-session";
                };
                revokeSessions: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                        body?: undefined;
                    } & {
                        method?: "POST" | undefined;
                    } & {
                        query?: Record<string, any> | undefined;
                    } & {
                        params?: Record<string, any>;
                    } & {
                        request?: Request;
                    } & {
                        headers: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: {
                            status: boolean;
                        };
                    } : {
                        status: boolean;
                    }>;
                    options: {
                        method: "POST";
                        use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<{
                            session: {
                                session: Record<string, any> & {
                                    id: string;
                                    userId: string;
                                    expiresAt: Date;
                                    createdAt: Date;
                                    updatedAt: Date;
                                    token: string;
                                    ipAddress?: string | null | undefined;
                                    userAgent?: string | null | undefined;
                                };
                                user: Record<string, any> & {
                                    id: string;
                                    email: string;
                                    emailVerified: boolean;
                                    name: string;
                                    createdAt: Date;
                                    updatedAt: Date;
                                    image?: string | null | undefined;
                                };
                            };
                        }>)[];
                        requireHeaders: true;
                        metadata: {
                            openapi: {
                                description: string;
                                responses: {
                                    "200": {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "object";
                                                    properties: {
                                                        status: {
                                                            type: string;
                                                            description: string;
                                                        };
                                                    };
                                                    required: string[];
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    } & {
                        use: any[];
                    };
                    path: "/revoke-sessions";
                };
                revokeOtherSessions: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                        body?: undefined;
                    } & {
                        method?: "POST" | undefined;
                    } & {
                        query?: Record<string, any> | undefined;
                    } & {
                        params?: Record<string, any>;
                    } & {
                        request?: Request;
                    } & {
                        headers: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: {
                            status: boolean;
                        };
                    } : {
                        status: boolean;
                    }>;
                    options: {
                        method: "POST";
                        requireHeaders: true;
                        use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<{
                            session: {
                                session: Record<string, any> & {
                                    id: string;
                                    userId: string;
                                    expiresAt: Date;
                                    createdAt: Date;
                                    updatedAt: Date;
                                    token: string;
                                    ipAddress?: string | null | undefined;
                                    userAgent?: string | null | undefined;
                                };
                                user: Record<string, any> & {
                                    id: string;
                                    email: string;
                                    emailVerified: boolean;
                                    name: string;
                                    createdAt: Date;
                                    updatedAt: Date;
                                    image?: string | null | undefined;
                                };
                            };
                        }>)[];
                        metadata: {
                            openapi: {
                                description: string;
                                responses: {
                                    "200": {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "object";
                                                    properties: {
                                                        status: {
                                                            type: string;
                                                            description: string;
                                                        };
                                                    };
                                                    required: string[];
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    } & {
                        use: any[];
                    };
                    path: "/revoke-other-sessions";
                };
                linkSocialAccount: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                        body: {
                            provider: unknown;
                            callbackURL?: string | undefined;
                            idToken?: {
                                token: string;
                                nonce?: string | undefined;
                                accessToken?: string | undefined;
                                refreshToken?: string | undefined;
                                scopes?: string[] | undefined;
                            } | undefined;
                            requestSignUp?: boolean | undefined;
                            scopes?: string[] | undefined;
                            errorCallbackURL?: string | undefined;
                            disableRedirect?: boolean | undefined;
                        };
                    } & {
                        method?: "POST" | undefined;
                    } & {
                        query?: Record<string, any> | undefined;
                    } & {
                        params?: Record<string, any>;
                    } & {
                        request?: Request;
                    } & {
                        headers: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: {
                            url: string;
                            redirect: boolean;
                        };
                    } : {
                        url: string;
                        redirect: boolean;
                    }>;
                    options: {
                        method: "POST";
                        requireHeaders: true;
                        body: zod.ZodObject<{
                            callbackURL: zod.ZodOptional<zod.ZodString>;
                            provider: zod.ZodType<"github" | "apple" | "discord" | "facebook" | "microsoft" | "google" | "huggingface" | "slack" | "spotify" | "twitch" | "twitter" | "dropbox" | "kick" | "linear" | "linkedin" | "gitlab" | "tiktok" | "reddit" | "roblox" | "vk" | "zoom" | "notion" | (string & {}), unknown, zod_v4_core.$ZodTypeInternals<"github" | "apple" | "discord" | "facebook" | "microsoft" | "google" | "huggingface" | "slack" | "spotify" | "twitch" | "twitter" | "dropbox" | "kick" | "linear" | "linkedin" | "gitlab" | "tiktok" | "reddit" | "roblox" | "vk" | "zoom" | "notion" | (string & {}), unknown>>;
                            idToken: zod.ZodOptional<zod.ZodObject<{
                                token: zod.ZodString;
                                nonce: zod.ZodOptional<zod.ZodString>;
                                accessToken: zod.ZodOptional<zod.ZodString>;
                                refreshToken: zod.ZodOptional<zod.ZodString>;
                                scopes: zod.ZodOptional<zod.ZodArray<zod.ZodString>>;
                            }, zod_v4_core.$strip>>;
                            requestSignUp: zod.ZodOptional<zod.ZodBoolean>;
                            scopes: zod.ZodOptional<zod.ZodArray<zod.ZodString>>;
                            errorCallbackURL: zod.ZodOptional<zod.ZodString>;
                            disableRedirect: zod.ZodOptional<zod.ZodBoolean>;
                        }, zod_v4_core.$strip>;
                        use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<{
                            session: {
                                session: Record<string, any> & {
                                    id: string;
                                    userId: string;
                                    expiresAt: Date;
                                    createdAt: Date;
                                    updatedAt: Date;
                                    token: string;
                                    ipAddress?: string | null | undefined;
                                    userAgent?: string | null | undefined;
                                };
                                user: Record<string, any> & {
                                    id: string;
                                    email: string;
                                    emailVerified: boolean;
                                    name: string;
                                    createdAt: Date;
                                    updatedAt: Date;
                                    image?: string | null | undefined;
                                };
                            };
                        }>)[];
                        metadata: {
                            openapi: {
                                description: string;
                                responses: {
                                    "200": {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "object";
                                                    properties: {
                                                        url: {
                                                            type: string;
                                                            description: string;
                                                        };
                                                        redirect: {
                                                            type: string;
                                                            description: string;
                                                        };
                                                        status: {
                                                            type: string;
                                                        };
                                                    };
                                                    required: string[];
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    } & {
                        use: any[];
                    };
                    path: "/link-social";
                };
                listUserAccounts: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0?: ({
                        body?: undefined;
                    } & {
                        method?: "GET" | undefined;
                    } & {
                        query?: Record<string, any> | undefined;
                    } & {
                        params?: Record<string, any>;
                    } & {
                        request?: Request;
                    } & {
                        headers?: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }) | undefined): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: {
                            id: string;
                            provider: string;
                            createdAt: Date;
                            updatedAt: Date;
                            accountId: string;
                            scopes: string[];
                        }[];
                    } : {
                        id: string;
                        provider: string;
                        createdAt: Date;
                        updatedAt: Date;
                        accountId: string;
                        scopes: string[];
                    }[]>;
                    options: {
                        method: "GET";
                        use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<{
                            session: {
                                session: Record<string, any> & {
                                    id: string;
                                    userId: string;
                                    expiresAt: Date;
                                    createdAt: Date;
                                    updatedAt: Date;
                                    token: string;
                                    ipAddress?: string | null | undefined;
                                    userAgent?: string | null | undefined;
                                };
                                user: Record<string, any> & {
                                    id: string;
                                    email: string;
                                    emailVerified: boolean;
                                    name: string;
                                    createdAt: Date;
                                    updatedAt: Date;
                                    image?: string | null | undefined;
                                };
                            };
                        }>)[];
                        metadata: {
                            openapi: {
                                description: string;
                                responses: {
                                    "200": {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "array";
                                                    items: {
                                                        type: string;
                                                        properties: {
                                                            id: {
                                                                type: string;
                                                            };
                                                            provider: {
                                                                type: string;
                                                            };
                                                            createdAt: {
                                                                type: string;
                                                                format: string;
                                                            };
                                                            updatedAt: {
                                                                type: string;
                                                                format: string;
                                                            };
                                                        };
                                                        accountId: {
                                                            type: string;
                                                        };
                                                        scopes: {
                                                            type: string;
                                                            items: {
                                                                type: string;
                                                            };
                                                        };
                                                    };
                                                    required: string[];
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    } & {
                        use: any[];
                    };
                    path: "/list-accounts";
                };
                deleteUserCallback: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                        body?: undefined;
                    } & {
                        method?: "GET" | undefined;
                    } & {
                        query: {
                            token: string;
                            callbackURL?: string | undefined;
                        };
                    } & {
                        params?: Record<string, any>;
                    } & {
                        request?: Request;
                    } & {
                        headers?: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: {
                            success: boolean;
                            message: string;
                        };
                    } : {
                        success: boolean;
                        message: string;
                    }>;
                    options: {
                        method: "GET";
                        query: zod.ZodObject<{
                            token: zod.ZodString;
                            callbackURL: zod.ZodOptional<zod.ZodString>;
                        }, zod_v4_core.$strip>;
                        use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<void>)[];
                        metadata: {
                            openapi: {
                                description: string;
                                responses: {
                                    "200": {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "object";
                                                    properties: {
                                                        success: {
                                                            type: string;
                                                            description: string;
                                                        };
                                                        message: {
                                                            type: string;
                                                            enum: string[];
                                                            description: string;
                                                        };
                                                    };
                                                    required: string[];
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    } & {
                        use: any[];
                    };
                    path: "/delete-user/callback";
                };
                unlinkAccount: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                        body: {
                            providerId: string;
                            accountId?: string | undefined;
                        };
                    } & {
                        method?: "POST" | undefined;
                    } & {
                        query?: Record<string, any> | undefined;
                    } & {
                        params?: Record<string, any>;
                    } & {
                        request?: Request;
                    } & {
                        headers?: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: {
                            status: boolean;
                        };
                    } : {
                        status: boolean;
                    }>;
                    options: {
                        method: "POST";
                        body: zod.ZodObject<{
                            providerId: zod.ZodString;
                            accountId: zod.ZodOptional<zod.ZodString>;
                        }, zod_v4_core.$strip>;
                        use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<{
                            session: {
                                session: Record<string, any> & {
                                    id: string;
                                    userId: string;
                                    expiresAt: Date;
                                    createdAt: Date;
                                    updatedAt: Date;
                                    token: string;
                                    ipAddress?: string | null | undefined;
                                    userAgent?: string | null | undefined;
                                };
                                user: Record<string, any> & {
                                    id: string;
                                    email: string;
                                    emailVerified: boolean;
                                    name: string;
                                    createdAt: Date;
                                    updatedAt: Date;
                                    image?: string | null | undefined;
                                };
                            };
                        }>)[];
                        metadata: {
                            openapi: {
                                description: string;
                                responses: {
                                    "200": {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "object";
                                                    properties: {
                                                        status: {
                                                            type: string;
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    } & {
                        use: any[];
                    };
                    path: "/unlink-account";
                };
                refreshToken: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                        body: {
                            providerId: string;
                            accountId?: string | undefined;
                            userId?: string | undefined;
                        };
                    } & {
                        method?: "POST" | undefined;
                    } & {
                        query?: Record<string, any> | undefined;
                    } & {
                        params?: Record<string, any>;
                    } & {
                        request?: Request;
                    } & {
                        headers?: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: OAuth2Tokens;
                    } : OAuth2Tokens>;
                    options: {
                        method: "POST";
                        body: zod.ZodObject<{
                            providerId: zod.ZodString;
                            accountId: zod.ZodOptional<zod.ZodString>;
                            userId: zod.ZodOptional<zod.ZodString>;
                        }, zod_v4_core.$strip>;
                        metadata: {
                            openapi: {
                                description: string;
                                responses: {
                                    200: {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "object";
                                                    properties: {
                                                        tokenType: {
                                                            type: string;
                                                        };
                                                        idToken: {
                                                            type: string;
                                                        };
                                                        accessToken: {
                                                            type: string;
                                                        };
                                                        refreshToken: {
                                                            type: string;
                                                        };
                                                        accessTokenExpiresAt: {
                                                            type: string;
                                                            format: string;
                                                        };
                                                        refreshTokenExpiresAt: {
                                                            type: string;
                                                            format: string;
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                    400: {
                                        description: string;
                                    };
                                };
                            };
                        };
                    } & {
                        use: any[];
                    };
                    path: "/refresh-token";
                };
                getAccessToken: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                        body: {
                            providerId: string;
                            accountId?: string | undefined;
                            userId?: string | undefined;
                        };
                    } & {
                        method?: "POST" | undefined;
                    } & {
                        query?: Record<string, any> | undefined;
                    } & {
                        params?: Record<string, any>;
                    } & {
                        request?: Request;
                    } & {
                        headers?: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: {
                            accessToken: string;
                            accessTokenExpiresAt: Date | undefined;
                            scopes: string[];
                            idToken: string | undefined;
                        };
                    } : {
                        accessToken: string;
                        accessTokenExpiresAt: Date | undefined;
                        scopes: string[];
                        idToken: string | undefined;
                    }>;
                    options: {
                        method: "POST";
                        body: zod.ZodObject<{
                            providerId: zod.ZodString;
                            accountId: zod.ZodOptional<zod.ZodString>;
                            userId: zod.ZodOptional<zod.ZodString>;
                        }, zod_v4_core.$strip>;
                        metadata: {
                            openapi: {
                                description: string;
                                responses: {
                                    200: {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "object";
                                                    properties: {
                                                        tokenType: {
                                                            type: string;
                                                        };
                                                        idToken: {
                                                            type: string;
                                                        };
                                                        accessToken: {
                                                            type: string;
                                                        };
                                                        refreshToken: {
                                                            type: string;
                                                        };
                                                        accessTokenExpiresAt: {
                                                            type: string;
                                                            format: string;
                                                        };
                                                        refreshTokenExpiresAt: {
                                                            type: string;
                                                            format: string;
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                    400: {
                                        description: string;
                                    };
                                };
                            };
                        };
                    } & {
                        use: any[];
                    };
                    path: "/get-access-token";
                };
                accountInfo: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                        body: {
                            accountId: string;
                        };
                    } & {
                        method?: "POST" | undefined;
                    } & {
                        query?: Record<string, any> | undefined;
                    } & {
                        params?: Record<string, any>;
                    } & {
                        request?: Request;
                    } & {
                        headers?: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: {
                            user: {
                                id: string | number;
                                name?: string;
                                email?: string | null;
                                image?: string;
                                emailVerified: boolean;
                            };
                            data: Record<string, any>;
                        } | null;
                    } : {
                        user: {
                            id: string | number;
                            name?: string;
                            email?: string | null;
                            image?: string;
                            emailVerified: boolean;
                        };
                        data: Record<string, any>;
                    } | null>;
                    options: {
                        method: "POST";
                        use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<{
                            session: {
                                session: Record<string, any> & {
                                    id: string;
                                    userId: string;
                                    expiresAt: Date;
                                    createdAt: Date;
                                    updatedAt: Date;
                                    token: string;
                                    ipAddress?: string | null | undefined;
                                    userAgent?: string | null | undefined;
                                };
                                user: Record<string, any> & {
                                    id: string;
                                    email: string;
                                    emailVerified: boolean;
                                    name: string;
                                    createdAt: Date;
                                    updatedAt: Date;
                                    image?: string | null | undefined;
                                };
                            };
                        }>)[];
                        metadata: {
                            openapi: {
                                description: string;
                                responses: {
                                    "200": {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "object";
                                                    properties: {
                                                        user: {
                                                            type: string;
                                                            properties: {
                                                                id: {
                                                                    type: string;
                                                                };
                                                                name: {
                                                                    type: string;
                                                                };
                                                                email: {
                                                                    type: string;
                                                                };
                                                                image: {
                                                                    type: string;
                                                                };
                                                                emailVerified: {
                                                                    type: string;
                                                                };
                                                            };
                                                            required: string[];
                                                        };
                                                        data: {
                                                            type: string;
                                                            properties: {};
                                                            additionalProperties: boolean;
                                                        };
                                                    };
                                                    required: string[];
                                                    additionalProperties: boolean;
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                        body: zod.ZodObject<{
                            accountId: zod.ZodString;
                        }, zod_v4_core.$strip>;
                    } & {
                        use: any[];
                    };
                    path: "/account-info";
                };
            }> & (((C extends undefined ? {} : C) & {
                baseURL: string | undefined;
                fetchOptions: {
                    customFetchImpl: (url: string | URL | Request, init?: RequestInit) => Promise<Response>;
                };
            })["plugins"] extends (infer Pl)[] ? UnionToIntersection<Pl extends {
                $InferServerPlugin: infer Plug;
            } ? Plug extends {
                endpoints: infer Endpoints;
            } ? Endpoints : {} : {}> : {}) : FilterActions<{
                ok: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0?: ({
                        body?: undefined;
                    } & {
                        method?: "GET" | undefined;
                    } & {
                        query?: Record<string, any> | undefined;
                    } & {
                        params?: Record<string, any>;
                    } & {
                        request?: Request;
                    } & {
                        headers?: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }) | undefined): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: {
                            ok: boolean;
                        };
                    } : {
                        ok: boolean;
                    }>;
                    options: {
                        method: "GET";
                        metadata: {
                            openapi: {
                                description: string;
                                responses: {
                                    "200": {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "object";
                                                    properties: {
                                                        ok: {
                                                            type: string;
                                                            description: string;
                                                        };
                                                    };
                                                    required: string[];
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                            isAction: false;
                        };
                    } & {
                        use: any[];
                    };
                    path: "/ok";
                };
                error: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0?: ({
                        body?: undefined;
                    } & {
                        method?: "GET" | undefined;
                    } & {
                        query?: Record<string, any> | undefined;
                    } & {
                        params?: Record<string, any>;
                    } & {
                        request?: Request;
                    } & {
                        headers?: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }) | undefined): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: Response;
                    } : Response>;
                    options: {
                        method: "GET";
                        metadata: {
                            openapi: {
                                description: string;
                                responses: {
                                    "200": {
                                        description: string;
                                        content: {
                                            "text/html": {
                                                schema: {
                                                    type: "string";
                                                    description: string;
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                            isAction: false;
                        };
                    } & {
                        use: any[];
                    };
                    path: "/error";
                };
                signInSocial: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                        body: {
                            provider: unknown;
                            callbackURL?: string | undefined;
                            newUserCallbackURL?: string | undefined;
                            errorCallbackURL?: string | undefined;
                            disableRedirect?: boolean | undefined;
                            idToken?: {
                                token: string;
                                nonce?: string | undefined;
                                accessToken?: string | undefined;
                                refreshToken?: string | undefined;
                                expiresAt?: number | undefined;
                            } | undefined;
                            scopes?: string[] | undefined;
                            requestSignUp?: boolean | undefined;
                            loginHint?: string | undefined;
                        };
                    } & {
                        method?: "POST" | undefined;
                    } & {
                        query?: Record<string, any> | undefined;
                    } & {
                        params?: Record<string, any>;
                    } & {
                        request?: Request;
                    } & {
                        headers?: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: {
                            redirect: boolean;
                            token: string;
                            url: undefined;
                            user: {
                                id: string;
                                email: string;
                                name: string;
                                image: string | null | undefined;
                                emailVerified: boolean;
                                createdAt: Date;
                                updatedAt: Date;
                            };
                        } | {
                            url: string;
                            redirect: boolean;
                        };
                    } : {
                        redirect: boolean;
                        token: string;
                        url: undefined;
                        user: {
                            id: string;
                            email: string;
                            name: string;
                            image: string | null | undefined;
                            emailVerified: boolean;
                            createdAt: Date;
                            updatedAt: Date;
                        };
                    } | {
                        url: string;
                        redirect: boolean;
                    }>;
                    options: {
                        method: "POST";
                        body: zod.ZodObject<{
                            callbackURL: zod.ZodOptional<zod.ZodString>;
                            newUserCallbackURL: zod.ZodOptional<zod.ZodString>;
                            errorCallbackURL: zod.ZodOptional<zod.ZodString>;
                            provider: zod.ZodType<"github" | "apple" | "discord" | "facebook" | "microsoft" | "google" | "huggingface" | "slack" | "spotify" | "twitch" | "twitter" | "dropbox" | "kick" | "linear" | "linkedin" | "gitlab" | "tiktok" | "reddit" | "roblox" | "vk" | "zoom" | "notion" | (string & {}), unknown, zod_v4_core.$ZodTypeInternals<"github" | "apple" | "discord" | "facebook" | "microsoft" | "google" | "huggingface" | "slack" | "spotify" | "twitch" | "twitter" | "dropbox" | "kick" | "linear" | "linkedin" | "gitlab" | "tiktok" | "reddit" | "roblox" | "vk" | "zoom" | "notion" | (string & {}), unknown>>;
                            disableRedirect: zod.ZodOptional<zod.ZodBoolean>;
                            idToken: zod.ZodOptional<zod.ZodObject<{
                                token: zod.ZodString;
                                nonce: zod.ZodOptional<zod.ZodString>;
                                accessToken: zod.ZodOptional<zod.ZodString>;
                                refreshToken: zod.ZodOptional<zod.ZodString>;
                                expiresAt: zod.ZodOptional<zod.ZodNumber>;
                            }, zod_v4_core.$strip>>;
                            scopes: zod.ZodOptional<zod.ZodArray<zod.ZodString>>;
                            requestSignUp: zod.ZodOptional<zod.ZodBoolean>;
                            loginHint: zod.ZodOptional<zod.ZodString>;
                        }, zod_v4_core.$strip>;
                        metadata: {
                            openapi: {
                                description: string;
                                operationId: string;
                                responses: {
                                    "200": {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "object";
                                                    description: string;
                                                    properties: {
                                                        redirect: {
                                                            type: string;
                                                            enum: boolean[];
                                                        };
                                                        token: {
                                                            type: string;
                                                            description: string;
                                                            url: {
                                                                type: string;
                                                                nullable: boolean;
                                                            };
                                                            user: {
                                                                type: string;
                                                                properties: {
                                                                    id: {
                                                                        type: string;
                                                                    };
                                                                    email: {
                                                                        type: string;
                                                                    };
                                                                    name: {
                                                                        type: string;
                                                                        nullable: boolean;
                                                                    };
                                                                    image: {
                                                                        type: string;
                                                                        nullable: boolean;
                                                                    };
                                                                    emailVerified: {
                                                                        type: string;
                                                                    };
                                                                    createdAt: {
                                                                        type: string;
                                                                        format: string;
                                                                    };
                                                                    updatedAt: {
                                                                        type: string;
                                                                        format: string;
                                                                    };
                                                                };
                                                                required: string[];
                                                            };
                                                        };
                                                    };
                                                    required: string[];
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    } & {
                        use: any[];
                    };
                    path: "/sign-in/social";
                };
                callbackOAuth: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                        body?: {
                            code?: string | undefined;
                            error?: string | undefined;
                            device_id?: string | undefined;
                            error_description?: string | undefined;
                            state?: string | undefined;
                            user?: string | undefined;
                        } | undefined;
                    } & {
                        method: "GET" | "POST";
                    } & {
                        query?: {
                            code?: string | undefined;
                            error?: string | undefined;
                            device_id?: string | undefined;
                            error_description?: string | undefined;
                            state?: string | undefined;
                            user?: string | undefined;
                        } | undefined;
                    } & {
                        params: {
                            id: string;
                        };
                    } & {
                        request?: Request;
                    } & {
                        headers?: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: void;
                    } : void>;
                    options: {
                        method: ("GET" | "POST")[];
                        body: zod.ZodOptional<zod.ZodObject<{
                            code: zod.ZodOptional<zod.ZodString>;
                            error: zod.ZodOptional<zod.ZodString>;
                            device_id: zod.ZodOptional<zod.ZodString>;
                            error_description: zod.ZodOptional<zod.ZodString>;
                            state: zod.ZodOptional<zod.ZodString>;
                            user: zod.ZodOptional<zod.ZodString>;
                        }, zod_v4_core.$strip>>;
                        query: zod.ZodOptional<zod.ZodObject<{
                            code: zod.ZodOptional<zod.ZodString>;
                            error: zod.ZodOptional<zod.ZodString>;
                            device_id: zod.ZodOptional<zod.ZodString>;
                            error_description: zod.ZodOptional<zod.ZodString>;
                            state: zod.ZodOptional<zod.ZodString>;
                            user: zod.ZodOptional<zod.ZodString>;
                        }, zod_v4_core.$strip>>;
                        metadata: {
                            isAction: false;
                        };
                    } & {
                        use: any[];
                    };
                    path: "/callback/:id";
                };
                getSession: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                        body?: undefined;
                    } & {
                        method?: "GET" | undefined;
                    } & {
                        query?: {
                            disableCookieCache?: unknown;
                            disableRefresh?: unknown;
                        } | undefined;
                    } & {
                        params?: Record<string, any>;
                    } & {
                        request?: Request;
                    } & {
                        headers: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: {
                            session: {
                                id: string;
                                userId: string;
                                expiresAt: Date;
                                createdAt: Date;
                                updatedAt: Date;
                                token: string;
                                ipAddress?: string | null | undefined;
                                userAgent?: string | null | undefined;
                            };
                            user: {
                                id: string;
                                email: string;
                                emailVerified: boolean;
                                name: string;
                                createdAt: Date;
                                updatedAt: Date;
                                image?: string | null | undefined;
                            };
                        } | null;
                    } : {
                        session: {
                            id: string;
                            userId: string;
                            expiresAt: Date;
                            createdAt: Date;
                            updatedAt: Date;
                            token: string;
                            ipAddress?: string | null | undefined;
                            userAgent?: string | null | undefined;
                        };
                        user: {
                            id: string;
                            email: string;
                            emailVerified: boolean;
                            name: string;
                            createdAt: Date;
                            updatedAt: Date;
                            image?: string | null | undefined;
                        };
                    } | null>;
                    options: {
                        method: "GET";
                        query: zod.ZodOptional<zod.ZodObject<{
                            disableCookieCache: zod.ZodOptional<zod.ZodCoercedBoolean<unknown>>;
                            disableRefresh: zod.ZodOptional<zod.ZodCoercedBoolean<unknown>>;
                        }, zod_v4_core.$strip>>;
                        requireHeaders: true;
                        metadata: {
                            openapi: {
                                description: string;
                                responses: {
                                    "200": {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "object";
                                                    properties: {
                                                        session: {
                                                            $ref: string;
                                                        };
                                                        user: {
                                                            $ref: string;
                                                        };
                                                    };
                                                    required: string[];
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    } & {
                        use: any[];
                    };
                    path: "/get-session";
                };
                signOut: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                        body?: undefined;
                    } & {
                        method?: "POST" | undefined;
                    } & {
                        query?: Record<string, any> | undefined;
                    } & {
                        params?: Record<string, any>;
                    } & {
                        request?: Request;
                    } & {
                        headers: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: {
                            success: boolean;
                        };
                    } : {
                        success: boolean;
                    }>;
                    options: {
                        method: "POST";
                        requireHeaders: true;
                        metadata: {
                            openapi: {
                                description: string;
                                responses: {
                                    "200": {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "object";
                                                    properties: {
                                                        success: {
                                                            type: string;
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    } & {
                        use: any[];
                    };
                    path: "/sign-out";
                };
                signUpEmail: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                        body: {
                            name: string;
                            email: string;
                            password: string;
                            image?: string;
                            callbackURL?: string;
                            rememberMe?: boolean;
                        };
                    } & {
                        method?: "POST" | undefined;
                    } & {
                        query?: Record<string, any> | undefined;
                    } & {
                        params?: Record<string, any>;
                    } & {
                        request?: Request;
                    } & {
                        headers?: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: {
                            token: null;
                            user: {
                                id: string;
                                email: string;
                                name: string;
                                image: string | null | undefined;
                                emailVerified: boolean;
                                createdAt: Date;
                                updatedAt: Date;
                            };
                        } | {
                            token: string;
                            user: {
                                id: string;
                                email: string;
                                name: string;
                                image: string | null | undefined;
                                emailVerified: boolean;
                                createdAt: Date;
                                updatedAt: Date;
                            };
                        };
                    } : {
                        token: null;
                        user: {
                            id: string;
                            email: string;
                            name: string;
                            image: string | null | undefined;
                            emailVerified: boolean;
                            createdAt: Date;
                            updatedAt: Date;
                        };
                    } | {
                        token: string;
                        user: {
                            id: string;
                            email: string;
                            name: string;
                            image: string | null | undefined;
                            emailVerified: boolean;
                            createdAt: Date;
                            updatedAt: Date;
                        };
                    }>;
                    options: {
                        method: "POST";
                        body: zod.ZodRecord<zod.ZodString, zod.ZodAny>;
                        metadata: {
                            $Infer: {
                                body: {
                                    name: string;
                                    email: string;
                                    password: string;
                                    image?: string;
                                    callbackURL?: string;
                                    rememberMe?: boolean;
                                };
                            };
                            openapi: {
                                description: string;
                                requestBody: {
                                    content: {
                                        "application/json": {
                                            schema: {
                                                type: "object";
                                                properties: {
                                                    name: {
                                                        type: string;
                                                        description: string;
                                                    };
                                                    email: {
                                                        type: string;
                                                        description: string;
                                                    };
                                                    password: {
                                                        type: string;
                                                        description: string;
                                                    };
                                                    image: {
                                                        type: string;
                                                        description: string;
                                                    };
                                                    callbackURL: {
                                                        type: string;
                                                        description: string;
                                                    };
                                                    rememberMe: {
                                                        type: string;
                                                        description: string;
                                                    };
                                                };
                                                required: string[];
                                            };
                                        };
                                    };
                                };
                                responses: {
                                    "200": {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "object";
                                                    properties: {
                                                        token: {
                                                            type: string;
                                                            nullable: boolean;
                                                            description: string;
                                                        };
                                                        user: {
                                                            type: string;
                                                            properties: {
                                                                id: {
                                                                    type: string;
                                                                    description: string;
                                                                };
                                                                email: {
                                                                    type: string;
                                                                    format: string;
                                                                    description: string;
                                                                };
                                                                name: {
                                                                    type: string;
                                                                    description: string;
                                                                };
                                                                image: {
                                                                    type: string;
                                                                    format: string;
                                                                    nullable: boolean;
                                                                    description: string;
                                                                };
                                                                emailVerified: {
                                                                    type: string;
                                                                    description: string;
                                                                };
                                                                createdAt: {
                                                                    type: string;
                                                                    format: string;
                                                                    description: string;
                                                                };
                                                                updatedAt: {
                                                                    type: string;
                                                                    format: string;
                                                                    description: string;
                                                                };
                                                            };
                                                            required: string[];
                                                        };
                                                    };
                                                    required: string[];
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    } & {
                        use: any[];
                    };
                    path: "/sign-up/email";
                };
                signInEmail: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                        body: {
                            email: string;
                            password: string;
                            callbackURL?: string | undefined;
                            rememberMe?: boolean | undefined;
                        };
                    } & {
                        method?: "POST" | undefined;
                    } & {
                        query?: Record<string, any> | undefined;
                    } & {
                        params?: Record<string, any>;
                    } & {
                        request?: Request;
                    } & {
                        headers?: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: {
                            redirect: boolean;
                            token: string;
                            url: string | undefined;
                            user: {
                                id: string;
                                email: string;
                                name: string;
                                image: string | null | undefined;
                                emailVerified: boolean;
                                createdAt: Date;
                                updatedAt: Date;
                            };
                        };
                    } : {
                        redirect: boolean;
                        token: string;
                        url: string | undefined;
                        user: {
                            id: string;
                            email: string;
                            name: string;
                            image: string | null | undefined;
                            emailVerified: boolean;
                            createdAt: Date;
                            updatedAt: Date;
                        };
                    }>;
                    options: {
                        method: "POST";
                        body: zod.ZodObject<{
                            email: zod.ZodString;
                            password: zod.ZodString;
                            callbackURL: zod.ZodOptional<zod.ZodString>;
                            rememberMe: zod.ZodOptional<zod.ZodDefault<zod.ZodBoolean>>;
                        }, zod_v4_core.$strip>;
                        metadata: {
                            openapi: {
                                description: string;
                                responses: {
                                    "200": {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "object";
                                                    description: string;
                                                    properties: {
                                                        redirect: {
                                                            type: string;
                                                            enum: boolean[];
                                                        };
                                                        token: {
                                                            type: string;
                                                            description: string;
                                                        };
                                                        url: {
                                                            type: string;
                                                            nullable: boolean;
                                                        };
                                                        user: {
                                                            type: string;
                                                            properties: {
                                                                id: {
                                                                    type: string;
                                                                };
                                                                email: {
                                                                    type: string;
                                                                };
                                                                name: {
                                                                    type: string;
                                                                    nullable: boolean;
                                                                };
                                                                image: {
                                                                    type: string;
                                                                    nullable: boolean;
                                                                };
                                                                emailVerified: {
                                                                    type: string;
                                                                };
                                                                createdAt: {
                                                                    type: string;
                                                                    format: string;
                                                                };
                                                                updatedAt: {
                                                                    type: string;
                                                                    format: string;
                                                                };
                                                            };
                                                            required: string[];
                                                        };
                                                    };
                                                    required: string[];
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    } & {
                        use: any[];
                    };
                    path: "/sign-in/email";
                };
                forgetPassword: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                        body: {
                            email: string;
                            redirectTo?: string | undefined;
                        };
                    } & {
                        method?: "POST" | undefined;
                    } & {
                        query?: Record<string, any> | undefined;
                    } & {
                        params?: Record<string, any>;
                    } & {
                        request?: Request;
                    } & {
                        headers?: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: {
                            status: boolean;
                        };
                    } : {
                        status: boolean;
                    }>;
                    options: {
                        method: "POST";
                        body: zod.ZodObject<{
                            email: zod.ZodString;
                            redirectTo: zod.ZodOptional<zod.ZodString>;
                        }, zod_v4_core.$strip>;
                        metadata: {
                            openapi: {
                                description: string;
                                responses: {
                                    "200": {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "object";
                                                    properties: {
                                                        status: {
                                                            type: string;
                                                        };
                                                        message: {
                                                            type: string;
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    } & {
                        use: any[];
                    };
                    path: "/forget-password";
                };
                resetPassword: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                        body: {
                            newPassword: string;
                            token?: string | undefined;
                        };
                    } & {
                        method?: "POST" | undefined;
                    } & {
                        query?: {
                            token?: string | undefined;
                        } | undefined;
                    } & {
                        params?: Record<string, any>;
                    } & {
                        request?: Request;
                    } & {
                        headers?: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: {
                            status: boolean;
                        };
                    } : {
                        status: boolean;
                    }>;
                    options: {
                        method: "POST";
                        query: zod.ZodOptional<zod.ZodObject<{
                            token: zod.ZodOptional<zod.ZodString>;
                        }, zod_v4_core.$strip>>;
                        body: zod.ZodObject<{
                            newPassword: zod.ZodString;
                            token: zod.ZodOptional<zod.ZodString>;
                        }, zod_v4_core.$strip>;
                        metadata: {
                            openapi: {
                                description: string;
                                responses: {
                                    "200": {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "object";
                                                    properties: {
                                                        status: {
                                                            type: string;
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    } & {
                        use: any[];
                    };
                    path: "/reset-password";
                };
                verifyEmail: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                        body?: undefined;
                    } & {
                        method?: "GET" | undefined;
                    } & {
                        query: {
                            token: string;
                            callbackURL?: string | undefined;
                        };
                    } & {
                        params?: Record<string, any>;
                    } & {
                        request?: Request;
                    } & {
                        headers?: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: void | {
                            status: boolean;
                            user: {
                                id: any;
                                email: any;
                                name: any;
                                image: any;
                                emailVerified: any;
                                createdAt: any;
                                updatedAt: any;
                            };
                        } | {
                            status: boolean;
                            user: null;
                        };
                    } : void | {
                        status: boolean;
                        user: {
                            id: any;
                            email: any;
                            name: any;
                            image: any;
                            emailVerified: any;
                            createdAt: any;
                            updatedAt: any;
                        };
                    } | {
                        status: boolean;
                        user: null;
                    }>;
                    options: {
                        method: "GET";
                        query: zod.ZodObject<{
                            token: zod.ZodString;
                            callbackURL: zod.ZodOptional<zod.ZodString>;
                        }, zod_v4_core.$strip>;
                        use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<void>)[];
                        metadata: {
                            openapi: {
                                description: string;
                                parameters: ({
                                    name: string;
                                    in: "query";
                                    description: string;
                                    required: true;
                                    schema: {
                                        type: "string";
                                    };
                                } | {
                                    name: string;
                                    in: "query";
                                    description: string;
                                    required: false;
                                    schema: {
                                        type: "string";
                                    };
                                })[];
                                responses: {
                                    "200": {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "object";
                                                    properties: {
                                                        user: {
                                                            type: string;
                                                            properties: {
                                                                id: {
                                                                    type: string;
                                                                    description: string;
                                                                };
                                                                email: {
                                                                    type: string;
                                                                    description: string;
                                                                };
                                                                name: {
                                                                    type: string;
                                                                    description: string;
                                                                };
                                                                image: {
                                                                    type: string;
                                                                    description: string;
                                                                };
                                                                emailVerified: {
                                                                    type: string;
                                                                    description: string;
                                                                };
                                                                createdAt: {
                                                                    type: string;
                                                                    description: string;
                                                                };
                                                                updatedAt: {
                                                                    type: string;
                                                                    description: string;
                                                                };
                                                            };
                                                            required: string[];
                                                        };
                                                        status: {
                                                            type: string;
                                                            description: string;
                                                        };
                                                    };
                                                    required: string[];
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    } & {
                        use: any[];
                    };
                    path: "/verify-email";
                };
                sendVerificationEmail: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                        body: {
                            email: string;
                            callbackURL?: string | undefined;
                        };
                    } & {
                        method?: "POST" | undefined;
                    } & {
                        query?: Record<string, any> | undefined;
                    } & {
                        params?: Record<string, any>;
                    } & {
                        request?: Request;
                    } & {
                        headers?: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: {
                            status: boolean;
                        };
                    } : {
                        status: boolean;
                    }>;
                    options: {
                        method: "POST";
                        body: zod.ZodObject<{
                            email: zod.ZodEmail;
                            callbackURL: zod.ZodOptional<zod.ZodString>;
                        }, zod_v4_core.$strip>;
                        metadata: {
                            openapi: {
                                description: string;
                                requestBody: {
                                    content: {
                                        "application/json": {
                                            schema: {
                                                type: "object";
                                                properties: {
                                                    email: {
                                                        type: string;
                                                        description: string;
                                                        example: string;
                                                    };
                                                    callbackURL: {
                                                        type: string;
                                                        description: string;
                                                        example: string;
                                                        nullable: boolean;
                                                    };
                                                };
                                                required: string[];
                                            };
                                        };
                                    };
                                };
                                responses: {
                                    "200": {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "object";
                                                    properties: {
                                                        status: {
                                                            type: string;
                                                            description: string;
                                                            example: boolean;
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                    "400": {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "object";
                                                    properties: {
                                                        message: {
                                                            type: string;
                                                            description: string;
                                                            example: string;
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    } & {
                        use: any[];
                    };
                    path: "/send-verification-email";
                };
                changeEmail: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                        body: {
                            newEmail: string;
                            callbackURL?: string | undefined;
                        };
                    } & {
                        method?: "POST" | undefined;
                    } & {
                        query?: Record<string, any> | undefined;
                    } & {
                        params?: Record<string, any>;
                    } & {
                        request?: Request;
                    } & {
                        headers?: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: {
                            status: boolean;
                        };
                    } : {
                        status: boolean;
                    }>;
                    options: {
                        method: "POST";
                        body: zod.ZodObject<{
                            newEmail: zod.ZodEmail;
                            callbackURL: zod.ZodOptional<zod.ZodString>;
                        }, zod_v4_core.$strip>;
                        use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<{
                            session: {
                                session: Record<string, any> & {
                                    id: string;
                                    userId: string;
                                    expiresAt: Date;
                                    createdAt: Date;
                                    updatedAt: Date;
                                    token: string;
                                    ipAddress?: string | null | undefined;
                                    userAgent?: string | null | undefined;
                                };
                                user: Record<string, any> & {
                                    id: string;
                                    email: string;
                                    emailVerified: boolean;
                                    name: string;
                                    createdAt: Date;
                                    updatedAt: Date;
                                    image?: string | null | undefined;
                                };
                            };
                        }>)[];
                        metadata: {
                            openapi: {
                                responses: {
                                    "200": {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "object";
                                                    properties: {
                                                        status: {
                                                            type: string;
                                                            description: string;
                                                        };
                                                        message: {
                                                            type: string;
                                                            enum: string[];
                                                            description: string;
                                                            nullable: boolean;
                                                        };
                                                    };
                                                    required: string[];
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    } & {
                        use: any[];
                    };
                    path: "/change-email";
                };
                changePassword: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                        body: {
                            newPassword: string;
                            currentPassword: string;
                            revokeOtherSessions?: boolean | undefined;
                        };
                    } & {
                        method?: "POST" | undefined;
                    } & {
                        query?: Record<string, any> | undefined;
                    } & {
                        params?: Record<string, any>;
                    } & {
                        request?: Request;
                    } & {
                        headers?: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: {
                            token: string | null;
                            user: {
                                id: string;
                                email: string;
                                name: string;
                                image: string | null | undefined;
                                emailVerified: boolean;
                                createdAt: Date;
                                updatedAt: Date;
                            };
                        };
                    } : {
                        token: string | null;
                        user: {
                            id: string;
                            email: string;
                            name: string;
                            image: string | null | undefined;
                            emailVerified: boolean;
                            createdAt: Date;
                            updatedAt: Date;
                        };
                    }>;
                    options: {
                        method: "POST";
                        body: zod.ZodObject<{
                            newPassword: zod.ZodString;
                            currentPassword: zod.ZodString;
                            revokeOtherSessions: zod.ZodOptional<zod.ZodBoolean>;
                        }, zod_v4_core.$strip>;
                        use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<{
                            session: {
                                session: Record<string, any> & {
                                    id: string;
                                    userId: string;
                                    expiresAt: Date;
                                    createdAt: Date;
                                    updatedAt: Date;
                                    token: string;
                                    ipAddress?: string | null | undefined;
                                    userAgent?: string | null | undefined;
                                };
                                user: Record<string, any> & {
                                    id: string;
                                    email: string;
                                    emailVerified: boolean;
                                    name: string;
                                    createdAt: Date;
                                    updatedAt: Date;
                                    image?: string | null | undefined;
                                };
                            };
                        }>)[];
                        metadata: {
                            openapi: {
                                description: string;
                                responses: {
                                    "200": {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "object";
                                                    properties: {
                                                        token: {
                                                            type: string;
                                                            nullable: boolean;
                                                            description: string;
                                                        };
                                                        user: {
                                                            type: string;
                                                            properties: {
                                                                id: {
                                                                    type: string;
                                                                    description: string;
                                                                };
                                                                email: {
                                                                    type: string;
                                                                    format: string;
                                                                    description: string;
                                                                };
                                                                name: {
                                                                    type: string;
                                                                    description: string;
                                                                };
                                                                image: {
                                                                    type: string;
                                                                    format: string;
                                                                    nullable: boolean;
                                                                    description: string;
                                                                };
                                                                emailVerified: {
                                                                    type: string;
                                                                    description: string;
                                                                };
                                                                createdAt: {
                                                                    type: string;
                                                                    format: string;
                                                                    description: string;
                                                                };
                                                                updatedAt: {
                                                                    type: string;
                                                                    format: string;
                                                                    description: string;
                                                                };
                                                            };
                                                            required: string[];
                                                        };
                                                    };
                                                    required: string[];
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    } & {
                        use: any[];
                    };
                    path: "/change-password";
                };
                setPassword: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                        body: {
                            newPassword: string;
                        };
                    } & {
                        method?: "POST" | undefined;
                    } & {
                        query?: Record<string, any> | undefined;
                    } & {
                        params?: Record<string, any>;
                    } & {
                        request?: Request;
                    } & {
                        headers?: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: {
                            status: boolean;
                        };
                    } : {
                        status: boolean;
                    }>;
                    options: {
                        method: "POST";
                        body: zod.ZodObject<{
                            newPassword: zod.ZodString;
                        }, zod_v4_core.$strip>;
                        metadata: {
                            SERVER_ONLY: true;
                        };
                        use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<{
                            session: {
                                session: Record<string, any> & {
                                    id: string;
                                    userId: string;
                                    expiresAt: Date;
                                    createdAt: Date;
                                    updatedAt: Date;
                                    token: string;
                                    ipAddress?: string | null | undefined;
                                    userAgent?: string | null | undefined;
                                };
                                user: Record<string, any> & {
                                    id: string;
                                    email: string;
                                    emailVerified: boolean;
                                    name: string;
                                    createdAt: Date;
                                    updatedAt: Date;
                                    image?: string | null | undefined;
                                };
                            };
                        }>)[];
                    } & {
                        use: any[];
                    };
                    path: "/set-password";
                };
                updateUser: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                        body: Partial<{}> & {
                            name?: string;
                            image?: string;
                        };
                    } & {
                        method?: "POST" | undefined;
                    } & {
                        query?: Record<string, any> | undefined;
                    } & {
                        params?: Record<string, any>;
                    } & {
                        request?: Request;
                    } & {
                        headers?: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: {
                            status: boolean;
                        };
                    } : {
                        status: boolean;
                    }>;
                    options: {
                        method: "POST";
                        body: zod.ZodRecord<zod.ZodString, zod.ZodAny>;
                        use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<{
                            session: {
                                session: Record<string, any> & {
                                    id: string;
                                    userId: string;
                                    expiresAt: Date;
                                    createdAt: Date;
                                    updatedAt: Date;
                                    token: string;
                                    ipAddress?: string | null | undefined;
                                    userAgent?: string | null | undefined;
                                };
                                user: Record<string, any> & {
                                    id: string;
                                    email: string;
                                    emailVerified: boolean;
                                    name: string;
                                    createdAt: Date;
                                    updatedAt: Date;
                                    image?: string | null | undefined;
                                };
                            };
                        }>)[];
                        metadata: {
                            $Infer: {
                                body: Partial<{}> & {
                                    name?: string;
                                    image?: string;
                                };
                            };
                            openapi: {
                                description: string;
                                requestBody: {
                                    content: {
                                        "application/json": {
                                            schema: {
                                                type: "object";
                                                properties: {
                                                    name: {
                                                        type: string;
                                                        description: string;
                                                    };
                                                    image: {
                                                        type: string;
                                                        description: string;
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                                responses: {
                                    "200": {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "object";
                                                    properties: {
                                                        status: {
                                                            type: string;
                                                            description: string;
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    } & {
                        use: any[];
                    };
                    path: "/update-user";
                };
                deleteUser: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                        body: {
                            callbackURL?: string | undefined;
                            password?: string | undefined;
                            token?: string | undefined;
                        };
                    } & {
                        method?: "POST" | undefined;
                    } & {
                        query?: Record<string, any> | undefined;
                    } & {
                        params?: Record<string, any>;
                    } & {
                        request?: Request;
                    } & {
                        headers?: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: {
                            success: boolean;
                            message: string;
                        };
                    } : {
                        success: boolean;
                        message: string;
                    }>;
                    options: {
                        method: "POST";
                        use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<{
                            session: {
                                session: Record<string, any> & {
                                    id: string;
                                    userId: string;
                                    expiresAt: Date;
                                    createdAt: Date;
                                    updatedAt: Date;
                                    token: string;
                                    ipAddress?: string | null | undefined;
                                    userAgent?: string | null | undefined;
                                };
                                user: Record<string, any> & {
                                    id: string;
                                    email: string;
                                    emailVerified: boolean;
                                    name: string;
                                    createdAt: Date;
                                    updatedAt: Date;
                                    image?: string | null | undefined;
                                };
                            };
                        }>)[];
                        body: zod.ZodObject<{
                            callbackURL: zod.ZodOptional<zod.ZodString>;
                            password: zod.ZodOptional<zod.ZodString>;
                            token: zod.ZodOptional<zod.ZodString>;
                        }, zod_v4_core.$strip>;
                        metadata: {
                            openapi: {
                                description: string;
                                responses: {
                                    "200": {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "object";
                                                    properties: {
                                                        success: {
                                                            type: string;
                                                            description: string;
                                                        };
                                                        message: {
                                                            type: string;
                                                            enum: string[];
                                                            description: string;
                                                        };
                                                    };
                                                    required: string[];
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    } & {
                        use: any[];
                    };
                    path: "/delete-user";
                };
                forgetPasswordCallback: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                        body?: undefined;
                    } & {
                        method?: "GET" | undefined;
                    } & {
                        query: {
                            callbackURL: string;
                        };
                    } & {
                        params: {
                            token: string;
                        };
                    } & {
                        request?: Request;
                    } & {
                        headers?: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: never;
                    } : never>;
                    options: {
                        method: "GET";
                        query: zod.ZodObject<{
                            callbackURL: zod.ZodString;
                        }, zod_v4_core.$strip>;
                        use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<void>)[];
                        metadata: {
                            openapi: {
                                description: string;
                                responses: {
                                    "200": {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "object";
                                                    properties: {
                                                        token: {
                                                            type: string;
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    } & {
                        use: any[];
                    };
                    path: "/reset-password/:token";
                };
                requestPasswordReset: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                        body: {
                            email: string;
                            redirectTo?: string | undefined;
                        };
                    } & {
                        method?: "POST" | undefined;
                    } & {
                        query?: Record<string, any> | undefined;
                    } & {
                        params?: Record<string, any>;
                    } & {
                        request?: Request;
                    } & {
                        headers?: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: {
                            status: boolean;
                        };
                    } : {
                        status: boolean;
                    }>;
                    options: {
                        method: "POST";
                        body: zod.ZodObject<{
                            email: zod.ZodEmail;
                            redirectTo: zod.ZodOptional<zod.ZodString>;
                        }, zod_v4_core.$strip>;
                        metadata: {
                            openapi: {
                                description: string;
                                responses: {
                                    "200": {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "object";
                                                    properties: {
                                                        status: {
                                                            type: string;
                                                        };
                                                        message: {
                                                            type: string;
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    } & {
                        use: any[];
                    };
                    path: "/request-password-reset";
                };
                requestPasswordResetCallback: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                        body?: undefined;
                    } & {
                        method?: "GET" | undefined;
                    } & {
                        query: {
                            callbackURL: string;
                        };
                    } & {
                        params: {
                            token: string;
                        };
                    } & {
                        request?: Request;
                    } & {
                        headers?: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: never;
                    } : never>;
                    options: {
                        method: "GET";
                        query: zod.ZodObject<{
                            callbackURL: zod.ZodString;
                        }, zod_v4_core.$strip>;
                        use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<void>)[];
                        metadata: {
                            openapi: {
                                description: string;
                                responses: {
                                    "200": {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "object";
                                                    properties: {
                                                        token: {
                                                            type: string;
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    } & {
                        use: any[];
                    };
                    path: "/reset-password/:token";
                };
                listSessions: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                        body?: undefined;
                    } & {
                        method?: "GET" | undefined;
                    } & {
                        query?: Record<string, any> | undefined;
                    } & {
                        params?: Record<string, any>;
                    } & {
                        request?: Request;
                    } & {
                        headers: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: Prettify<{
                            id: string;
                            userId: string;
                            expiresAt: Date;
                            createdAt: Date;
                            updatedAt: Date;
                            token: string;
                            ipAddress?: string | null | undefined;
                            userAgent?: string | null | undefined;
                        }>[];
                    } : Prettify<{
                        id: string;
                        userId: string;
                        expiresAt: Date;
                        createdAt: Date;
                        updatedAt: Date;
                        token: string;
                        ipAddress?: string | null | undefined;
                        userAgent?: string | null | undefined;
                    }>[]>;
                    options: {
                        method: "GET";
                        use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<{
                            session: {
                                session: Record<string, any> & {
                                    id: string;
                                    userId: string;
                                    expiresAt: Date;
                                    createdAt: Date;
                                    updatedAt: Date;
                                    token: string;
                                    ipAddress?: string | null | undefined;
                                    userAgent?: string | null | undefined;
                                };
                                user: Record<string, any> & {
                                    id: string;
                                    email: string;
                                    emailVerified: boolean;
                                    name: string;
                                    createdAt: Date;
                                    updatedAt: Date;
                                    image?: string | null | undefined;
                                };
                            };
                        }>)[];
                        requireHeaders: true;
                        metadata: {
                            openapi: {
                                description: string;
                                responses: {
                                    "200": {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "array";
                                                    items: {
                                                        $ref: string;
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    } & {
                        use: any[];
                    };
                    path: "/list-sessions";
                };
                revokeSession: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                        body: {
                            token: string;
                        };
                    } & {
                        method?: "POST" | undefined;
                    } & {
                        query?: Record<string, any> | undefined;
                    } & {
                        params?: Record<string, any>;
                    } & {
                        request?: Request;
                    } & {
                        headers: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: {
                            status: boolean;
                        };
                    } : {
                        status: boolean;
                    }>;
                    options: {
                        method: "POST";
                        body: zod.ZodObject<{
                            token: zod.ZodString;
                        }, zod_v4_core.$strip>;
                        use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<{
                            session: {
                                session: Record<string, any> & {
                                    id: string;
                                    userId: string;
                                    expiresAt: Date;
                                    createdAt: Date;
                                    updatedAt: Date;
                                    token: string;
                                    ipAddress?: string | null | undefined;
                                    userAgent?: string | null | undefined;
                                };
                                user: Record<string, any> & {
                                    id: string;
                                    email: string;
                                    emailVerified: boolean;
                                    name: string;
                                    createdAt: Date;
                                    updatedAt: Date;
                                    image?: string | null | undefined;
                                };
                            };
                        }>)[];
                        requireHeaders: true;
                        metadata: {
                            openapi: {
                                description: string;
                                requestBody: {
                                    content: {
                                        "application/json": {
                                            schema: {
                                                type: "object";
                                                properties: {
                                                    token: {
                                                        type: string;
                                                        description: string;
                                                    };
                                                };
                                                required: string[];
                                            };
                                        };
                                    };
                                };
                                responses: {
                                    "200": {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "object";
                                                    properties: {
                                                        status: {
                                                            type: string;
                                                            description: string;
                                                        };
                                                    };
                                                    required: string[];
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    } & {
                        use: any[];
                    };
                    path: "/revoke-session";
                };
                revokeSessions: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                        body?: undefined;
                    } & {
                        method?: "POST" | undefined;
                    } & {
                        query?: Record<string, any> | undefined;
                    } & {
                        params?: Record<string, any>;
                    } & {
                        request?: Request;
                    } & {
                        headers: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: {
                            status: boolean;
                        };
                    } : {
                        status: boolean;
                    }>;
                    options: {
                        method: "POST";
                        use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<{
                            session: {
                                session: Record<string, any> & {
                                    id: string;
                                    userId: string;
                                    expiresAt: Date;
                                    createdAt: Date;
                                    updatedAt: Date;
                                    token: string;
                                    ipAddress?: string | null | undefined;
                                    userAgent?: string | null | undefined;
                                };
                                user: Record<string, any> & {
                                    id: string;
                                    email: string;
                                    emailVerified: boolean;
                                    name: string;
                                    createdAt: Date;
                                    updatedAt: Date;
                                    image?: string | null | undefined;
                                };
                            };
                        }>)[];
                        requireHeaders: true;
                        metadata: {
                            openapi: {
                                description: string;
                                responses: {
                                    "200": {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "object";
                                                    properties: {
                                                        status: {
                                                            type: string;
                                                            description: string;
                                                        };
                                                    };
                                                    required: string[];
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    } & {
                        use: any[];
                    };
                    path: "/revoke-sessions";
                };
                revokeOtherSessions: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                        body?: undefined;
                    } & {
                        method?: "POST" | undefined;
                    } & {
                        query?: Record<string, any> | undefined;
                    } & {
                        params?: Record<string, any>;
                    } & {
                        request?: Request;
                    } & {
                        headers: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: {
                            status: boolean;
                        };
                    } : {
                        status: boolean;
                    }>;
                    options: {
                        method: "POST";
                        requireHeaders: true;
                        use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<{
                            session: {
                                session: Record<string, any> & {
                                    id: string;
                                    userId: string;
                                    expiresAt: Date;
                                    createdAt: Date;
                                    updatedAt: Date;
                                    token: string;
                                    ipAddress?: string | null | undefined;
                                    userAgent?: string | null | undefined;
                                };
                                user: Record<string, any> & {
                                    id: string;
                                    email: string;
                                    emailVerified: boolean;
                                    name: string;
                                    createdAt: Date;
                                    updatedAt: Date;
                                    image?: string | null | undefined;
                                };
                            };
                        }>)[];
                        metadata: {
                            openapi: {
                                description: string;
                                responses: {
                                    "200": {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "object";
                                                    properties: {
                                                        status: {
                                                            type: string;
                                                            description: string;
                                                        };
                                                    };
                                                    required: string[];
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    } & {
                        use: any[];
                    };
                    path: "/revoke-other-sessions";
                };
                linkSocialAccount: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                        body: {
                            provider: unknown;
                            callbackURL?: string | undefined;
                            idToken?: {
                                token: string;
                                nonce?: string | undefined;
                                accessToken?: string | undefined;
                                refreshToken?: string | undefined;
                                scopes?: string[] | undefined;
                            } | undefined;
                            requestSignUp?: boolean | undefined;
                            scopes?: string[] | undefined;
                            errorCallbackURL?: string | undefined;
                            disableRedirect?: boolean | undefined;
                        };
                    } & {
                        method?: "POST" | undefined;
                    } & {
                        query?: Record<string, any> | undefined;
                    } & {
                        params?: Record<string, any>;
                    } & {
                        request?: Request;
                    } & {
                        headers: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: {
                            url: string;
                            redirect: boolean;
                        };
                    } : {
                        url: string;
                        redirect: boolean;
                    }>;
                    options: {
                        method: "POST";
                        requireHeaders: true;
                        body: zod.ZodObject<{
                            callbackURL: zod.ZodOptional<zod.ZodString>;
                            provider: zod.ZodType<"github" | "apple" | "discord" | "facebook" | "microsoft" | "google" | "huggingface" | "slack" | "spotify" | "twitch" | "twitter" | "dropbox" | "kick" | "linear" | "linkedin" | "gitlab" | "tiktok" | "reddit" | "roblox" | "vk" | "zoom" | "notion" | (string & {}), unknown, zod_v4_core.$ZodTypeInternals<"github" | "apple" | "discord" | "facebook" | "microsoft" | "google" | "huggingface" | "slack" | "spotify" | "twitch" | "twitter" | "dropbox" | "kick" | "linear" | "linkedin" | "gitlab" | "tiktok" | "reddit" | "roblox" | "vk" | "zoom" | "notion" | (string & {}), unknown>>;
                            idToken: zod.ZodOptional<zod.ZodObject<{
                                token: zod.ZodString;
                                nonce: zod.ZodOptional<zod.ZodString>;
                                accessToken: zod.ZodOptional<zod.ZodString>;
                                refreshToken: zod.ZodOptional<zod.ZodString>;
                                scopes: zod.ZodOptional<zod.ZodArray<zod.ZodString>>;
                            }, zod_v4_core.$strip>>;
                            requestSignUp: zod.ZodOptional<zod.ZodBoolean>;
                            scopes: zod.ZodOptional<zod.ZodArray<zod.ZodString>>;
                            errorCallbackURL: zod.ZodOptional<zod.ZodString>;
                            disableRedirect: zod.ZodOptional<zod.ZodBoolean>;
                        }, zod_v4_core.$strip>;
                        use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<{
                            session: {
                                session: Record<string, any> & {
                                    id: string;
                                    userId: string;
                                    expiresAt: Date;
                                    createdAt: Date;
                                    updatedAt: Date;
                                    token: string;
                                    ipAddress?: string | null | undefined;
                                    userAgent?: string | null | undefined;
                                };
                                user: Record<string, any> & {
                                    id: string;
                                    email: string;
                                    emailVerified: boolean;
                                    name: string;
                                    createdAt: Date;
                                    updatedAt: Date;
                                    image?: string | null | undefined;
                                };
                            };
                        }>)[];
                        metadata: {
                            openapi: {
                                description: string;
                                responses: {
                                    "200": {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "object";
                                                    properties: {
                                                        url: {
                                                            type: string;
                                                            description: string;
                                                        };
                                                        redirect: {
                                                            type: string;
                                                            description: string;
                                                        };
                                                        status: {
                                                            type: string;
                                                        };
                                                    };
                                                    required: string[];
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    } & {
                        use: any[];
                    };
                    path: "/link-social";
                };
                listUserAccounts: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0?: ({
                        body?: undefined;
                    } & {
                        method?: "GET" | undefined;
                    } & {
                        query?: Record<string, any> | undefined;
                    } & {
                        params?: Record<string, any>;
                    } & {
                        request?: Request;
                    } & {
                        headers?: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }) | undefined): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: {
                            id: string;
                            provider: string;
                            createdAt: Date;
                            updatedAt: Date;
                            accountId: string;
                            scopes: string[];
                        }[];
                    } : {
                        id: string;
                        provider: string;
                        createdAt: Date;
                        updatedAt: Date;
                        accountId: string;
                        scopes: string[];
                    }[]>;
                    options: {
                        method: "GET";
                        use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<{
                            session: {
                                session: Record<string, any> & {
                                    id: string;
                                    userId: string;
                                    expiresAt: Date;
                                    createdAt: Date;
                                    updatedAt: Date;
                                    token: string;
                                    ipAddress?: string | null | undefined;
                                    userAgent?: string | null | undefined;
                                };
                                user: Record<string, any> & {
                                    id: string;
                                    email: string;
                                    emailVerified: boolean;
                                    name: string;
                                    createdAt: Date;
                                    updatedAt: Date;
                                    image?: string | null | undefined;
                                };
                            };
                        }>)[];
                        metadata: {
                            openapi: {
                                description: string;
                                responses: {
                                    "200": {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "array";
                                                    items: {
                                                        type: string;
                                                        properties: {
                                                            id: {
                                                                type: string;
                                                            };
                                                            provider: {
                                                                type: string;
                                                            };
                                                            createdAt: {
                                                                type: string;
                                                                format: string;
                                                            };
                                                            updatedAt: {
                                                                type: string;
                                                                format: string;
                                                            };
                                                        };
                                                        accountId: {
                                                            type: string;
                                                        };
                                                        scopes: {
                                                            type: string;
                                                            items: {
                                                                type: string;
                                                            };
                                                        };
                                                    };
                                                    required: string[];
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    } & {
                        use: any[];
                    };
                    path: "/list-accounts";
                };
                deleteUserCallback: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                        body?: undefined;
                    } & {
                        method?: "GET" | undefined;
                    } & {
                        query: {
                            token: string;
                            callbackURL?: string | undefined;
                        };
                    } & {
                        params?: Record<string, any>;
                    } & {
                        request?: Request;
                    } & {
                        headers?: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: {
                            success: boolean;
                            message: string;
                        };
                    } : {
                        success: boolean;
                        message: string;
                    }>;
                    options: {
                        method: "GET";
                        query: zod.ZodObject<{
                            token: zod.ZodString;
                            callbackURL: zod.ZodOptional<zod.ZodString>;
                        }, zod_v4_core.$strip>;
                        use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<void>)[];
                        metadata: {
                            openapi: {
                                description: string;
                                responses: {
                                    "200": {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "object";
                                                    properties: {
                                                        success: {
                                                            type: string;
                                                            description: string;
                                                        };
                                                        message: {
                                                            type: string;
                                                            enum: string[];
                                                            description: string;
                                                        };
                                                    };
                                                    required: string[];
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    } & {
                        use: any[];
                    };
                    path: "/delete-user/callback";
                };
                unlinkAccount: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                        body: {
                            providerId: string;
                            accountId?: string | undefined;
                        };
                    } & {
                        method?: "POST" | undefined;
                    } & {
                        query?: Record<string, any> | undefined;
                    } & {
                        params?: Record<string, any>;
                    } & {
                        request?: Request;
                    } & {
                        headers?: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: {
                            status: boolean;
                        };
                    } : {
                        status: boolean;
                    }>;
                    options: {
                        method: "POST";
                        body: zod.ZodObject<{
                            providerId: zod.ZodString;
                            accountId: zod.ZodOptional<zod.ZodString>;
                        }, zod_v4_core.$strip>;
                        use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<{
                            session: {
                                session: Record<string, any> & {
                                    id: string;
                                    userId: string;
                                    expiresAt: Date;
                                    createdAt: Date;
                                    updatedAt: Date;
                                    token: string;
                                    ipAddress?: string | null | undefined;
                                    userAgent?: string | null | undefined;
                                };
                                user: Record<string, any> & {
                                    id: string;
                                    email: string;
                                    emailVerified: boolean;
                                    name: string;
                                    createdAt: Date;
                                    updatedAt: Date;
                                    image?: string | null | undefined;
                                };
                            };
                        }>)[];
                        metadata: {
                            openapi: {
                                description: string;
                                responses: {
                                    "200": {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "object";
                                                    properties: {
                                                        status: {
                                                            type: string;
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    } & {
                        use: any[];
                    };
                    path: "/unlink-account";
                };
                refreshToken: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                        body: {
                            providerId: string;
                            accountId?: string | undefined;
                            userId?: string | undefined;
                        };
                    } & {
                        method?: "POST" | undefined;
                    } & {
                        query?: Record<string, any> | undefined;
                    } & {
                        params?: Record<string, any>;
                    } & {
                        request?: Request;
                    } & {
                        headers?: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: OAuth2Tokens;
                    } : OAuth2Tokens>;
                    options: {
                        method: "POST";
                        body: zod.ZodObject<{
                            providerId: zod.ZodString;
                            accountId: zod.ZodOptional<zod.ZodString>;
                            userId: zod.ZodOptional<zod.ZodString>;
                        }, zod_v4_core.$strip>;
                        metadata: {
                            openapi: {
                                description: string;
                                responses: {
                                    200: {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "object";
                                                    properties: {
                                                        tokenType: {
                                                            type: string;
                                                        };
                                                        idToken: {
                                                            type: string;
                                                        };
                                                        accessToken: {
                                                            type: string;
                                                        };
                                                        refreshToken: {
                                                            type: string;
                                                        };
                                                        accessTokenExpiresAt: {
                                                            type: string;
                                                            format: string;
                                                        };
                                                        refreshTokenExpiresAt: {
                                                            type: string;
                                                            format: string;
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                    400: {
                                        description: string;
                                    };
                                };
                            };
                        };
                    } & {
                        use: any[];
                    };
                    path: "/refresh-token";
                };
                getAccessToken: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                        body: {
                            providerId: string;
                            accountId?: string | undefined;
                            userId?: string | undefined;
                        };
                    } & {
                        method?: "POST" | undefined;
                    } & {
                        query?: Record<string, any> | undefined;
                    } & {
                        params?: Record<string, any>;
                    } & {
                        request?: Request;
                    } & {
                        headers?: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: {
                            accessToken: string;
                            accessTokenExpiresAt: Date | undefined;
                            scopes: string[];
                            idToken: string | undefined;
                        };
                    } : {
                        accessToken: string;
                        accessTokenExpiresAt: Date | undefined;
                        scopes: string[];
                        idToken: string | undefined;
                    }>;
                    options: {
                        method: "POST";
                        body: zod.ZodObject<{
                            providerId: zod.ZodString;
                            accountId: zod.ZodOptional<zod.ZodString>;
                            userId: zod.ZodOptional<zod.ZodString>;
                        }, zod_v4_core.$strip>;
                        metadata: {
                            openapi: {
                                description: string;
                                responses: {
                                    200: {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "object";
                                                    properties: {
                                                        tokenType: {
                                                            type: string;
                                                        };
                                                        idToken: {
                                                            type: string;
                                                        };
                                                        accessToken: {
                                                            type: string;
                                                        };
                                                        refreshToken: {
                                                            type: string;
                                                        };
                                                        accessTokenExpiresAt: {
                                                            type: string;
                                                            format: string;
                                                        };
                                                        refreshTokenExpiresAt: {
                                                            type: string;
                                                            format: string;
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                    400: {
                                        description: string;
                                    };
                                };
                            };
                        };
                    } & {
                        use: any[];
                    };
                    path: "/get-access-token";
                };
                accountInfo: {
                    <AsResponse extends boolean = false, ReturnHeaders extends boolean = false>(inputCtx_0: {
                        body: {
                            accountId: string;
                        };
                    } & {
                        method?: "POST" | undefined;
                    } & {
                        query?: Record<string, any> | undefined;
                    } & {
                        params?: Record<string, any>;
                    } & {
                        request?: Request;
                    } & {
                        headers?: HeadersInit;
                    } & {
                        asResponse?: boolean;
                        returnHeaders?: boolean;
                        use?: better_call.Middleware[];
                        path?: string;
                    } & {
                        asResponse?: AsResponse | undefined;
                        returnHeaders?: ReturnHeaders | undefined;
                    }): Promise<[AsResponse] extends [true] ? Response : [ReturnHeaders] extends [true] ? {
                        headers: Headers;
                        response: {
                            user: {
                                id: string | number;
                                name?: string;
                                email?: string | null;
                                image?: string;
                                emailVerified: boolean;
                            };
                            data: Record<string, any>;
                        } | null;
                    } : {
                        user: {
                            id: string | number;
                            name?: string;
                            email?: string | null;
                            image?: string;
                            emailVerified: boolean;
                        };
                        data: Record<string, any>;
                    } | null>;
                    options: {
                        method: "POST";
                        use: ((inputContext: better_call.MiddlewareInputContext<better_call.MiddlewareOptions>) => Promise<{
                            session: {
                                session: Record<string, any> & {
                                    id: string;
                                    userId: string;
                                    expiresAt: Date;
                                    createdAt: Date;
                                    updatedAt: Date;
                                    token: string;
                                    ipAddress?: string | null | undefined;
                                    userAgent?: string | null | undefined;
                                };
                                user: Record<string, any> & {
                                    id: string;
                                    email: string;
                                    emailVerified: boolean;
                                    name: string;
                                    createdAt: Date;
                                    updatedAt: Date;
                                    image?: string | null | undefined;
                                };
                            };
                        }>)[];
                        metadata: {
                            openapi: {
                                description: string;
                                responses: {
                                    "200": {
                                        description: string;
                                        content: {
                                            "application/json": {
                                                schema: {
                                                    type: "object";
                                                    properties: {
                                                        user: {
                                                            type: string;
                                                            properties: {
                                                                id: {
                                                                    type: string;
                                                                };
                                                                name: {
                                                                    type: string;
                                                                };
                                                                email: {
                                                                    type: string;
                                                                };
                                                                image: {
                                                                    type: string;
                                                                };
                                                                emailVerified: {
                                                                    type: string;
                                                                };
                                                            };
                                                            required: string[];
                                                        };
                                                        data: {
                                                            type: string;
                                                            properties: {};
                                                            additionalProperties: boolean;
                                                        };
                                                    };
                                                    required: string[];
                                                    additionalProperties: boolean;
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                        body: zod.ZodObject<{
                            accountId: zod.ZodString;
                        }, zod_v4_core.$strip>;
                    } & {
                        use: any[];
                    };
                    path: "/account-info";
                };
            }>, (C extends undefined ? {} : C) & {
                baseURL: string | undefined;
                fetchOptions: {
                    customFetchImpl: (url: string | URL | Request, init?: RequestInit) => Promise<Response>;
                };
            }>> extends {
                getSession: () => Promise<infer Res>;
            } ? Res extends {
                data: infer S;
                error: null;
            } | {
                data: null;
                error: {
                    message?: string | undefined;
                    status: number;
                    statusText: string;
                };
            } ? S : Res extends Record<string, any> ? Res : never : never>;
        };
        $ERROR_CODES: InferErrorCodes<(C extends undefined ? {} : C) & {
            baseURL: string | undefined;
            fetchOptions: {
                customFetchImpl: (url: string | URL | Request, init?: RequestInit) => Promise<Response>;
            };
        }> & {
            USER_NOT_FOUND: string;
            FAILED_TO_CREATE_USER: string;
            FAILED_TO_CREATE_SESSION: string;
            FAILED_TO_UPDATE_USER: string;
            FAILED_TO_GET_SESSION: string;
            INVALID_PASSWORD: string;
            INVALID_EMAIL: string;
            INVALID_EMAIL_OR_PASSWORD: string;
            SOCIAL_ACCOUNT_ALREADY_LINKED: string;
            PROVIDER_NOT_FOUND: string;
            INVALID_TOKEN: string;
            ID_TOKEN_NOT_SUPPORTED: string;
            FAILED_TO_GET_USER_INFO: string;
            USER_EMAIL_NOT_FOUND: string;
            EMAIL_NOT_VERIFIED: string;
            PASSWORD_TOO_SHORT: string;
            PASSWORD_TOO_LONG: string;
            USER_ALREADY_EXISTS: string;
            EMAIL_CAN_NOT_BE_UPDATED: string;
            CREDENTIAL_ACCOUNT_NOT_FOUND: string;
            SESSION_EXPIRED: string;
            FAILED_TO_UNLINK_LAST_ACCOUNT: string;
            ACCOUNT_NOT_FOUND: string;
            USER_ALREADY_HAS_PASSWORD: string;
        } extends infer T_5 ? { [K_2 in keyof T_5]: T_5[K_2] extends (...args: any[]) => any ? T_5[K_2] : T_5[K_2] extends object ? T_5[K_2] extends any[] ? T_5[K_2] : T_5[K_2] extends Date ? T_5[K_2] : T_5[K_2] extends infer T_6 ? { [K_4 in keyof T_6]: T_6[K_4] extends (...args: any[]) => any ? T_6[K_4] : T_6[K_4] extends object ? T_6[K_4] extends any[] ? T_6[K_4] : T_6[K_4] extends Date ? T_6[K_4] : T_6[K_4] extends infer T_7 ? { [K_5 in keyof T_7]: T_7[K_5] extends (...args: any[]) => any ? T_7[K_5] : T_7[K_5] extends object ? T_7[K_5] extends any[] ? T_7[K_5] : T_7[K_5] extends Date ? T_7[K_5] : T_7[K_5] extends infer T_8 ? { [K_6 in keyof T_8]: T_8[K_6] extends (...args: any[]) => any ? T_8[K_6] : T_8[K_6] extends object ? T_8[K_6] extends any[] ? T_8[K_6] : T_8[K_6] extends Date ? T_8[K_6] : T_8[K_6] extends infer T_9 ? { [K_7 in keyof T_9]: T_9[K_7] extends (...args: any[]) => any ? T_9[K_7] : T_9[K_7] extends object ? T_9[K_7] extends any[] ? T_9[K_7] : T_9[K_7] extends Date ? T_9[K_7] : T_9[K_7] extends infer T_10 ? { [K_8 in keyof T_10]: T_10[K_8] extends (...args: any[]) => any ? T_10[K_8] : T_10[K_8] extends object ? T_10[K_8] extends any[] ? T_10[K_8] : T_10[K_8] extends Date ? T_10[K_8] : T_10[K_8] extends infer T_11 ? { [K_9 in keyof T_11]: T_11[K_9] extends (...args: any[]) => any ? T_11[K_9] : T_11[K_9] extends object ? T_11[K_9] extends any[] ? T_11[K_9] : T_11[K_9] extends Date ? T_11[K_9] : T_11[K_9] extends infer T_12 ? { [K_10 in keyof T_12]: T_12[K_10] extends (...args: any[]) => any ? T_12[K_10] : T_12[K_10] extends object ? T_12[K_10] extends any[] ? T_12[K_10] : T_12[K_10] extends Date ? T_12[K_10] : T_12[K_10] extends infer T_13 ? { [K_11 in keyof T_13]: T_13[K_11] extends (...args: any[]) => any ? T_13[K_11] : T_13[K_11] extends object ? T_13[K_11] extends any[] ? T_13[K_11] : T_13[K_11] extends Date ? T_13[K_11] : T_13[K_11] extends infer T_14 ? { [K_12 in keyof T_14]: T_14[K_12] extends (...args: any[]) => any ? T_14[K_12] : T_14[K_12] extends object ? T_14[K_12] extends any[] ? T_14[K_12] : T_14[K_12] extends Date ? T_14[K_12] : T_14[K_12] extends infer T_15 ? { [K_13 in keyof T_15]: T_15[K_13] extends (...args: any[]) => any ? T_15[K_13] : T_15[K_13] extends object ? T_15[K_13] extends any[] ? T_15[K_13] : T_15[K_13] extends Date ? T_15[K_13] : /*elided*/ any : T_15[K_13]; } : never : T_14[K_12]; } : never : T_13[K_11]; } : never : T_12[K_10]; } : never : T_11[K_9]; } : never : T_10[K_8]; } : never : T_9[K_7]; } : never : T_8[K_6]; } : never : T_7[K_5]; } : never : T_6[K_4]; } : never : T_5[K_2]; } : never;
    };
    testUser: {
        id?: string | undefined;
        email: string;
        emailVerified?: boolean | undefined;
        name: string;
        createdAt?: Date | undefined;
        updatedAt?: Date | undefined;
        image?: string | null | undefined;
        password: string;
    };
    signInWithTestUser: () => Promise<{
        session: Session;
        user: User;
        headers: Headers;
        setCookie: (name: string, value: string) => void;
    }>;
    signInWithUser: (email: string, password: string) => Promise<{
        res: {
            user: User;
            session: Session;
        };
        headers: Headers;
    }>;
    cookieSetter: typeof setCookieToHeader;
    customFetchImpl: (url: string | URL | Request, init?: RequestInit) => Promise<Response>;
    sessionSetter: (headers: Headers) => (context: SuccessContext) => void;
    db: Adapter;
}>;

export { getTestInstanceMemory };

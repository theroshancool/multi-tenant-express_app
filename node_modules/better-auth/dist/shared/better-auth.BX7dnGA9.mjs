import { i as createAuthMiddleware, l as sessionMiddleware } from './better-auth.BbL1R1Sz.mjs';
import 'better-call';
import * as z from 'zod/v4';
import './better-auth.CMQ3rA-I.mjs';
import '@better-auth/utils/base64';
import '@better-auth/utils/hmac';
import '@better-auth/utils/binary';
import './better-auth.n2KFGwjY.mjs';
import { g as generateId } from './better-auth.DBGfIDnh.mjs';
import '@better-auth/utils/hash';
import '@noble/ciphers/chacha';
import '@noble/ciphers/utils';
import '@noble/ciphers/webcrypto';
import 'jose';
import '@noble/hashes/scrypt';
import '@better-auth/utils';
import '@better-auth/utils/hex';
import '@noble/hashes/utils';
import './better-auth.B4Qoxdgc.mjs';

const orgMiddleware = createAuthMiddleware(async () => {
  return {};
});
const orgSessionMiddleware = createAuthMiddleware(
  {
    use: [sessionMiddleware]
  },
  async (ctx) => {
    const session = ctx.context.session;
    return {
      session
    };
  }
);

const role = z.string();
const invitationStatus = z.enum(["pending", "accepted", "rejected", "canceled"]).default("pending");
z.object({
  id: z.string().default(generateId),
  name: z.string(),
  slug: z.string(),
  logo: z.string().nullish().optional(),
  metadata: z.record(z.string(), z.unknown()).or(z.string().transform((v) => JSON.parse(v))).optional(),
  createdAt: z.date()
});
z.object({
  id: z.string().default(generateId),
  organizationId: z.string(),
  userId: z.coerce.string(),
  role,
  createdAt: z.date().default(() => /* @__PURE__ */ new Date())
});
z.object({
  id: z.string().default(generateId),
  organizationId: z.string(),
  email: z.string(),
  role,
  status: invitationStatus,
  teamId: z.string().nullish(),
  inviterId: z.string(),
  expiresAt: z.date()
});
const teamSchema = z.object({
  id: z.string().default(generateId),
  name: z.string().min(1),
  organizationId: z.string(),
  createdAt: z.date(),
  updatedAt: z.date().optional()
});
z.object({
  id: z.string().default(generateId),
  teamId: z.string(),
  userId: z.string(),
  createdAt: z.date().default(() => /* @__PURE__ */ new Date())
});
const defaultRoles = ["admin", "member", "owner"];
z.union([
  z.enum(defaultRoles),
  z.array(z.enum(defaultRoles))
]);

export { orgSessionMiddleware as a, orgMiddleware as o, teamSchema as t };
